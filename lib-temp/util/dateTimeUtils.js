function createUTCDate(year, month = 0, day = 1) {
    let date;
    if (year < 100 && year >= 0) {
        date = new Date(Date.UTC(year, month, day));
        if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(year);
        }
    }
    else {
        date = new Date(Date.UTC(year, month, day));
    }
    return date;
}
function firstWeekOffset(year, firstDayOfWeek, firstDayOfYear) {
    const firstWeekDayInFirstWeek = 7 + firstDayOfWeek - firstDayOfYear;
    const firstWeekDayOfYear = (7 + createUTCDate(year, 0, firstWeekDayInFirstWeek).getUTCDay() - firstDayOfWeek) % 7;
    return -firstWeekDayOfYear + firstWeekDayInFirstWeek - 1;
}
function dayOfYear(year, month, day, firstDayOfWeek) {
    let dayOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334][month];
    if (month > 1 && isLeapYear(year)) {
        dayOfYear++;
    }
    return dayOfYear + day;
}
function weeksInYear(year, firstDayOfWeek, firstDayOfYear) {
    const weekOffset = firstWeekOffset(year, firstDayOfWeek, firstDayOfYear);
    const weekOffsetNext = firstWeekOffset(year + 1, firstDayOfWeek, firstDayOfYear);
    const daysInYear = isLeapYear(year) ? 366 : 365;
    return (daysInYear - weekOffset + weekOffsetNext) / 7;
}
export function weekNumber(year, month, day, firstDayOfWeek, localeFirstDayOfYear) {
    const weekOffset = firstWeekOffset(year, firstDayOfWeek, localeFirstDayOfYear);
    const week = Math.ceil((dayOfYear(year, month, day, firstDayOfWeek) - weekOffset) / 7);
    if (week < 1) {
        return week + weeksInYear(year - 1, firstDayOfWeek, localeFirstDayOfYear);
    }
    else if (week > weeksInYear(year, firstDayOfWeek, localeFirstDayOfYear)) {
        return week - weeksInYear(year, firstDayOfWeek, localeFirstDayOfYear);
    }
    else {
        return week;
    }
}
export function isLeapYear(year) {
    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVRpbWVVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2RhdGVUaW1lVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxhQUFhLENBQUUsSUFBWSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDdEQsSUFBSSxJQUFJLENBQUE7SUFDUixJQUFJLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtRQUMzQixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDM0MsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUMxQjtLQUNGO1NBQU07UUFDTCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7S0FDNUM7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBRSxJQUFZLEVBQUUsY0FBc0IsRUFBRSxjQUFzQjtJQUNwRixNQUFNLHVCQUF1QixHQUFHLENBQUMsR0FBRyxjQUFjLEdBQUcsY0FBYyxDQUFBO0lBQ25FLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFakgsT0FBTyxDQUFDLGtCQUFrQixHQUFHLHVCQUF1QixHQUFHLENBQUMsQ0FBQTtBQUMxRCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxHQUFXLEVBQUUsY0FBc0I7SUFDbEYsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzlFLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakMsU0FBUyxFQUFFLENBQUE7S0FDWjtJQUVELE9BQU8sU0FBUyxHQUFHLEdBQUcsQ0FBQTtBQUN4QixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUUsSUFBWSxFQUFFLGNBQXNCLEVBQUUsY0FBc0I7SUFDaEYsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUE7SUFDeEUsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFBO0lBQ2hGLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7SUFFL0MsT0FBTyxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZELENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFFLElBQVksRUFBRSxLQUFhLEVBQUUsR0FBVyxFQUFFLGNBQXNCLEVBQUUsb0JBQTRCO0lBQ3hILE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLG9CQUFvQixDQUFDLENBQUE7SUFDOUUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV0RixJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDWixPQUFPLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxjQUFjLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtLQUMxRTtTQUFNLElBQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLG9CQUFvQixDQUFDLEVBQUU7UUFDekUsT0FBTyxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtLQUN0RTtTQUFNO1FBQ0wsT0FBTyxJQUFJLENBQUE7S0FDWjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFFLElBQVk7SUFDdEMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDdkUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHllYXI6IG51bWJlciwgbW9udGggPSAwLCBkYXkgPSAxKSB7XG4gIGxldCBkYXRlXG4gIGlmICh5ZWFyIDwgMTAwICYmIHllYXIgPj0gMCkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5KSlcbiAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSkpXG4gIH1cblxuICByZXR1cm4gZGF0ZVxufVxuXG5mdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQgKHllYXI6IG51bWJlciwgZmlyc3REYXlPZldlZWs6IG51bWJlciwgZmlyc3REYXlPZlllYXI6IG51bWJlcikge1xuICBjb25zdCBmaXJzdFdlZWtEYXlJbkZpcnN0V2VlayA9IDcgKyBmaXJzdERheU9mV2VlayAtIGZpcnN0RGF5T2ZZZWFyXG4gIGNvbnN0IGZpcnN0V2Vla0RheU9mWWVhciA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmaXJzdFdlZWtEYXlJbkZpcnN0V2VlaykuZ2V0VVRDRGF5KCkgLSBmaXJzdERheU9mV2VlaykgJSA3XG5cbiAgcmV0dXJuIC1maXJzdFdlZWtEYXlPZlllYXIgKyBmaXJzdFdlZWtEYXlJbkZpcnN0V2VlayAtIDFcbn1cblxuZnVuY3Rpb24gZGF5T2ZZZWFyICh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIsIGRheTogbnVtYmVyLCBmaXJzdERheU9mV2VlazogbnVtYmVyKSB7XG4gIGxldCBkYXlPZlllYXIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdW21vbnRoXVxuICBpZiAobW9udGggPiAxICYmIGlzTGVhcFllYXIoeWVhcikpIHtcbiAgICBkYXlPZlllYXIrK1xuICB9XG5cbiAgcmV0dXJuIGRheU9mWWVhciArIGRheVxufVxuXG5mdW5jdGlvbiB3ZWVrc0luWWVhciAoeWVhcjogbnVtYmVyLCBmaXJzdERheU9mV2VlazogbnVtYmVyLCBmaXJzdERheU9mWWVhcjogbnVtYmVyKSB7XG4gIGNvbnN0IHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZmlyc3REYXlPZldlZWssIGZpcnN0RGF5T2ZZZWFyKVxuICBjb25zdCB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZmlyc3REYXlPZldlZWssIGZpcnN0RGF5T2ZZZWFyKVxuICBjb25zdCBkYXlzSW5ZZWFyID0gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NVxuXG4gIHJldHVybiAoZGF5c0luWWVhciAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWVrTnVtYmVyICh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIsIGRheTogbnVtYmVyLCBmaXJzdERheU9mV2VlazogbnVtYmVyLCBsb2NhbGVGaXJzdERheU9mWWVhcjogbnVtYmVyKTogbnVtYmVyIHtcbiAgY29uc3Qgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBmaXJzdERheU9mV2VlaywgbG9jYWxlRmlyc3REYXlPZlllYXIpXG4gIGNvbnN0IHdlZWsgPSBNYXRoLmNlaWwoKGRheU9mWWVhcih5ZWFyLCBtb250aCwgZGF5LCBmaXJzdERheU9mV2VlaykgLSB3ZWVrT2Zmc2V0KSAvIDcpXG5cbiAgaWYgKHdlZWsgPCAxKSB7XG4gICAgcmV0dXJuIHdlZWsgKyB3ZWVrc0luWWVhcih5ZWFyIC0gMSwgZmlyc3REYXlPZldlZWssIGxvY2FsZUZpcnN0RGF5T2ZZZWFyKVxuICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcih5ZWFyLCBmaXJzdERheU9mV2VlaywgbG9jYWxlRmlyc3REYXlPZlllYXIpKSB7XG4gICAgcmV0dXJuIHdlZWsgLSB3ZWVrc0luWWVhcih5ZWFyLCBmaXJzdERheU9mV2VlaywgbG9jYWxlRmlyc3REYXlPZlllYXIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHdlZWtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMZWFwWWVhciAoeWVhcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiAoKHllYXIgJSA0ID09PSAwKSAmJiAoeWVhciAlIDEwMCAhPT0gMCkpIHx8ICh5ZWFyICUgNDAwID09PSAwKVxufVxuIl19