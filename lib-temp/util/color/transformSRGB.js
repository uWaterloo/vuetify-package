import { clamp } from '../../util/helpers';
// For converting XYZ to sRGB
const srgbForwardMatrix = [
    [3.2406, -1.5372, -0.4986],
    [-0.9689, 1.8758, 0.0415],
    [0.0557, -0.2040, 1.0570],
];
// Forward gamma adjust
const srgbForwardTransform = (C) => (C <= 0.0031308
    ? C * 12.92
    : 1.055 * C ** (1 / 2.4) - 0.055);
// For converting sRGB to XYZ
const srgbReverseMatrix = [
    [0.4124, 0.3576, 0.1805],
    [0.2126, 0.7152, 0.0722],
    [0.0193, 0.1192, 0.9505],
];
// Reverse gamma adjust
const srgbReverseTransform = (C) => (C <= 0.04045
    ? C / 12.92
    : ((C + 0.055) / 1.055) ** 2.4);
export function fromXYZ(xyz) {
    const rgb = Array(3);
    const transform = srgbForwardTransform;
    const matrix = srgbForwardMatrix;
    // Matrix transform, then gamma adjustment
    for (let i = 0; i < 3; ++i) {
        rgb[i] = Math.round(clamp(transform(matrix[i][0] * xyz[0] +
            matrix[i][1] * xyz[1] +
            matrix[i][2] * xyz[2])) * 255);
    }
    // Rescale back to [0, 255]
    return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);
}
export function toXYZ(rgb) {
    const xyz = [0, 0, 0];
    const transform = srgbReverseTransform;
    const matrix = srgbReverseMatrix;
    // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB
    const r = transform((rgb >> 16 & 0xff) / 255);
    const g = transform((rgb >> 8 & 0xff) / 255);
    const b = transform((rgb >> 0 & 0xff) / 255);
    // Matrix color space transform
    for (let i = 0; i < 3; ++i) {
        xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;
    }
    return xyz;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtU1JHQi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlsL2NvbG9yL3RyYW5zZm9ybVNSR0IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRTFDLDZCQUE2QjtBQUM3QixNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztJQUN6QixDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7Q0FDMUIsQ0FBQTtBQUVELHVCQUF1QjtBQUN2QixNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBUyxFQUFVLEVBQUUsQ0FBQyxDQUNsRCxDQUFDLElBQUksU0FBUztJQUNaLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSztJQUNYLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FDbkMsQ0FBQTtBQUVELDZCQUE2QjtBQUM3QixNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7SUFDeEIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztJQUN4QixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0NBQ3pCLENBQUE7QUFFRCx1QkFBdUI7QUFDdkIsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQVMsRUFBVSxFQUFFLENBQUMsQ0FDbEQsQ0FBQyxJQUFJLE9BQU87SUFDVixDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUs7SUFDWCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQ2pDLENBQUE7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFFLEdBQVE7SUFDL0IsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3BCLE1BQU0sU0FBUyxHQUFHLG9CQUFvQixDQUFBO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFBO0lBRWhDLDBDQUEwQztJQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQ2pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3RCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtLQUNWO0lBRUQsMkJBQTJCO0lBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDdkQsQ0FBQztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUUsR0FBYTtJQUNsQyxNQUFNLEdBQUcsR0FBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDMUIsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUE7SUFDdEMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUE7SUFFaEMsdUVBQXVFO0lBQ3ZFLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDN0MsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO0lBRTVDLCtCQUErQjtJQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNoRTtJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbG9ySW50LCBYWVogfSBmcm9tICcuLi9jb2xvclV0aWxzJ1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5cbi8vIEZvciBjb252ZXJ0aW5nIFhZWiB0byBzUkdCXG5jb25zdCBzcmdiRm9yd2FyZE1hdHJpeCA9IFtcbiAgWzMuMjQwNiwgLTEuNTM3MiwgLTAuNDk4Nl0sXG4gIFstMC45Njg5LCAxLjg3NTgsIDAuMDQxNV0sXG4gIFswLjA1NTcsIC0wLjIwNDAsIDEuMDU3MF0sXG5dXG5cbi8vIEZvcndhcmQgZ2FtbWEgYWRqdXN0XG5jb25zdCBzcmdiRm9yd2FyZFRyYW5zZm9ybSA9IChDOiBudW1iZXIpOiBudW1iZXIgPT4gKFxuICBDIDw9IDAuMDAzMTMwOFxuICAgID8gQyAqIDEyLjkyXG4gICAgOiAxLjA1NSAqIEMgKiogKDEgLyAyLjQpIC0gMC4wNTVcbilcblxuLy8gRm9yIGNvbnZlcnRpbmcgc1JHQiB0byBYWVpcbmNvbnN0IHNyZ2JSZXZlcnNlTWF0cml4ID0gW1xuICBbMC40MTI0LCAwLjM1NzYsIDAuMTgwNV0sXG4gIFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXSxcbiAgWzAuMDE5MywgMC4xMTkyLCAwLjk1MDVdLFxuXVxuXG4vLyBSZXZlcnNlIGdhbW1hIGFkanVzdFxuY29uc3Qgc3JnYlJldmVyc2VUcmFuc2Zvcm0gPSAoQzogbnVtYmVyKTogbnVtYmVyID0+IChcbiAgQyA8PSAwLjA0MDQ1XG4gICAgPyBDIC8gMTIuOTJcbiAgICA6ICgoQyArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjRcbilcblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21YWVogKHh5ejogWFlaKTogQ29sb3JJbnQge1xuICBjb25zdCByZ2IgPSBBcnJheSgzKVxuICBjb25zdCB0cmFuc2Zvcm0gPSBzcmdiRm9yd2FyZFRyYW5zZm9ybVxuICBjb25zdCBtYXRyaXggPSBzcmdiRm9yd2FyZE1hdHJpeFxuXG4gIC8vIE1hdHJpeCB0cmFuc2Zvcm0sIHRoZW4gZ2FtbWEgYWRqdXN0bWVudFxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgIHJnYltpXSA9IE1hdGgucm91bmQoY2xhbXAodHJhbnNmb3JtKFxuICAgICAgbWF0cml4W2ldWzBdICogeHl6WzBdICtcbiAgICAgIG1hdHJpeFtpXVsxXSAqIHh5elsxXSArXG4gICAgICBtYXRyaXhbaV1bMl0gKiB4eXpbMl1cbiAgICApKSAqIDI1NSlcbiAgfVxuXG4gIC8vIFJlc2NhbGUgYmFjayB0byBbMCwgMjU1XVxuICByZXR1cm4gKHJnYlswXSA8PCAxNikgKyAocmdiWzFdIDw8IDgpICsgKHJnYlsyXSA8PCAwKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9YWVogKHJnYjogQ29sb3JJbnQpOiBYWVoge1xuICBjb25zdCB4eXo6IFhZWiA9IFswLCAwLCAwXVxuICBjb25zdCB0cmFuc2Zvcm0gPSBzcmdiUmV2ZXJzZVRyYW5zZm9ybVxuICBjb25zdCBtYXRyaXggPSBzcmdiUmV2ZXJzZU1hdHJpeFxuXG4gIC8vIFJlc2NhbGUgZnJvbSBbMCwgMjU1XSB0byBbMCwgMV0gdGhlbiBhZGp1c3Qgc1JHQiBnYW1tYSB0byBsaW5lYXIgUkdCXG4gIGNvbnN0IHIgPSB0cmFuc2Zvcm0oKHJnYiA+PiAxNiAmIDB4ZmYpIC8gMjU1KVxuICBjb25zdCBnID0gdHJhbnNmb3JtKChyZ2IgPj4gOCAmIDB4ZmYpIC8gMjU1KVxuICBjb25zdCBiID0gdHJhbnNmb3JtKChyZ2IgPj4gMCAmIDB4ZmYpIC8gMjU1KVxuXG4gIC8vIE1hdHJpeCBjb2xvciBzcGFjZSB0cmFuc2Zvcm1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICB4eXpbaV0gPSBtYXRyaXhbaV1bMF0gKiByICsgbWF0cml4W2ldWzFdICogZyArIG1hdHJpeFtpXVsyXSAqIGJcbiAgfVxuXG4gIHJldHVybiB4eXpcbn1cbiJdfQ==