// Return target's cumulative offset from the top
export function getOffset(target) {
    if (typeof target === 'number') {
        return target;
    }
    let el = $(target);
    if (!el) {
        throw typeof target === 'string'
            ? new Error(`Target element "${target}" not found.`)
            : new TypeError(`Target must be a Number/Selector/HTMLElement/VueComponent, received ${type(target)} instead.`);
    }
    let totalOffset = 0;
    while (el) {
        totalOffset += el.offsetTop;
        el = el.offsetParent;
    }
    return totalOffset;
}
export function getContainer(container) {
    const el = $(container);
    if (el)
        return el;
    throw typeof container === 'string'
        ? new Error(`Container element "${container}" not found.`)
        : new TypeError(`Container must be a Selector/HTMLElement/VueComponent, received ${type(container)} instead.`);
}
function type(el) {
    return el == null ? el : el.constructor.name;
}
function $(el) {
    if (typeof el === 'string') {
        return document.querySelector(el);
    }
    else if (el && el._isVue) {
        return el.$el;
    }
    else if (el instanceof HTMLElement) {
        return el;
    }
    else {
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9nb3RvL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsaURBQWlEO0FBQ2pELE1BQU0sVUFBVSxTQUFTLENBQUUsTUFBVztJQUNwQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtRQUM5QixPQUFPLE1BQU0sQ0FBQTtLQUNkO0lBRUQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2xCLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDUCxNQUFNLE9BQU8sTUFBTSxLQUFLLFFBQVE7WUFDOUIsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLG1CQUFtQixNQUFNLGNBQWMsQ0FBQztZQUNwRCxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsdUVBQXVFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7S0FDbEg7SUFFRCxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUE7SUFDbkIsT0FBTyxFQUFFLEVBQUU7UUFDVCxXQUFXLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQTtRQUMzQixFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQTJCLENBQUE7S0FDcEM7SUFFRCxPQUFPLFdBQVcsQ0FBQTtBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBRSxTQUFjO0lBQzFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUV2QixJQUFJLEVBQUU7UUFBRSxPQUFPLEVBQUUsQ0FBQTtJQUVqQixNQUFNLE9BQU8sU0FBUyxLQUFLLFFBQVE7UUFDakMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLHNCQUFzQixTQUFTLGNBQWMsQ0FBQztRQUMxRCxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsbUVBQW1FLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDbEgsQ0FBQztBQUVELFNBQVMsSUFBSSxDQUFFLEVBQU87SUFDcEIsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFBO0FBQzlDLENBQUM7QUFFRCxTQUFTLENBQUMsQ0FBRSxFQUFPO0lBQ2pCLElBQUksT0FBTyxFQUFFLEtBQUssUUFBUSxFQUFFO1FBQzFCLE9BQU8sUUFBUSxDQUFDLGFBQWEsQ0FBYyxFQUFFLENBQUMsQ0FBQTtLQUMvQztTQUFNLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUU7UUFDMUIsT0FBUSxFQUFVLENBQUMsR0FBa0IsQ0FBQTtLQUN0QztTQUFNLElBQUksRUFBRSxZQUFZLFdBQVcsRUFBRTtRQUNwQyxPQUFPLEVBQUUsQ0FBQTtLQUNWO1NBQU07UUFDTCxPQUFPLElBQUksQ0FBQTtLQUNaO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuXG4vLyBSZXR1cm4gdGFyZ2V0J3MgY3VtdWxhdGl2ZSBvZmZzZXQgZnJvbSB0aGUgdG9wXG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0ICh0YXJnZXQ6IGFueSk6IG51bWJlciB7XG4gIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0YXJnZXRcbiAgfVxuXG4gIGxldCBlbCA9ICQodGFyZ2V0KVxuICBpZiAoIWVsKSB7XG4gICAgdGhyb3cgdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZydcbiAgICAgID8gbmV3IEVycm9yKGBUYXJnZXQgZWxlbWVudCBcIiR7dGFyZ2V0fVwiIG5vdCBmb3VuZC5gKVxuICAgICAgOiBuZXcgVHlwZUVycm9yKGBUYXJnZXQgbXVzdCBiZSBhIE51bWJlci9TZWxlY3Rvci9IVE1MRWxlbWVudC9WdWVDb21wb25lbnQsIHJlY2VpdmVkICR7dHlwZSh0YXJnZXQpfSBpbnN0ZWFkLmApXG4gIH1cblxuICBsZXQgdG90YWxPZmZzZXQgPSAwXG4gIHdoaWxlIChlbCkge1xuICAgIHRvdGFsT2Zmc2V0ICs9IGVsLm9mZnNldFRvcFxuICAgIGVsID0gZWwub2Zmc2V0UGFyZW50IGFzIEhUTUxFbGVtZW50XG4gIH1cblxuICByZXR1cm4gdG90YWxPZmZzZXRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRhaW5lciAoY29udGFpbmVyOiBhbnkpOiBIVE1MRWxlbWVudCB7XG4gIGNvbnN0IGVsID0gJChjb250YWluZXIpXG5cbiAgaWYgKGVsKSByZXR1cm4gZWxcblxuICB0aHJvdyB0eXBlb2YgY29udGFpbmVyID09PSAnc3RyaW5nJ1xuICAgID8gbmV3IEVycm9yKGBDb250YWluZXIgZWxlbWVudCBcIiR7Y29udGFpbmVyfVwiIG5vdCBmb3VuZC5gKVxuICAgIDogbmV3IFR5cGVFcnJvcihgQ29udGFpbmVyIG11c3QgYmUgYSBTZWxlY3Rvci9IVE1MRWxlbWVudC9WdWVDb21wb25lbnQsIHJlY2VpdmVkICR7dHlwZShjb250YWluZXIpfSBpbnN0ZWFkLmApXG59XG5cbmZ1bmN0aW9uIHR5cGUgKGVsOiBhbnkpIHtcbiAgcmV0dXJuIGVsID09IG51bGwgPyBlbCA6IGVsLmNvbnN0cnVjdG9yLm5hbWVcbn1cblxuZnVuY3Rpb24gJCAoZWw6IGFueSk6IEhUTUxFbGVtZW50IHwgbnVsbCB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KGVsKVxuICB9IGVsc2UgaWYgKGVsICYmIGVsLl9pc1Z1ZSkge1xuICAgIHJldHVybiAoZWwgYXMgVnVlKS4kZWwgYXMgSFRNTEVsZW1lbnRcbiAgfSBlbHNlIGlmIChlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIl19