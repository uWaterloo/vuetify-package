// Extensions
import { Service } from '../service';
// Utilities
import * as easingPatterns from './easing-patterns';
import { getContainer, getOffset, } from './util';
export default function goTo(_target, _settings = {}) {
    const settings = {
        container: document.scrollingElement || document.body || document.documentElement,
        duration: 500,
        offset: 0,
        easing: 'easeInOutCubic',
        appOffset: true,
        ..._settings,
    };
    const container = getContainer(settings.container);
    /* istanbul ignore else */
    if (settings.appOffset && goTo.framework.application) {
        const isDrawer = container.classList.contains('v-navigation-drawer');
        const isClipped = container.classList.contains('v-navigation-drawer--clipped');
        const { bar, top } = goTo.framework.application;
        settings.offset += bar;
        /* istanbul ignore else */
        if (!isDrawer || isClipped)
            settings.offset += top;
    }
    const startTime = performance.now();
    let targetLocation;
    if (typeof _target === 'number') {
        targetLocation = getOffset(_target) - settings.offset;
    }
    else {
        targetLocation = getOffset(_target) - getOffset(container) - settings.offset;
    }
    const startLocation = container.scrollTop;
    if (targetLocation === startLocation)
        return Promise.resolve(targetLocation);
    const ease = typeof settings.easing === 'function'
        ? settings.easing
        : easingPatterns[settings.easing];
    /* istanbul ignore else */
    if (!ease)
        throw new TypeError(`Easing function "${settings.easing}" not found.`);
    // Cannot be tested properly in jsdom
    /* istanbul ignore next */
    return new Promise(resolve => requestAnimationFrame(function step(currentTime) {
        const timeElapsed = currentTime - startTime;
        const progress = Math.abs(settings.duration ? Math.min(timeElapsed / settings.duration, 1) : 1);
        container.scrollTop = Math.floor(startLocation + (targetLocation - startLocation) * ease(progress));
        const clientHeight = container === document.body ? document.documentElement.clientHeight : container.clientHeight;
        const reachBottom = clientHeight + container.scrollTop >= container.scrollHeight;
        if (progress === 1 ||
            // Need to go lower but reach bottom
            (targetLocation > container.scrollTop && reachBottom)) {
            return resolve(targetLocation);
        }
        requestAnimationFrame(step);
    }));
}
goTo.framework = {};
goTo.init = () => { };
export class Goto extends Service {
    constructor() {
        super();
        return goTo;
    }
}
Goto.property = 'goTo';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvZ290by9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhO0FBQ2IsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUVwQyxZQUFZO0FBQ1osT0FBTyxLQUFLLGNBQWMsTUFBTSxtQkFBbUIsQ0FBQTtBQUNuRCxPQUFPLEVBQ0wsWUFBWSxFQUNaLFNBQVMsR0FDVixNQUFNLFFBQVEsQ0FBQTtBQU9mLE1BQU0sQ0FBQyxPQUFPLFVBQVUsSUFBSSxDQUMxQixPQUEwQixFQUMxQixZQUF5QixFQUFFO0lBRTNCLE1BQU0sUUFBUSxHQUFnQjtRQUM1QixTQUFTLEVBQUcsUUFBUSxDQUFDLGdCQUF1QyxJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLGVBQWU7UUFDekcsUUFBUSxFQUFFLEdBQUc7UUFDYixNQUFNLEVBQUUsQ0FBQztRQUNULE1BQU0sRUFBRSxnQkFBZ0I7UUFDeEIsU0FBUyxFQUFFLElBQUk7UUFDZixHQUFHLFNBQVM7S0FDYixDQUFBO0lBQ0QsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUVsRCwwQkFBMEI7SUFDMUIsSUFBSSxRQUFRLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFO1FBQ3BELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDcEUsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsQ0FBQTtRQUM5RSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBa0IsQ0FBQTtRQUV0RCxRQUFRLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQTtRQUN0QiwwQkFBMEI7UUFDMUIsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTO1lBQUUsUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUE7S0FDbkQ7SUFFRCxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUE7SUFFbkMsSUFBSSxjQUFzQixDQUFBO0lBQzFCLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1FBQy9CLGNBQWMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU8sQ0FBQTtLQUN2RDtTQUFNO1FBQ0wsY0FBYyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU8sQ0FBQTtLQUM5RTtJQUVELE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUE7SUFDekMsSUFBSSxjQUFjLEtBQUssYUFBYTtRQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUU1RSxNQUFNLElBQUksR0FBRyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQUssVUFBVTtRQUNoRCxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU07UUFDakIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsTUFBTyxDQUFDLENBQUE7SUFDcEMsMEJBQTBCO0lBQzFCLElBQUksQ0FBQyxJQUFJO1FBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxvQkFBb0IsUUFBUSxDQUFDLE1BQU0sY0FBYyxDQUFDLENBQUE7SUFFakYscUNBQXFDO0lBQ3JDLDBCQUEwQjtJQUMxQixPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsU0FBUyxJQUFJLENBQUUsV0FBbUI7UUFDcEYsTUFBTSxXQUFXLEdBQUcsV0FBVyxHQUFHLFNBQVMsQ0FBQTtRQUMzQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRS9GLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFFbkcsTUFBTSxZQUFZLEdBQUcsU0FBUyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFBO1FBQ2pILE1BQU0sV0FBVyxHQUFHLFlBQVksR0FBRyxTQUFTLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUE7UUFDaEYsSUFDRSxRQUFRLEtBQUssQ0FBQztZQUNkLG9DQUFvQztZQUNwQyxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUMsU0FBUyxJQUFJLFdBQVcsQ0FBQyxFQUNyRDtZQUNBLE9BQU8sT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1NBQy9CO1FBRUQscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQTRDLENBQUE7QUFDN0QsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUE7QUFFcEIsTUFBTSxPQUFPLElBQUssU0FBUSxPQUFPO0lBRy9CO1FBQ0UsS0FBSyxFQUFFLENBQUE7UUFFUCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7O0FBTmEsYUFBUSxHQUFXLE1BQU0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEV4dGVuc2lvbnNcbmltcG9ydCB7IFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlJ1xuXG4vLyBVdGlsaXRpZXNcbmltcG9ydCAqIGFzIGVhc2luZ1BhdHRlcm5zIGZyb20gJy4vZWFzaW5nLXBhdHRlcm5zJ1xuaW1wb3J0IHtcbiAgZ2V0Q29udGFpbmVyLFxuICBnZXRPZmZzZXQsXG59IGZyb20gJy4vdXRpbCdcblxuLy8gVHlwZXNcbmltcG9ydCB7IEdvVG9PcHRpb25zLCBWdWV0aWZ5R29Ub1RhcmdldCB9IGZyb20gJ3Z1ZXRpZnkvdHlwZXMvc2VydmljZXMvZ290bydcblxuaW1wb3J0IHsgVnVldGlmeVNlcnZpY2VDb250cmFjdCB9IGZyb20gJ3Z1ZXRpZnkvdHlwZXMvc2VydmljZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdvVG8gKFxuICBfdGFyZ2V0OiBWdWV0aWZ5R29Ub1RhcmdldCxcbiAgX3NldHRpbmdzOiBHb1RvT3B0aW9ucyA9IHt9XG4pOiBQcm9taXNlPG51bWJlcj4ge1xuICBjb25zdCBzZXR0aW5nczogR29Ub09wdGlvbnMgPSB7XG4gICAgY29udGFpbmVyOiAoZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCBhcyBIVE1MRWxlbWVudCB8IG51bGwpIHx8IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgIGR1cmF0aW9uOiA1MDAsXG4gICAgb2Zmc2V0OiAwLFxuICAgIGVhc2luZzogJ2Vhc2VJbk91dEN1YmljJyxcbiAgICBhcHBPZmZzZXQ6IHRydWUsXG4gICAgLi4uX3NldHRpbmdzLFxuICB9XG4gIGNvbnN0IGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihzZXR0aW5ncy5jb250YWluZXIpXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHNldHRpbmdzLmFwcE9mZnNldCAmJiBnb1RvLmZyYW1ld29yay5hcHBsaWNhdGlvbikge1xuICAgIGNvbnN0IGlzRHJhd2VyID0gY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygndi1uYXZpZ2F0aW9uLWRyYXdlcicpXG4gICAgY29uc3QgaXNDbGlwcGVkID0gY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygndi1uYXZpZ2F0aW9uLWRyYXdlci0tY2xpcHBlZCcpXG4gICAgY29uc3QgeyBiYXIsIHRvcCB9ID0gZ29Uby5mcmFtZXdvcmsuYXBwbGljYXRpb24gYXMgYW55XG5cbiAgICBzZXR0aW5ncy5vZmZzZXQgKz0gYmFyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoIWlzRHJhd2VyIHx8IGlzQ2xpcHBlZCkgc2V0dGluZ3Mub2Zmc2V0ICs9IHRvcFxuICB9XG5cbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcblxuICBsZXQgdGFyZ2V0TG9jYXRpb246IG51bWJlclxuICBpZiAodHlwZW9mIF90YXJnZXQgPT09ICdudW1iZXInKSB7XG4gICAgdGFyZ2V0TG9jYXRpb24gPSBnZXRPZmZzZXQoX3RhcmdldCkgLSBzZXR0aW5ncy5vZmZzZXQhXG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0TG9jYXRpb24gPSBnZXRPZmZzZXQoX3RhcmdldCkgLSBnZXRPZmZzZXQoY29udGFpbmVyKSAtIHNldHRpbmdzLm9mZnNldCFcbiAgfVxuXG4gIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSBjb250YWluZXIuc2Nyb2xsVG9wXG4gIGlmICh0YXJnZXRMb2NhdGlvbiA9PT0gc3RhcnRMb2NhdGlvbikgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0YXJnZXRMb2NhdGlvbilcblxuICBjb25zdCBlYXNlID0gdHlwZW9mIHNldHRpbmdzLmVhc2luZyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2V0dGluZ3MuZWFzaW5nXG4gICAgOiBlYXNpbmdQYXR0ZXJuc1tzZXR0aW5ncy5lYXNpbmchXVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoIWVhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoYEVhc2luZyBmdW5jdGlvbiBcIiR7c2V0dGluZ3MuZWFzaW5nfVwiIG5vdCBmb3VuZC5gKVxuXG4gIC8vIENhbm5vdCBiZSB0ZXN0ZWQgcHJvcGVybHkgaW4ganNkb21cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIHN0ZXAgKGN1cnJlbnRUaW1lOiBudW1iZXIpIHtcbiAgICBjb25zdCB0aW1lRWxhcHNlZCA9IGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLmFicyhzZXR0aW5ncy5kdXJhdGlvbiA/IE1hdGgubWluKHRpbWVFbGFwc2VkIC8gc2V0dGluZ3MuZHVyYXRpb24sIDEpIDogMSlcblxuICAgIGNvbnRhaW5lci5zY3JvbGxUb3AgPSBNYXRoLmZsb29yKHN0YXJ0TG9jYXRpb24gKyAodGFyZ2V0TG9jYXRpb24gLSBzdGFydExvY2F0aW9uKSAqIGVhc2UocHJvZ3Jlc3MpKVxuXG4gICAgY29uc3QgY2xpZW50SGVpZ2h0ID0gY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA6IGNvbnRhaW5lci5jbGllbnRIZWlnaHRcbiAgICBjb25zdCByZWFjaEJvdHRvbSA9IGNsaWVudEhlaWdodCArIGNvbnRhaW5lci5zY3JvbGxUb3AgPj0gY29udGFpbmVyLnNjcm9sbEhlaWdodFxuICAgIGlmIChcbiAgICAgIHByb2dyZXNzID09PSAxIHx8XG4gICAgICAvLyBOZWVkIHRvIGdvIGxvd2VyIGJ1dCByZWFjaCBib3R0b21cbiAgICAgICh0YXJnZXRMb2NhdGlvbiA+IGNvbnRhaW5lci5zY3JvbGxUb3AgJiYgcmVhY2hCb3R0b20pXG4gICAgKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh0YXJnZXRMb2NhdGlvbilcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcClcbiAgfSkpXG59XG5cbmdvVG8uZnJhbWV3b3JrID0ge30gYXMgUmVjb3JkPHN0cmluZywgVnVldGlmeVNlcnZpY2VDb250cmFjdD5cbmdvVG8uaW5pdCA9ICgpID0+IHt9XG5cbmV4cG9ydCBjbGFzcyBHb3RvIGV4dGVuZHMgU2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgcHJvcGVydHk6ICdnb1RvJyA9ICdnb1RvJ1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG5cbiAgICByZXR1cm4gZ29Ub1xuICB9XG59XG4iXX0=