// Extensions
import { Service } from '../service';
// Utilities
import { getObjectValueByPath } from '../../util/helpers';
import { consoleError, consoleWarn } from '../../util/console';
const LANG_PREFIX = '$vuetify.';
const fallback = Symbol('Lang fallback');
function getTranslation(locale, key, usingDefault = false, defaultLocale) {
    const shortKey = key.replace(LANG_PREFIX, '');
    let translation = getObjectValueByPath(locale, shortKey, fallback);
    if (translation === fallback) {
        if (usingDefault) {
            consoleError(`Translation key "${shortKey}" not found in fallback`);
            translation = key;
        }
        else {
            consoleWarn(`Translation key "${shortKey}" not found, falling back to default`);
            translation = getTranslation(defaultLocale, key, true, defaultLocale);
        }
    }
    return translation;
}
export class Lang extends Service {
    constructor(preset) {
        super();
        this.defaultLocale = 'en';
        const { current, locales, t, } = preset[Lang.property];
        this.current = current;
        this.locales = locales;
        this.translator = t || this.defaultTranslator;
    }
    currentLocale(key) {
        const translation = this.locales[this.current];
        const defaultLocale = this.locales[this.defaultLocale];
        return getTranslation(translation, key, false, defaultLocale);
    }
    t(key, ...params) {
        if (!key.startsWith(LANG_PREFIX))
            return this.replace(key, params);
        return this.translator(key, ...params);
    }
    defaultTranslator(key, ...params) {
        return this.replace(this.currentLocale(key), params);
    }
    replace(str, params) {
        return str.replace(/\{(\d+)\}/g, (match, index) => {
            /* istanbul ignore next */
            return String(params[+index]);
        });
    }
}
Lang.property = 'lang';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvbGFuZy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhO0FBQ2IsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUVwQyxZQUFZO0FBQ1osT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQVM5RCxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUE7QUFDL0IsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLFNBQVMsY0FBYyxDQUNyQixNQUFxQixFQUNyQixHQUFXLEVBQ1gsWUFBWSxHQUFHLEtBQUssRUFDcEIsYUFBNEI7SUFFNUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDN0MsSUFBSSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQTZCLENBQUE7SUFFOUYsSUFBSSxXQUFXLEtBQUssUUFBUSxFQUFFO1FBQzVCLElBQUksWUFBWSxFQUFFO1lBQ2hCLFlBQVksQ0FBQyxvQkFBb0IsUUFBUSx5QkFBeUIsQ0FBQyxDQUFBO1lBQ25FLFdBQVcsR0FBRyxHQUFHLENBQUE7U0FDbEI7YUFBTTtZQUNMLFdBQVcsQ0FBQyxvQkFBb0IsUUFBUSxzQ0FBc0MsQ0FBQyxDQUFBO1lBQy9FLFdBQVcsR0FBRyxjQUFjLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUE7U0FDdEU7S0FDRjtJQUVELE9BQU8sV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFFRCxNQUFNLE9BQU8sSUFBSyxTQUFRLE9BQU87SUFXL0IsWUFBYSxNQUFxQjtRQUNoQyxLQUFLLEVBQUUsQ0FBQTtRQVBGLGtCQUFhLEdBQUcsSUFBSSxDQUFBO1FBU3pCLE1BQU0sRUFDSixPQUFPLEVBQ1AsT0FBTyxFQUNQLENBQUMsR0FDRixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFBO0lBQy9DLENBQUM7SUFFTSxhQUFhLENBQUUsR0FBVztRQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM5QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUV0RCxPQUFPLGNBQWMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRU0sQ0FBQyxDQUFFLEdBQVcsRUFBRSxHQUFHLE1BQWE7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUVsRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVPLGlCQUFpQixDQUFFLEdBQVcsRUFBRSxHQUFHLE1BQWE7UUFDdEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDdEQsQ0FBQztJQUVPLE9BQU8sQ0FBRSxHQUFXLEVBQUUsTUFBYTtRQUN6QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBYSxFQUFFLEtBQWEsRUFBRSxFQUFFO1lBQ2hFLDBCQUEwQjtZQUMxQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQy9CLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQzs7QUE5Q00sYUFBUSxHQUFXLE1BQU0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEV4dGVuc2lvbnNcbmltcG9ydCB7IFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlJ1xuXG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdldE9iamVjdFZhbHVlQnlQYXRoIH0gZnJvbSAnLi4vLi4vdXRpbC9oZWxwZXJzJ1xuaW1wb3J0IHsgY29uc29sZUVycm9yLCBjb25zb2xlV2FybiB9IGZyb20gJy4uLy4uL3V0aWwvY29uc29sZSdcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZ1ZXRpZnlQcmVzZXQgfSBmcm9tICd2dWV0aWZ5L3R5cGVzL3NlcnZpY2VzL3ByZXNldHMnXG5pbXBvcnQge1xuICBWdWV0aWZ5TG9jYWxlLFxuICBMYW5nIGFzIElMYW5nLFxufSBmcm9tICd2dWV0aWZ5L3R5cGVzL3NlcnZpY2VzL2xhbmcnXG5cbmNvbnN0IExBTkdfUFJFRklYID0gJyR2dWV0aWZ5LidcbmNvbnN0IGZhbGxiYWNrID0gU3ltYm9sKCdMYW5nIGZhbGxiYWNrJylcblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24gKFxuICBsb2NhbGU6IFZ1ZXRpZnlMb2NhbGUsXG4gIGtleTogc3RyaW5nLFxuICB1c2luZ0RlZmF1bHQgPSBmYWxzZSxcbiAgZGVmYXVsdExvY2FsZTogVnVldGlmeUxvY2FsZVxuKTogc3RyaW5nIHtcbiAgY29uc3Qgc2hvcnRLZXkgPSBrZXkucmVwbGFjZShMQU5HX1BSRUZJWCwgJycpXG4gIGxldCB0cmFuc2xhdGlvbiA9IGdldE9iamVjdFZhbHVlQnlQYXRoKGxvY2FsZSwgc2hvcnRLZXksIGZhbGxiYWNrKSBhcyBzdHJpbmcgfCB0eXBlb2YgZmFsbGJhY2tcblxuICBpZiAodHJhbnNsYXRpb24gPT09IGZhbGxiYWNrKSB7XG4gICAgaWYgKHVzaW5nRGVmYXVsdCkge1xuICAgICAgY29uc29sZUVycm9yKGBUcmFuc2xhdGlvbiBrZXkgXCIke3Nob3J0S2V5fVwiIG5vdCBmb3VuZCBpbiBmYWxsYmFja2ApXG4gICAgICB0cmFuc2xhdGlvbiA9IGtleVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlV2FybihgVHJhbnNsYXRpb24ga2V5IFwiJHtzaG9ydEtleX1cIiBub3QgZm91bmQsIGZhbGxpbmcgYmFjayB0byBkZWZhdWx0YClcbiAgICAgIHRyYW5zbGF0aW9uID0gZ2V0VHJhbnNsYXRpb24oZGVmYXVsdExvY2FsZSwga2V5LCB0cnVlLCBkZWZhdWx0TG9jYWxlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cmFuc2xhdGlvblxufVxuXG5leHBvcnQgY2xhc3MgTGFuZyBleHRlbmRzIFNlcnZpY2UgaW1wbGVtZW50cyBJTGFuZyB7XG4gIHN0YXRpYyBwcm9wZXJ0eTogJ2xhbmcnID0gJ2xhbmcnXG5cbiAgcHVibGljIGN1cnJlbnQ6IElMYW5nWydjdXJyZW50J11cblxuICBwdWJsaWMgZGVmYXVsdExvY2FsZSA9ICdlbidcblxuICBwdWJsaWMgbG9jYWxlczogSUxhbmdbJ2xvY2FsZXMnXVxuXG4gIHByaXZhdGUgdHJhbnNsYXRvcjogSUxhbmdbJ3QnXVxuXG4gIGNvbnN0cnVjdG9yIChwcmVzZXQ6IFZ1ZXRpZnlQcmVzZXQpIHtcbiAgICBzdXBlcigpXG5cbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50LFxuICAgICAgbG9jYWxlcyxcbiAgICAgIHQsXG4gICAgfSA9IHByZXNldFtMYW5nLnByb3BlcnR5XVxuXG4gICAgdGhpcy5jdXJyZW50ID0gY3VycmVudFxuICAgIHRoaXMubG9jYWxlcyA9IGxvY2FsZXNcbiAgICB0aGlzLnRyYW5zbGF0b3IgPSB0IHx8IHRoaXMuZGVmYXVsdFRyYW5zbGF0b3JcbiAgfVxuXG4gIHB1YmxpYyBjdXJyZW50TG9jYWxlIChrZXk6IHN0cmluZykge1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5sb2NhbGVzW3RoaXMuY3VycmVudF1cbiAgICBjb25zdCBkZWZhdWx0TG9jYWxlID0gdGhpcy5sb2NhbGVzW3RoaXMuZGVmYXVsdExvY2FsZV1cblxuICAgIHJldHVybiBnZXRUcmFuc2xhdGlvbih0cmFuc2xhdGlvbiwga2V5LCBmYWxzZSwgZGVmYXVsdExvY2FsZSlcbiAgfVxuXG4gIHB1YmxpYyB0IChrZXk6IHN0cmluZywgLi4ucGFyYW1zOiBhbnlbXSkge1xuICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoTEFOR19QUkVGSVgpKSByZXR1cm4gdGhpcy5yZXBsYWNlKGtleSwgcGFyYW1zKVxuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvcihrZXksIC4uLnBhcmFtcylcbiAgfVxuXG4gIHByaXZhdGUgZGVmYXVsdFRyYW5zbGF0b3IgKGtleTogc3RyaW5nLCAuLi5wYXJhbXM6IGFueVtdKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZSh0aGlzLmN1cnJlbnRMb2NhbGUoa2V5KSwgcGFyYW1zKVxuICB9XG5cbiAgcHJpdmF0ZSByZXBsYWNlIChzdHI6IHN0cmluZywgcGFyYW1zOiBhbnlbXSkge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIChtYXRjaDogc3RyaW5nLCBpbmRleDogc3RyaW5nKSA9PiB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbXNbK2luZGV4XSlcbiAgICB9KVxuICB9XG59XG4iXX0=