import Vue from 'vue';
export default Vue.extend({
    name: 'translatable',
    props: {
        height: Number,
    },
    data: () => ({
        elOffsetTop: 0,
        parallax: 0,
        parallaxDist: 0,
        percentScrolled: 0,
        scrollTop: 0,
        windowHeight: 0,
        windowBottom: 0,
    }),
    computed: {
        imgHeight() {
            return this.objHeight();
        },
    },
    beforeDestroy() {
        window.removeEventListener('scroll', this.translate, false);
        window.removeEventListener('resize', this.translate, false);
    },
    methods: {
        calcDimensions() {
            const offset = this.$el.getBoundingClientRect();
            this.scrollTop = window.pageYOffset;
            this.parallaxDist = this.imgHeight - this.height;
            this.elOffsetTop = offset.top + this.scrollTop;
            this.windowHeight = window.innerHeight;
            this.windowBottom = this.scrollTop + this.windowHeight;
        },
        listeners() {
            window.addEventListener('scroll', this.translate, false);
            window.addEventListener('resize', this.translate, false);
        },
        /** @abstract **/
        objHeight() {
            throw new Error('Not implemented !');
        },
        translate() {
            this.calcDimensions();
            this.percentScrolled = ((this.windowBottom - this.elOffsetTop) /
                (parseInt(this.height) + this.windowHeight));
            this.parallax = Math.round(this.parallaxDist * this.percentScrolled);
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWl4aW5zL3RyYW5zbGF0YWJsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUE7QUFFckIsZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3hCLElBQUksRUFBRSxjQUFjO0lBRXBCLEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRSxNQUFNO0tBQ2Y7SUFFRCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNYLFdBQVcsRUFBRSxDQUFDO1FBQ2QsUUFBUSxFQUFFLENBQUM7UUFDWCxZQUFZLEVBQUUsQ0FBQztRQUNmLGVBQWUsRUFBRSxDQUFDO1FBQ2xCLFNBQVMsRUFBRSxDQUFDO1FBQ1osWUFBWSxFQUFFLENBQUM7UUFDZixZQUFZLEVBQUUsQ0FBQztLQUNoQixDQUFDO0lBRUYsUUFBUSxFQUFFO1FBQ1IsU0FBUztZQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ3pCLENBQUM7S0FDRjtJQUVELGFBQWE7UUFDWCxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDM0QsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQzdELENBQUM7SUFFRCxPQUFPLEVBQUU7UUFDUCxjQUFjO1lBQ1osTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFBO1lBRS9DLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQTtZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtZQUNoRCxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQTtZQUM5QyxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUE7WUFDdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUE7UUFDeEQsQ0FBQztRQUNELFNBQVM7WUFDUCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDeEQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzFELENBQUM7UUFDRCxpQkFBaUI7UUFDakIsU0FBUztZQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUN0QyxDQUFDO1FBQ0QsU0FBUztZQUNQLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtZQUVyQixJQUFJLENBQUMsZUFBZSxHQUFHLENBQ3JCLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUN0QyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUM1QyxDQUFBO1lBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQ3RFLENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuXG5leHBvcnQgZGVmYXVsdCBWdWUuZXh0ZW5kKHtcbiAgbmFtZTogJ3RyYW5zbGF0YWJsZScsXG5cbiAgcHJvcHM6IHtcbiAgICBoZWlnaHQ6IE51bWJlcixcbiAgfSxcblxuICBkYXRhOiAoKSA9PiAoe1xuICAgIGVsT2Zmc2V0VG9wOiAwLFxuICAgIHBhcmFsbGF4OiAwLFxuICAgIHBhcmFsbGF4RGlzdDogMCxcbiAgICBwZXJjZW50U2Nyb2xsZWQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwLFxuICAgIHdpbmRvd0hlaWdodDogMCxcbiAgICB3aW5kb3dCb3R0b206IDAsXG4gIH0pLFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgaW1nSGVpZ2h0ICgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMub2JqSGVpZ2h0KClcbiAgICB9LFxuICB9LFxuXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnRyYW5zbGF0ZSwgZmFsc2UpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudHJhbnNsYXRlLCBmYWxzZSlcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgY2FsY0RpbWVuc2lvbnMgKCkge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgICAgdGhpcy5zY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgIHRoaXMucGFyYWxsYXhEaXN0ID0gdGhpcy5pbWdIZWlnaHQgLSB0aGlzLmhlaWdodFxuICAgICAgdGhpcy5lbE9mZnNldFRvcCA9IG9mZnNldC50b3AgKyB0aGlzLnNjcm9sbFRvcFxuICAgICAgdGhpcy53aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgIHRoaXMud2luZG93Qm90dG9tID0gdGhpcy5zY3JvbGxUb3AgKyB0aGlzLndpbmRvd0hlaWdodFxuICAgIH0sXG4gICAgbGlzdGVuZXJzICgpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnRyYW5zbGF0ZSwgZmFsc2UpXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy50cmFuc2xhdGUsIGZhbHNlKVxuICAgIH0sXG4gICAgLyoqIEBhYnN0cmFjdCAqKi9cbiAgICBvYmpIZWlnaHQgKCk6IG51bWJlciB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCAhJylcbiAgICB9LFxuICAgIHRyYW5zbGF0ZSAoKSB7XG4gICAgICB0aGlzLmNhbGNEaW1lbnNpb25zKClcblxuICAgICAgdGhpcy5wZXJjZW50U2Nyb2xsZWQgPSAoXG4gICAgICAgICh0aGlzLndpbmRvd0JvdHRvbSAtIHRoaXMuZWxPZmZzZXRUb3ApIC9cbiAgICAgICAgKHBhcnNlSW50KHRoaXMuaGVpZ2h0KSArIHRoaXMud2luZG93SGVpZ2h0KVxuICAgICAgKVxuXG4gICAgICB0aGlzLnBhcmFsbGF4ID0gTWF0aC5yb3VuZCh0aGlzLnBhcmFsbGF4RGlzdCAqIHRoaXMucGVyY2VudFNjcm9sbGVkKVxuICAgIH0sXG4gIH0sXG59KVxuIl19