import mixins from '../../util/mixins';
function searchChildren(children) {
    const results = [];
    for (let index = 0; index < children.length; index++) {
        const child = children[index];
        if (child.isActive && child.isDependent) {
            results.push(child);
        }
        else {
            results.push(...searchChildren(child.$children));
        }
    }
    return results;
}
/* @vue/component */
export default mixins().extend({
    name: 'dependent',
    data() {
        return {
            closeDependents: true,
            isActive: false,
            isDependent: true,
        };
    },
    watch: {
        isActive(val) {
            if (val)
                return;
            const openDependents = this.getOpenDependents();
            for (let index = 0; index < openDependents.length; index++) {
                openDependents[index].isActive = false;
            }
        },
    },
    methods: {
        getOpenDependents() {
            if (this.closeDependents)
                return searchChildren(this.$children);
            return [];
        },
        getOpenDependentElements() {
            const result = [];
            const openDependents = this.getOpenDependents();
            for (let index = 0; index < openDependents.length; index++) {
                result.push(...openDependents[index].getClickableDependentElements());
            }
            return result;
        },
        getClickableDependentElements() {
            const result = [this.$el];
            if (this.$refs.content)
                result.push(this.$refs.content);
            if (this.overlay)
                result.push(this.overlay.$el);
            result.push(...this.getOpenDependentElements());
            return result;
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWl4aW5zL2RlcGVuZGVudC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQTtBQWdCdEMsU0FBUyxjQUFjLENBQUUsUUFBZTtJQUN0QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUE7SUFDbEIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDcEQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBc0IsQ0FBQTtRQUNsRCxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ3BCO2FBQU07WUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO1NBQ2pEO0tBQ0Y7SUFFRCxPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDO0FBRUQsb0JBQW9CO0FBQ3BCLGVBQWUsTUFBTSxFQUFXLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQUksRUFBRSxXQUFXO0lBRWpCLElBQUk7UUFDRixPQUFPO1lBQ0wsZUFBZSxFQUFFLElBQUk7WUFDckIsUUFBUSxFQUFFLEtBQUs7WUFDZixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFBO0lBQ0gsQ0FBQztJQUVELEtBQUssRUFBRTtRQUNMLFFBQVEsQ0FBRSxHQUFHO1lBQ1gsSUFBSSxHQUFHO2dCQUFFLE9BQU07WUFFZixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtZQUMvQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDMUQsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7YUFDdkM7UUFDSCxDQUFDO0tBQ0Y7SUFFRCxPQUFPLEVBQUU7UUFDUCxpQkFBaUI7WUFDZixJQUFJLElBQUksQ0FBQyxlQUFlO2dCQUFFLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUUvRCxPQUFPLEVBQUUsQ0FBQTtRQUNYLENBQUM7UUFDRCx3QkFBd0I7WUFDdEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBO1lBQ2pCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO1lBRS9DLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLDZCQUE2QixFQUFFLENBQUMsQ0FBQTthQUN0RTtZQUVELE9BQU8sTUFBTSxDQUFBO1FBQ2YsQ0FBQztRQUNELDZCQUE2QjtZQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUN6QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztnQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDdkQsSUFBSSxJQUFJLENBQUMsT0FBTztnQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBa0IsQ0FBQyxDQUFBO1lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFBO1lBRS9DLE9BQU8sTUFBTSxDQUFBO1FBQ2YsQ0FBQztLQUNGO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5cbmltcG9ydCBtaXhpbnMgZnJvbSAnLi4vLi4vdXRpbC9taXhpbnMnXG5pbXBvcnQgeyBWT3ZlcmxheSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVk92ZXJsYXknXG5cbmludGVyZmFjZSBvcHRpb25zIGV4dGVuZHMgVnVlIHtcbiAgJGVsOiBIVE1MRWxlbWVudFxuICAkcmVmczoge1xuICAgIGNvbnRlbnQ6IEhUTUxFbGVtZW50XG4gIH1cbiAgb3ZlcmxheT86IEluc3RhbmNlVHlwZTx0eXBlb2YgVk92ZXJsYXk+XG59XG5cbmludGVyZmFjZSBEZXBlbmRlbnRJbnN0YW5jZSBleHRlbmRzIFZ1ZSB7XG4gIGlzQWN0aXZlPzogYm9vbGVhblxuICBpc0RlcGVuZGVudD86IGJvb2xlYW5cbn1cblxuZnVuY3Rpb24gc2VhcmNoQ2hpbGRyZW4gKGNoaWxkcmVuOiBWdWVbXSk6IERlcGVuZGVudEluc3RhbmNlW10ge1xuICBjb25zdCByZXN1bHRzID0gW11cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNoaWxkcmVuLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baW5kZXhdIGFzIERlcGVuZGVudEluc3RhbmNlXG4gICAgaWYgKGNoaWxkLmlzQWN0aXZlICYmIGNoaWxkLmlzRGVwZW5kZW50KSB7XG4gICAgICByZXN1bHRzLnB1c2goY2hpbGQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdHMucHVzaCguLi5zZWFyY2hDaGlsZHJlbihjaGlsZC4kY2hpbGRyZW4pKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzXG59XG5cbi8qIEB2dWUvY29tcG9uZW50ICovXG5leHBvcnQgZGVmYXVsdCBtaXhpbnM8b3B0aW9ucz4oKS5leHRlbmQoe1xuICBuYW1lOiAnZGVwZW5kZW50JyxcblxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xvc2VEZXBlbmRlbnRzOiB0cnVlLFxuICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgaXNEZXBlbmRlbnQ6IHRydWUsXG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgaXNBY3RpdmUgKHZhbCkge1xuICAgICAgaWYgKHZhbCkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IG9wZW5EZXBlbmRlbnRzID0gdGhpcy5nZXRPcGVuRGVwZW5kZW50cygpXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb3BlbkRlcGVuZGVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIG9wZW5EZXBlbmRlbnRzW2luZGV4XS5pc0FjdGl2ZSA9IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgZ2V0T3BlbkRlcGVuZGVudHMgKCk6IGFueVtdIHtcbiAgICAgIGlmICh0aGlzLmNsb3NlRGVwZW5kZW50cykgcmV0dXJuIHNlYXJjaENoaWxkcmVuKHRoaXMuJGNoaWxkcmVuKVxuXG4gICAgICByZXR1cm4gW11cbiAgICB9LFxuICAgIGdldE9wZW5EZXBlbmRlbnRFbGVtZW50cyAoKTogSFRNTEVsZW1lbnRbXSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgICAgY29uc3Qgb3BlbkRlcGVuZGVudHMgPSB0aGlzLmdldE9wZW5EZXBlbmRlbnRzKClcblxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG9wZW5EZXBlbmRlbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQucHVzaCguLi5vcGVuRGVwZW5kZW50c1tpbmRleF0uZ2V0Q2xpY2thYmxlRGVwZW5kZW50RWxlbWVudHMoKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0sXG4gICAgZ2V0Q2xpY2thYmxlRGVwZW5kZW50RWxlbWVudHMgKCk6IEhUTUxFbGVtZW50W10ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gW3RoaXMuJGVsXVxuICAgICAgaWYgKHRoaXMuJHJlZnMuY29udGVudCkgcmVzdWx0LnB1c2godGhpcy4kcmVmcy5jb250ZW50KVxuICAgICAgaWYgKHRoaXMub3ZlcmxheSkgcmVzdWx0LnB1c2godGhpcy5vdmVybGF5LiRlbCBhcyBIVE1MRWxlbWVudClcbiAgICAgIHJlc3VsdC5wdXNoKC4uLnRoaXMuZ2V0T3BlbkRlcGVuZGVudEVsZW1lbnRzKCkpXG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9LFxuICB9LFxufSlcbiJdfQ==