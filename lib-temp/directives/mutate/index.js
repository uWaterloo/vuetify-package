function inserted(el, binding, vnode) {
    const modifiers = binding.modifiers || {};
    const value = binding.value;
    const callback = typeof value === 'object' ? value.handler : value;
    const { once, ...modifierKeys } = modifiers;
    const hasModifiers = Object.keys(modifierKeys).length > 0;
    // Options take top priority
    const options = typeof value === 'object' && value.options
        ? value.options
        : hasModifiers
            // If we have modifiers, use only those provided
            ? {
                attributes: modifierKeys.attr,
                childList: modifierKeys.child,
                subtree: modifierKeys.sub,
                characterData: modifierKeys.char,
            }
            // Defaults to everything on
            : {
                attributes: true,
                childList: true,
                subtree: true,
                characterData: true,
            };
    const observer = new MutationObserver((mutationsList, observer) => {
        /* istanbul ignore if */
        if (!el._mutate)
            return; // Just in case, should never fire
        callback(mutationsList, observer);
        // If has the once modifier, unbind
        once && unbind(el, binding, vnode);
    });
    observer.observe(el, options);
    el._mutate = Object(el._mutate);
    el._mutate[vnode.context._uid] = { observer };
}
function unbind(el, binding, vnode) {
    if (!el._mutate?.[vnode.context._uid])
        return;
    el._mutate[vnode.context._uid].observer.disconnect();
    delete el._mutate[vnode.context._uid];
}
export const Mutate = {
    inserted,
    unbind,
};
export default Mutate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9tdXRhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JBLFNBQVMsUUFBUSxDQUFFLEVBQWUsRUFBRSxPQUE2QixFQUFFLEtBQVk7SUFDN0UsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUE7SUFDekMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQTtJQUMzQixNQUFNLFFBQVEsR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQU0sQ0FBQTtJQUNuRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsWUFBWSxFQUFFLEdBQUcsU0FBUyxDQUFBO0lBQzNDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUV6RCw0QkFBNEI7SUFDNUIsTUFBTSxPQUFPLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPO1FBQ3hELENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTztRQUNmLENBQUMsQ0FBQyxZQUFZO1lBQ1osZ0RBQWdEO1lBQ2hELENBQUMsQ0FBQztnQkFDQSxVQUFVLEVBQUUsWUFBWSxDQUFDLElBQUk7Z0JBQzdCLFNBQVMsRUFBRSxZQUFZLENBQUMsS0FBSztnQkFDN0IsT0FBTyxFQUFFLFlBQVksQ0FBQyxHQUFHO2dCQUN6QixhQUFhLEVBQUUsWUFBWSxDQUFDLElBQUk7YUFDakM7WUFDRCw0QkFBNEI7WUFDNUIsQ0FBQyxDQUFDO2dCQUNBLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixTQUFTLEVBQUUsSUFBSTtnQkFDZixPQUFPLEVBQUUsSUFBSTtnQkFDYixhQUFhLEVBQUUsSUFBSTthQUNwQixDQUFBO0lBRUwsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxDQUNwQyxhQUErQixFQUMvQixRQUEwQixFQUMxQixFQUFFO1FBQ0Ysd0JBQXdCO1FBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTztZQUFFLE9BQU0sQ0FBQyxrQ0FBa0M7UUFFMUQsUUFBUSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUVqQyxtQ0FBbUM7UUFDbkMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3BDLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDN0IsRUFBRSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLEVBQUUsQ0FBQyxPQUFRLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFBO0FBQ2pELENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBRSxFQUFlLEVBQUUsT0FBNkIsRUFBRSxLQUFZO0lBQzNFLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFNO0lBRTlDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQyxJQUFJLENBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDdEQsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDeEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNwQixRQUFRO0lBQ1IsTUFBTTtDQUNQLENBQUE7QUFFRCxlQUFlLE1BQU0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZOb2RlLCBWTm9kZURpcmVjdGl2ZSB9IGZyb20gJ3Z1ZSdcblxudHlwZSBNdXRhdGVIYW5kbGVyID0gKFxuICBtdXRhdGlvbnNMaXN0OiBNdXRhdGlvblJlY29yZFtdLFxuICBvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcixcbikgPT4gdm9pZFxuXG5pbnRlcmZhY2UgTXV0YXRlVk5vZGVEaXJlY3RpdmUgZXh0ZW5kcyBPbWl0PFZOb2RlRGlyZWN0aXZlLCAnbW9kaWZpZXJzJz4ge1xuICB2YWx1ZT86IE11dGF0ZUhhbmRsZXIgfCB7IGhhbmRsZXI6IE11dGF0ZUhhbmRsZXIsIG9wdGlvbnM/OiBNdXRhdGlvbk9ic2VydmVySW5pdCB9XG4gIG1vZGlmaWVycz86IHtcbiAgICBvbmNlPzogYm9vbGVhblxuICAgIGF0dHI/OiBib29sZWFuXG4gICAgY2hpbGQ/OiBib29sZWFuXG4gICAgc3ViPzogYm9vbGVhblxuICAgIGNoYXI/OiBib29sZWFuXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsOiBIVE1MRWxlbWVudCwgYmluZGluZzogTXV0YXRlVk5vZGVEaXJlY3RpdmUsIHZub2RlOiBWTm9kZSkge1xuICBjb25zdCBtb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycyB8fCB7fVxuICBjb25zdCB2YWx1ZSA9IGJpbmRpbmcudmFsdWVcbiAgY29uc3QgY2FsbGJhY2sgPSB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUuaGFuZGxlciA6IHZhbHVlIVxuICBjb25zdCB7IG9uY2UsIC4uLm1vZGlmaWVyS2V5cyB9ID0gbW9kaWZpZXJzXG4gIGNvbnN0IGhhc01vZGlmaWVycyA9IE9iamVjdC5rZXlzKG1vZGlmaWVyS2V5cykubGVuZ3RoID4gMFxuXG4gIC8vIE9wdGlvbnMgdGFrZSB0b3AgcHJpb3JpdHlcbiAgY29uc3Qgb3B0aW9ucyA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUub3B0aW9uc1xuICAgID8gdmFsdWUub3B0aW9uc1xuICAgIDogaGFzTW9kaWZpZXJzXG4gICAgICAvLyBJZiB3ZSBoYXZlIG1vZGlmaWVycywgdXNlIG9ubHkgdGhvc2UgcHJvdmlkZWRcbiAgICAgID8ge1xuICAgICAgICBhdHRyaWJ1dGVzOiBtb2RpZmllcktleXMuYXR0cixcbiAgICAgICAgY2hpbGRMaXN0OiBtb2RpZmllcktleXMuY2hpbGQsXG4gICAgICAgIHN1YnRyZWU6IG1vZGlmaWVyS2V5cy5zdWIsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6IG1vZGlmaWVyS2V5cy5jaGFyLFxuICAgICAgfVxuICAgICAgLy8gRGVmYXVsdHMgdG8gZXZlcnl0aGluZyBvblxuICAgICAgOiB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICAgIH1cblxuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChcbiAgICBtdXRhdGlvbnNMaXN0OiBNdXRhdGlvblJlY29yZFtdLFxuICAgIG9ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyXG4gICkgPT4ge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghZWwuX211dGF0ZSkgcmV0dXJuIC8vIEp1c3QgaW4gY2FzZSwgc2hvdWxkIG5ldmVyIGZpcmVcblxuICAgIGNhbGxiYWNrKG11dGF0aW9uc0xpc3QsIG9ic2VydmVyKVxuXG4gICAgLy8gSWYgaGFzIHRoZSBvbmNlIG1vZGlmaWVyLCB1bmJpbmRcbiAgICBvbmNlICYmIHVuYmluZChlbCwgYmluZGluZywgdm5vZGUpXG4gIH0pXG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZShlbCwgb3B0aW9ucylcbiAgZWwuX211dGF0ZSA9IE9iamVjdChlbC5fbXV0YXRlKVxuICBlbC5fbXV0YXRlIVt2bm9kZS5jb250ZXh0IS5fdWlkXSA9IHsgb2JzZXJ2ZXIgfVxufVxuXG5mdW5jdGlvbiB1bmJpbmQgKGVsOiBIVE1MRWxlbWVudCwgYmluZGluZzogTXV0YXRlVk5vZGVEaXJlY3RpdmUsIHZub2RlOiBWTm9kZSkge1xuICBpZiAoIWVsLl9tdXRhdGU/Llt2bm9kZS5jb250ZXh0IS5fdWlkXSkgcmV0dXJuXG5cbiAgZWwuX211dGF0ZVt2bm9kZS5jb250ZXh0IS5fdWlkXSEub2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG4gIGRlbGV0ZSBlbC5fbXV0YXRlW3Zub2RlLmNvbnRleHQhLl91aWRdXG59XG5cbmV4cG9ydCBjb25zdCBNdXRhdGUgPSB7XG4gIGluc2VydGVkLFxuICB1bmJpbmQsXG59XG5cbmV4cG9ydCBkZWZhdWx0IE11dGF0ZVxuIl19