// Utilities
import { classToHex, isCssColor, parseGradient, } from '../../util/colorUtils';
import colors from '../../util/colors';
function setTextColor(el, color, currentTheme) {
    const cssColor = !isCssColor(color) ? classToHex(color, colors, currentTheme) : color;
    el.style.color = cssColor;
    el.style.caretColor = cssColor;
}
function setBackgroundColor(el, color, currentTheme) {
    const cssColor = !isCssColor(color) ? classToHex(color, colors, currentTheme) : color;
    el.style.backgroundColor = cssColor;
    el.style.borderColor = cssColor;
}
function setBorderColor(el, color, currentTheme, modifiers) {
    const cssColor = !isCssColor(color) ? classToHex(color, colors, currentTheme) : color;
    if (!modifiers || !Object.keys(modifiers).length) {
        el.style.borderColor = cssColor;
        return;
    }
    if (modifiers.top)
        el.style.borderTopColor = cssColor;
    if (modifiers.right)
        el.style.borderRightColor = cssColor;
    if (modifiers.bottom)
        el.style.borderBottomColor = cssColor;
    if (modifiers.left)
        el.style.borderLeftColor = cssColor;
}
function setGradientColor(el, gradient, currentTheme) {
    el.style.backgroundImage = `linear-gradient(${parseGradient(gradient, colors, currentTheme)})`;
}
function updateColor(el, binding, node) {
    const currentTheme = node.context.$vuetify.theme.currentTheme;
    if (binding.arg === undefined) {
        setBackgroundColor(el, binding.value, currentTheme);
    }
    else if (binding.arg === 'text') {
        setTextColor(el, binding.value, currentTheme);
    }
    else if (binding.arg === 'border') {
        setBorderColor(el, binding.value, currentTheme, binding.modifiers);
    }
    else if (binding.arg === 'gradient') {
        setGradientColor(el, binding.value, currentTheme);
    }
}
function update(el, binding, node) {
    if (binding.value === binding.oldValue)
        return;
    updateColor(el, binding, node);
}
export const Color = {
    bind: updateColor,
    update,
};
export default Color;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9jb2xvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZO0FBQ1osT0FBTyxFQUNMLFVBQVUsRUFDVixVQUFVLEVBQ1YsYUFBYSxHQUNkLE1BQU0sdUJBQXVCLENBQUE7QUFDOUIsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUE7QUFhdEMsU0FBUyxZQUFZLENBQ25CLEVBQWUsRUFDZixLQUFhLEVBQ2IsWUFBMEM7SUFFMUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7SUFFckYsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFBO0lBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQTtBQUNoQyxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FDekIsRUFBZSxFQUNmLEtBQWEsRUFDYixZQUEwQztJQUUxQyxNQUFNLFFBQVEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUVyRixFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUE7SUFDbkMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFBO0FBQ2pDLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FDckIsRUFBZSxFQUNmLEtBQWEsRUFDYixZQUEwQyxFQUMxQyxTQUEyQjtJQUUzQixNQUFNLFFBQVEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUVyRixJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDaEQsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFBO1FBQy9CLE9BQU07S0FDUDtJQUVELElBQUksU0FBUyxDQUFDLEdBQUc7UUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUE7SUFDckQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFBO0lBQ3pELElBQUksU0FBUyxDQUFDLE1BQU07UUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLFFBQVEsQ0FBQTtJQUMzRCxJQUFJLFNBQVMsQ0FBQyxJQUFJO1FBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFBO0FBQ3pELENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUN2QixFQUFlLEVBQ2YsUUFBZ0IsRUFDaEIsWUFBMEM7SUFFMUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsbUJBQ3pCLGFBQWEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FDOUMsR0FBRyxDQUFBO0FBQ0wsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUNsQixFQUFlLEVBQ2YsT0FBdUIsRUFDdkIsSUFBVztJQUVYLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUE7SUFFOUQsSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUM3QixrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQTtLQUNwRDtTQUFNLElBQUksT0FBTyxDQUFDLEdBQUcsS0FBSyxNQUFNLEVBQUU7UUFDakMsWUFBWSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFBO0tBQzlDO1NBQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtRQUNuQyxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtLQUNuRTtTQUFNLElBQUksT0FBTyxDQUFDLEdBQUcsS0FBSyxVQUFVLEVBQUU7UUFDckMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUE7S0FDbEQ7QUFDSCxDQUFDO0FBRUQsU0FBUyxNQUFNLENBQ2IsRUFBZSxFQUNmLE9BQXVCLEVBQ3ZCLElBQVc7SUFFWCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLFFBQVE7UUFBRSxPQUFNO0lBRTlDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ2hDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUc7SUFDbkIsSUFBSSxFQUFFLFdBQVc7SUFDakIsTUFBTTtDQUNQLENBQUE7QUFFRCxlQUFlLEtBQUssQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFV0aWxpdGllc1xuaW1wb3J0IHtcbiAgY2xhc3NUb0hleCxcbiAgaXNDc3NDb2xvcixcbiAgcGFyc2VHcmFkaWVudCxcbn0gZnJvbSAnLi4vLi4vdXRpbC9jb2xvclV0aWxzJ1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuLi8uLi91dGlsL2NvbG9ycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZ1ZXRpZnlUaGVtZVZhcmlhbnQgfSBmcm9tICd0eXBlcy9zZXJ2aWNlcy90aGVtZSdcbmltcG9ydCB7IFZOb2RlLCBWTm9kZURpcmVjdGl2ZSB9IGZyb20gJ3Z1ZSdcblxuaW50ZXJmYWNlIEJvcmRlck1vZGlmaWVycyB7XG4gIHRvcD86IEJvb2xlYW5cbiAgcmlnaHQ/OiBCb29sZWFuXG4gIGJvdHRvbT86IEJvb2xlYW5cbiAgbGVmdD86IEJvb2xlYW5cbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbG9yIChcbiAgZWw6IEhUTUxFbGVtZW50LFxuICBjb2xvcjogc3RyaW5nLFxuICBjdXJyZW50VGhlbWU6IFBhcnRpYWw8VnVldGlmeVRoZW1lVmFyaWFudD4sXG4pIHtcbiAgY29uc3QgY3NzQ29sb3IgPSAhaXNDc3NDb2xvcihjb2xvcikgPyBjbGFzc1RvSGV4KGNvbG9yLCBjb2xvcnMsIGN1cnJlbnRUaGVtZSkgOiBjb2xvclxuXG4gIGVsLnN0eWxlLmNvbG9yID0gY3NzQ29sb3JcbiAgZWwuc3R5bGUuY2FyZXRDb2xvciA9IGNzc0NvbG9yXG59XG5cbmZ1bmN0aW9uIHNldEJhY2tncm91bmRDb2xvciAoXG4gIGVsOiBIVE1MRWxlbWVudCxcbiAgY29sb3I6IHN0cmluZyxcbiAgY3VycmVudFRoZW1lOiBQYXJ0aWFsPFZ1ZXRpZnlUaGVtZVZhcmlhbnQ+LFxuKSB7XG4gIGNvbnN0IGNzc0NvbG9yID0gIWlzQ3NzQ29sb3IoY29sb3IpID8gY2xhc3NUb0hleChjb2xvciwgY29sb3JzLCBjdXJyZW50VGhlbWUpIDogY29sb3JcblxuICBlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjc3NDb2xvclxuICBlbC5zdHlsZS5ib3JkZXJDb2xvciA9IGNzc0NvbG9yXG59XG5cbmZ1bmN0aW9uIHNldEJvcmRlckNvbG9yIChcbiAgZWw6IEhUTUxFbGVtZW50LFxuICBjb2xvcjogc3RyaW5nLFxuICBjdXJyZW50VGhlbWU6IFBhcnRpYWw8VnVldGlmeVRoZW1lVmFyaWFudD4sXG4gIG1vZGlmaWVycz86IEJvcmRlck1vZGlmaWVycyxcbikge1xuICBjb25zdCBjc3NDb2xvciA9ICFpc0Nzc0NvbG9yKGNvbG9yKSA/IGNsYXNzVG9IZXgoY29sb3IsIGNvbG9ycywgY3VycmVudFRoZW1lKSA6IGNvbG9yXG5cbiAgaWYgKCFtb2RpZmllcnMgfHwgIU9iamVjdC5rZXlzKG1vZGlmaWVycykubGVuZ3RoKSB7XG4gICAgZWwuc3R5bGUuYm9yZGVyQ29sb3IgPSBjc3NDb2xvclxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKG1vZGlmaWVycy50b3ApIGVsLnN0eWxlLmJvcmRlclRvcENvbG9yID0gY3NzQ29sb3JcbiAgaWYgKG1vZGlmaWVycy5yaWdodCkgZWwuc3R5bGUuYm9yZGVyUmlnaHRDb2xvciA9IGNzc0NvbG9yXG4gIGlmIChtb2RpZmllcnMuYm90dG9tKSBlbC5zdHlsZS5ib3JkZXJCb3R0b21Db2xvciA9IGNzc0NvbG9yXG4gIGlmIChtb2RpZmllcnMubGVmdCkgZWwuc3R5bGUuYm9yZGVyTGVmdENvbG9yID0gY3NzQ29sb3Jcbn1cblxuZnVuY3Rpb24gc2V0R3JhZGllbnRDb2xvciAoXG4gIGVsOiBIVE1MRWxlbWVudCxcbiAgZ3JhZGllbnQ6IHN0cmluZyxcbiAgY3VycmVudFRoZW1lOiBQYXJ0aWFsPFZ1ZXRpZnlUaGVtZVZhcmlhbnQ+LFxuKSB7XG4gIGVsLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGBsaW5lYXItZ3JhZGllbnQoJHtcbiAgICBwYXJzZUdyYWRpZW50KGdyYWRpZW50LCBjb2xvcnMsIGN1cnJlbnRUaGVtZSlcbiAgfSlgXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbG9yIChcbiAgZWw6IEhUTUxFbGVtZW50LFxuICBiaW5kaW5nOiBWTm9kZURpcmVjdGl2ZSxcbiAgbm9kZTogVk5vZGVcbikge1xuICBjb25zdCBjdXJyZW50VGhlbWUgPSBub2RlLmNvbnRleHQhLiR2dWV0aWZ5LnRoZW1lLmN1cnJlbnRUaGVtZVxuXG4gIGlmIChiaW5kaW5nLmFyZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc2V0QmFja2dyb3VuZENvbG9yKGVsLCBiaW5kaW5nLnZhbHVlLCBjdXJyZW50VGhlbWUpXG4gIH0gZWxzZSBpZiAoYmluZGluZy5hcmcgPT09ICd0ZXh0Jykge1xuICAgIHNldFRleHRDb2xvcihlbCwgYmluZGluZy52YWx1ZSwgY3VycmVudFRoZW1lKVxuICB9IGVsc2UgaWYgKGJpbmRpbmcuYXJnID09PSAnYm9yZGVyJykge1xuICAgIHNldEJvcmRlckNvbG9yKGVsLCBiaW5kaW5nLnZhbHVlLCBjdXJyZW50VGhlbWUsIGJpbmRpbmcubW9kaWZpZXJzKVxuICB9IGVsc2UgaWYgKGJpbmRpbmcuYXJnID09PSAnZ3JhZGllbnQnKSB7XG4gICAgc2V0R3JhZGllbnRDb2xvcihlbCwgYmluZGluZy52YWx1ZSwgY3VycmVudFRoZW1lKVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSAoXG4gIGVsOiBIVE1MRWxlbWVudCxcbiAgYmluZGluZzogVk5vZGVEaXJlY3RpdmUsXG4gIG5vZGU6IFZOb2RlXG4pIHtcbiAgaWYgKGJpbmRpbmcudmFsdWUgPT09IGJpbmRpbmcub2xkVmFsdWUpIHJldHVyblxuXG4gIHVwZGF0ZUNvbG9yKGVsLCBiaW5kaW5nLCBub2RlKVxufVxuXG5leHBvcnQgY29uc3QgQ29sb3IgPSB7XG4gIGJpbmQ6IHVwZGF0ZUNvbG9yLFxuICB1cGRhdGUsXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yXG4iXX0=