function inserted(el, binding, vnode) {
    const { self = false } = binding.modifiers || {};
    const value = binding.value;
    const options = (typeof value === 'object' && value.options) || { passive: true };
    const handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler;
    const target = self
        ? el
        : binding.arg
            ? document.querySelector(binding.arg)
            : window;
    if (!target)
        return;
    target.addEventListener('scroll', handler, options);
    el._onScroll = Object(el._onScroll);
    el._onScroll[vnode.context._uid] = {
        handler,
        options,
        // Don't reference self
        target: self ? undefined : target,
    };
}
function unbind(el, binding, vnode) {
    if (!el._onScroll?.[vnode.context._uid])
        return;
    const { handler, options, target = el } = el._onScroll[vnode.context._uid];
    target.removeEventListener('scroll', handler, options);
    delete el._onScroll[vnode.context._uid];
}
export const Scroll = {
    inserted,
    unbind,
};
export default Scroll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9zY3JvbGwvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYUEsU0FBUyxRQUFRLENBQUUsRUFBZSxFQUFFLE9BQTZCLEVBQUUsS0FBWTtJQUM3RSxNQUFNLEVBQUUsSUFBSSxHQUFHLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFBO0lBQ2hELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUE7SUFDM0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFBO0lBQ2pGLE1BQU0sT0FBTyxHQUFHLE9BQU8sS0FBSyxLQUFLLFVBQVUsSUFBSSxhQUFhLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUE7SUFFN0YsTUFBTSxNQUFNLEdBQUcsSUFBSTtRQUNqQixDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRztZQUNYLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDckMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtJQUVaLElBQUksQ0FBQyxNQUFNO1FBQUUsT0FBTTtJQUVuQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUVuRCxFQUFFLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDbkMsRUFBRSxDQUFDLFNBQVUsQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFDLElBQUksQ0FBQyxHQUFHO1FBQ25DLE9BQU87UUFDUCxPQUFPO1FBQ1AsdUJBQXVCO1FBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTTtLQUNsQyxDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFFLEVBQWUsRUFBRSxPQUE2QixFQUFFLEtBQVk7SUFDM0UsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU07SUFFaEQsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQyxJQUFJLENBQUUsQ0FBQTtJQUU1RSxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN0RCxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMxQyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHO0lBQ3BCLFFBQVE7SUFDUixNQUFNO0NBQ2EsQ0FBQTtBQUVyQixlQUFlLE1BQU0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZOb2RlRGlyZWN0aXZlIH0gZnJvbSAndnVlL3R5cGVzL3Zub2RlJ1xuaW1wb3J0IHsgRGlyZWN0aXZlT3B0aW9ucywgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmludGVyZmFjZSBTY3JvbGxWTm9kZURpcmVjdGl2ZSBleHRlbmRzIE9taXQ8Vk5vZGVEaXJlY3RpdmUsICdtb2RpZmllcnMnPiB7XG4gIHZhbHVlOiBFdmVudExpc3RlbmVyIHwge1xuICAgIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJcbiAgICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zXG4gIH0gfCBFdmVudExpc3RlbmVyT2JqZWN0ICYgeyBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zIH1cbiAgbW9kaWZpZXJzPzoge1xuICAgIHNlbGY/OiBib29sZWFuXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsOiBIVE1MRWxlbWVudCwgYmluZGluZzogU2Nyb2xsVk5vZGVEaXJlY3RpdmUsIHZub2RlOiBWTm9kZSkge1xuICBjb25zdCB7IHNlbGYgPSBmYWxzZSB9ID0gYmluZGluZy5tb2RpZmllcnMgfHwge31cbiAgY29uc3QgdmFsdWUgPSBiaW5kaW5nLnZhbHVlXG4gIGNvbnN0IG9wdGlvbnMgPSAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5vcHRpb25zKSB8fCB7IHBhc3NpdmU6IHRydWUgfVxuICBjb25zdCBoYW5kbGVyID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8ICdoYW5kbGVFdmVudCcgaW4gdmFsdWUgPyB2YWx1ZSA6IHZhbHVlLmhhbmRsZXJcblxuICBjb25zdCB0YXJnZXQgPSBzZWxmXG4gICAgPyBlbFxuICAgIDogYmluZGluZy5hcmdcbiAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihiaW5kaW5nLmFyZylcbiAgICAgIDogd2luZG93XG5cbiAgaWYgKCF0YXJnZXQpIHJldHVyblxuXG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVyLCBvcHRpb25zKVxuXG4gIGVsLl9vblNjcm9sbCA9IE9iamVjdChlbC5fb25TY3JvbGwpXG4gIGVsLl9vblNjcm9sbCFbdm5vZGUuY29udGV4dCEuX3VpZF0gPSB7XG4gICAgaGFuZGxlcixcbiAgICBvcHRpb25zLFxuICAgIC8vIERvbid0IHJlZmVyZW5jZSBzZWxmXG4gICAgdGFyZ2V0OiBzZWxmID8gdW5kZWZpbmVkIDogdGFyZ2V0LFxuICB9XG59XG5cbmZ1bmN0aW9uIHVuYmluZCAoZWw6IEhUTUxFbGVtZW50LCBiaW5kaW5nOiBTY3JvbGxWTm9kZURpcmVjdGl2ZSwgdm5vZGU6IFZOb2RlKSB7XG4gIGlmICghZWwuX29uU2Nyb2xsPy5bdm5vZGUuY29udGV4dCEuX3VpZF0pIHJldHVyblxuXG4gIGNvbnN0IHsgaGFuZGxlciwgb3B0aW9ucywgdGFyZ2V0ID0gZWwgfSA9IGVsLl9vblNjcm9sbFt2bm9kZS5jb250ZXh0IS5fdWlkXSFcblxuICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlciwgb3B0aW9ucylcbiAgZGVsZXRlIGVsLl9vblNjcm9sbFt2bm9kZS5jb250ZXh0IS5fdWlkXVxufVxuXG5leHBvcnQgY29uc3QgU2Nyb2xsID0ge1xuICBpbnNlcnRlZCxcbiAgdW5iaW5kLFxufSBhcyBEaXJlY3RpdmVPcHRpb25zXG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFxuIl19