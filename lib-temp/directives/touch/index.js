import { keys } from '../../util/helpers';
const handleGesture = (wrapper) => {
    const { touchstartX, touchendX, touchstartY, touchendY } = wrapper;
    const dirRatio = 0.5;
    const minDistance = 16;
    wrapper.offsetX = touchendX - touchstartX;
    wrapper.offsetY = touchendY - touchstartY;
    if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {
        wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper);
        wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper);
    }
    if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {
        wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper);
        wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper);
    }
};
function touchstart(event, wrapper) {
    const touch = event.changedTouches[0];
    wrapper.touchstartX = touch.clientX;
    wrapper.touchstartY = touch.clientY;
    wrapper.start &&
        wrapper.start(Object.assign(event, wrapper));
}
function touchend(event, wrapper) {
    const touch = event.changedTouches[0];
    wrapper.touchendX = touch.clientX;
    wrapper.touchendY = touch.clientY;
    wrapper.end &&
        wrapper.end(Object.assign(event, wrapper));
    handleGesture(wrapper);
}
function touchmove(event, wrapper) {
    const touch = event.changedTouches[0];
    wrapper.touchmoveX = touch.clientX;
    wrapper.touchmoveY = touch.clientY;
    wrapper.move && wrapper.move(Object.assign(event, wrapper));
}
function createHandlers(value) {
    const wrapper = {
        touchstartX: 0,
        touchstartY: 0,
        touchendX: 0,
        touchendY: 0,
        touchmoveX: 0,
        touchmoveY: 0,
        offsetX: 0,
        offsetY: 0,
        left: value.left,
        right: value.right,
        up: value.up,
        down: value.down,
        start: value.start,
        move: value.move,
        end: value.end,
    };
    return {
        touchstart: (e) => touchstart(e, wrapper),
        touchend: (e) => touchend(e, wrapper),
        touchmove: (e) => touchmove(e, wrapper),
    };
}
function inserted(el, binding, vnode) {
    const value = binding.value;
    const target = value.parent ? el.parentElement : el;
    const options = value.options || { passive: true };
    // Needed to pass unit tests
    if (!target)
        return;
    const handlers = createHandlers(binding.value);
    target._touchHandlers = Object(target._touchHandlers);
    target._touchHandlers[vnode.context._uid] = handlers;
    keys(handlers).forEach(eventName => {
        target.addEventListener(eventName, handlers[eventName], options);
    });
}
function unbind(el, binding, vnode) {
    const target = binding.value.parent ? el.parentElement : el;
    if (!target || !target._touchHandlers)
        return;
    const handlers = target._touchHandlers[vnode.context._uid];
    keys(handlers).forEach(eventName => {
        target.removeEventListener(eventName, handlers[eventName]);
    });
    delete target._touchHandlers[vnode.context._uid];
}
export const Touch = {
    inserted,
    unbind,
};
export default Touch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy90b3VjaC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFhekMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFxQixFQUFFLEVBQUU7SUFDOUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQTtJQUNsRSxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUE7SUFDcEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFBO0lBQ3RCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQTtJQUN6QyxPQUFPLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUE7SUFFekMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDcEUsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNoRixPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxHQUFHLFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQ25GO0lBRUQsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDcEUsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsR0FB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QUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDakMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUM1RCxDQUFDLENBQUMsQ0FBQTtJQUNGLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ25ELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUc7SUFDbkIsUUFBUTtJQUNSLE1BQU07Q0FDUCxDQUFBO0FBRUQsZUFBZSxLQUFLLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWTm9kZURpcmVjdGl2ZSwgVk5vZGUgfSBmcm9tICd2dWUvdHlwZXMvdm5vZGUnXG5pbXBvcnQgeyBrZXlzIH0gZnJvbSAnLi4vLi4vdXRpbC9oZWxwZXJzJ1xuaW1wb3J0IHsgVG91Y2hIYW5kbGVycywgVG91Y2hWYWx1ZSwgVG91Y2hXcmFwcGVyIH0gZnJvbSAndnVldGlmeS90eXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBUb3VjaFN0b3JlZEhhbmRsZXJzIHtcbiAgdG91Y2hzdGFydDogKGU6IFRvdWNoRXZlbnQpID0+IHZvaWRcbiAgdG91Y2hlbmQ6IChlOiBUb3VjaEV2ZW50KSA9PiB2b2lkXG4gIHRvdWNobW92ZTogKGU6IFRvdWNoRXZlbnQpID0+IHZvaWRcbn1cblxuaW50ZXJmYWNlIFRvdWNoVk5vZGVEaXJlY3RpdmUgZXh0ZW5kcyBWTm9kZURpcmVjdGl2ZSB7XG4gIHZhbHVlPzogVG91Y2hWYWx1ZVxufVxuXG5jb25zdCBoYW5kbGVHZXN0dXJlID0gKHdyYXBwZXI6IFRvdWNoV3JhcHBlcikgPT4ge1xuICBjb25zdCB7IHRvdWNoc3RhcnRYLCB0b3VjaGVuZFgsIHRvdWNoc3RhcnRZLCB0b3VjaGVuZFkgfSA9IHdyYXBwZXJcbiAgY29uc3QgZGlyUmF0aW8gPSAwLjVcbiAgY29uc3QgbWluRGlzdGFuY2UgPSAxNlxuICB3cmFwcGVyLm9mZnNldFggPSB0b3VjaGVuZFggLSB0b3VjaHN0YXJ0WFxuICB3cmFwcGVyLm9mZnNldFkgPSB0b3VjaGVuZFkgLSB0b3VjaHN0YXJ0WVxuXG4gIGlmIChNYXRoLmFicyh3cmFwcGVyLm9mZnNldFkpIDwgZGlyUmF0aW8gKiBNYXRoLmFicyh3cmFwcGVyLm9mZnNldFgpKSB7XG4gICAgd3JhcHBlci5sZWZ0ICYmICh0b3VjaGVuZFggPCB0b3VjaHN0YXJ0WCAtIG1pbkRpc3RhbmNlKSAmJiB3cmFwcGVyLmxlZnQod3JhcHBlcilcbiAgICB3cmFwcGVyLnJpZ2h0ICYmICh0b3VjaGVuZFggPiB0b3VjaHN0YXJ0WCArIG1pbkRpc3RhbmNlKSAmJiB3cmFwcGVyLnJpZ2h0KHdyYXBwZXIpXG4gIH1cblxuICBpZiAoTWF0aC5hYnMod3JhcHBlci5vZmZzZXRYKSA8IGRpclJhdGlvICogTWF0aC5hYnMod3JhcHBlci5vZmZzZXRZKSkge1xuICAgIHdyYXBwZXIudXAgJiYgKHRvdWNoZW5kWSA8IHRvdWNoc3RhcnRZIC0gbWluRGlzdGFuY2UpICYmIHdyYXBwZXIudXAod3JhcHBlcilcbiAgICB3cmFwcGVyLmRvd24gJiYgKHRvdWNoZW5kWSA+IHRvdWNoc3RhcnRZICsgbWluRGlzdGFuY2UpICYmIHdyYXBwZXIuZG93bih3cmFwcGVyKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvdWNoc3RhcnQgKGV2ZW50OiBUb3VjaEV2ZW50LCB3cmFwcGVyOiBUb3VjaFdyYXBwZXIpIHtcbiAgY29uc3QgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXVxuICB3cmFwcGVyLnRvdWNoc3RhcnRYID0gdG91Y2guY2xpZW50WFxuICB3cmFwcGVyLnRvdWNoc3RhcnRZID0gdG91Y2guY2xpZW50WVxuXG4gIHdyYXBwZXIuc3RhcnQgJiZcbiAgICB3cmFwcGVyLnN0YXJ0KE9iamVjdC5hc3NpZ24oZXZlbnQsIHdyYXBwZXIpKVxufVxuXG5mdW5jdGlvbiB0b3VjaGVuZCAoZXZlbnQ6IFRvdWNoRXZlbnQsIHdyYXBwZXI6IFRvdWNoV3JhcHBlcikge1xuICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdXG4gIHdyYXBwZXIudG91Y2hlbmRYID0gdG91Y2guY2xpZW50WFxuICB3cmFwcGVyLnRvdWNoZW5kWSA9IHRvdWNoLmNsaWVudFlcblxuICB3cmFwcGVyLmVuZCAmJlxuICAgIHdyYXBwZXIuZW5kKE9iamVjdC5hc3NpZ24oZXZlbnQsIHdyYXBwZXIpKVxuXG4gIGhhbmRsZUdlc3R1cmUod3JhcHBlcilcbn1cblxuZnVuY3Rpb24gdG91Y2htb3ZlIChldmVudDogVG91Y2hFdmVudCwgd3JhcHBlcjogVG91Y2hXcmFwcGVyKSB7XG4gIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF1cbiAgd3JhcHBlci50b3VjaG1vdmVYID0gdG91Y2guY2xpZW50WFxuICB3cmFwcGVyLnRvdWNobW92ZVkgPSB0b3VjaC5jbGllbnRZXG5cbiAgd3JhcHBlci5tb3ZlICYmIHdyYXBwZXIubW92ZShPYmplY3QuYXNzaWduKGV2ZW50LCB3cmFwcGVyKSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFuZGxlcnMgKHZhbHVlOiBUb3VjaEhhbmRsZXJzKTogVG91Y2hTdG9yZWRIYW5kbGVycyB7XG4gIGNvbnN0IHdyYXBwZXIgPSB7XG4gICAgdG91Y2hzdGFydFg6IDAsXG4gICAgdG91Y2hzdGFydFk6IDAsXG4gICAgdG91Y2hlbmRYOiAwLFxuICAgIHRvdWNoZW5kWTogMCxcbiAgICB0b3VjaG1vdmVYOiAwLFxuICAgIHRvdWNobW92ZVk6IDAsXG4gICAgb2Zmc2V0WDogMCxcbiAgICBvZmZzZXRZOiAwLFxuICAgIGxlZnQ6IHZhbHVlLmxlZnQsXG4gICAgcmlnaHQ6IHZhbHVlLnJpZ2h0LFxuICAgIHVwOiB2YWx1ZS51cCxcbiAgICBkb3duOiB2YWx1ZS5kb3duLFxuICAgIHN0YXJ0OiB2YWx1ZS5zdGFydCxcbiAgICBtb3ZlOiB2YWx1ZS5tb3ZlLFxuICAgIGVuZDogdmFsdWUuZW5kLFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3VjaHN0YXJ0OiAoZTogVG91Y2hFdmVudCkgPT4gdG91Y2hzdGFydChlLCB3cmFwcGVyKSxcbiAgICB0b3VjaGVuZDogKGU6IFRvdWNoRXZlbnQpID0+IHRvdWNoZW5kKGUsIHdyYXBwZXIpLFxuICAgIHRvdWNobW92ZTogKGU6IFRvdWNoRXZlbnQpID0+IHRvdWNobW92ZShlLCB3cmFwcGVyKSxcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRlZCAoZWw6IEhUTUxFbGVtZW50LCBiaW5kaW5nOiBUb3VjaFZOb2RlRGlyZWN0aXZlLCB2bm9kZTogVk5vZGUpIHtcbiAgY29uc3QgdmFsdWUgPSBiaW5kaW5nLnZhbHVlIVxuICBjb25zdCB0YXJnZXQgPSB2YWx1ZS5wYXJlbnQgPyBlbC5wYXJlbnRFbGVtZW50IDogZWxcbiAgY29uc3Qgb3B0aW9ucyA9IHZhbHVlLm9wdGlvbnMgfHwgeyBwYXNzaXZlOiB0cnVlIH1cblxuICAvLyBOZWVkZWQgdG8gcGFzcyB1bml0IHRlc3RzXG4gIGlmICghdGFyZ2V0KSByZXR1cm5cblxuICBjb25zdCBoYW5kbGVycyA9IGNyZWF0ZUhhbmRsZXJzKGJpbmRpbmcudmFsdWUhKVxuICB0YXJnZXQuX3RvdWNoSGFuZGxlcnMgPSBPYmplY3QodGFyZ2V0Ll90b3VjaEhhbmRsZXJzKVxuICB0YXJnZXQuX3RvdWNoSGFuZGxlcnMhW3Zub2RlLmNvbnRleHQhLl91aWRdID0gaGFuZGxlcnNcblxuICBrZXlzKGhhbmRsZXJzKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyc1tldmVudE5hbWVdIGFzIEV2ZW50TGlzdGVuZXIsIG9wdGlvbnMpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHVuYmluZCAoZWw6IEhUTUxFbGVtZW50LCBiaW5kaW5nOiBUb3VjaFZOb2RlRGlyZWN0aXZlLCB2bm9kZTogVk5vZGUpIHtcbiAgY29uc3QgdGFyZ2V0ID0gYmluZGluZy52YWx1ZSEucGFyZW50ID8gZWwucGFyZW50RWxlbWVudCA6IGVsXG4gIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQuX3RvdWNoSGFuZGxlcnMpIHJldHVyblxuXG4gIGNvbnN0IGhhbmRsZXJzID0gdGFyZ2V0Ll90b3VjaEhhbmRsZXJzW3Zub2RlLmNvbnRleHQhLl91aWRdXG4gIGtleXMoaGFuZGxlcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXJzW2V2ZW50TmFtZV0pXG4gIH0pXG4gIGRlbGV0ZSB0YXJnZXQuX3RvdWNoSGFuZGxlcnNbdm5vZGUuY29udGV4dCEuX3VpZF1cbn1cblxuZXhwb3J0IGNvbnN0IFRvdWNoID0ge1xuICBpbnNlcnRlZCxcbiAgdW5iaW5kLFxufVxuXG5leHBvcnQgZGVmYXVsdCBUb3VjaFxuIl19