export function genPoints(values, boundary) {
    const { minX, maxX, minY, maxY } = boundary;
    const totalValues = values.length;
    const maxValue = Math.max(...values);
    const minValue = Math.min(...values);
    const gridX = (maxX - minX) / (totalValues - 1);
    const gridY = (maxY - minY) / ((maxValue - minValue) || 1);
    return values.map((value, index) => {
        return {
            x: minX + index * gridX,
            y: maxY - (value - minValue) * gridY,
            value,
        };
    });
}
export function genBars(values, boundary) {
    const { minX, maxX, minY, maxY } = boundary;
    const totalValues = values.length;
    let maxValue = Math.max(...values);
    let minValue = Math.min(...values);
    if (minValue > 0)
        minValue = 0;
    if (maxValue < 0)
        maxValue = 0;
    const gridX = maxX / totalValues;
    const gridY = (maxY - minY) / ((maxValue - minValue) || 1);
    const horizonY = maxY - Math.abs(minValue * gridY);
    return values.map((value, index) => {
        const height = Math.abs(gridY * value);
        return {
            x: minX + index * gridX,
            y: horizonY - height +
                +(value < 0) * height,
            height,
            value,
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxTQUFTLENBQ3ZCLE1BQWdCLEVBQ2hCLFFBQWtCO0lBRWxCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUE7SUFDM0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRXBDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQy9DLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7SUFFMUQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2pDLE9BQU87WUFDTCxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLO1lBQ3ZCLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEdBQUcsS0FBSztZQUNwQyxLQUFLO1NBQ04sQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQ3JCLE1BQWdCLEVBQ2hCLFFBQWtCO0lBRWxCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUE7SUFDM0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNqQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDbEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRWxDLElBQUksUUFBUSxHQUFHLENBQUM7UUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBQzlCLElBQUksUUFBUSxHQUFHLENBQUM7UUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBRTlCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxXQUFXLENBQUE7SUFDaEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUMxRCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUE7SUFFbEQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFBO1FBRXRDLE9BQU87WUFDTCxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLO1lBQ3ZCLENBQUMsRUFBRSxRQUFRLEdBQUcsTUFBTTtnQkFDbEIsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO1lBQ3ZCLE1BQU07WUFDTixLQUFLO1NBQ04sQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvaW50LCBCb3VuZGFyeSwgQmFyIH0gZnJvbSAnLi4vVlNwYXJrbGluZSdcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblBvaW50cyAoXG4gIHZhbHVlczogbnVtYmVyW10sXG4gIGJvdW5kYXJ5OiBCb3VuZGFyeVxuKTogUG9pbnRbXSB7XG4gIGNvbnN0IHsgbWluWCwgbWF4WCwgbWluWSwgbWF4WSB9ID0gYm91bmRhcnlcbiAgY29uc3QgdG90YWxWYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoXG4gIGNvbnN0IG1heFZhbHVlID0gTWF0aC5tYXgoLi4udmFsdWVzKVxuICBjb25zdCBtaW5WYWx1ZSA9IE1hdGgubWluKC4uLnZhbHVlcylcblxuICBjb25zdCBncmlkWCA9IChtYXhYIC0gbWluWCkgLyAodG90YWxWYWx1ZXMgLSAxKVxuICBjb25zdCBncmlkWSA9IChtYXhZIC0gbWluWSkgLyAoKG1heFZhbHVlIC0gbWluVmFsdWUpIHx8IDEpXG5cbiAgcmV0dXJuIHZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBtaW5YICsgaW5kZXggKiBncmlkWCxcbiAgICAgIHk6IG1heFkgLSAodmFsdWUgLSBtaW5WYWx1ZSkgKiBncmlkWSxcbiAgICAgIHZhbHVlLFxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkJhcnMgKFxuICB2YWx1ZXM6IG51bWJlcltdLFxuICBib3VuZGFyeTogQm91bmRhcnlcbik6IEJhcltdIHtcbiAgY29uc3QgeyBtaW5YLCBtYXhYLCBtaW5ZLCBtYXhZIH0gPSBib3VuZGFyeVxuICBjb25zdCB0b3RhbFZhbHVlcyA9IHZhbHVlcy5sZW5ndGhcbiAgbGV0IG1heFZhbHVlID0gTWF0aC5tYXgoLi4udmFsdWVzKVxuICBsZXQgbWluVmFsdWUgPSBNYXRoLm1pbiguLi52YWx1ZXMpXG5cbiAgaWYgKG1pblZhbHVlID4gMCkgbWluVmFsdWUgPSAwXG4gIGlmIChtYXhWYWx1ZSA8IDApIG1heFZhbHVlID0gMFxuXG4gIGNvbnN0IGdyaWRYID0gbWF4WCAvIHRvdGFsVmFsdWVzXG4gIGNvbnN0IGdyaWRZID0gKG1heFkgLSBtaW5ZKSAvICgobWF4VmFsdWUgLSBtaW5WYWx1ZSkgfHwgMSlcbiAgY29uc3QgaG9yaXpvblkgPSBtYXhZIC0gTWF0aC5hYnMobWluVmFsdWUgKiBncmlkWSlcblxuICByZXR1cm4gdmFsdWVzLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5hYnMoZ3JpZFkgKiB2YWx1ZSlcblxuICAgIHJldHVybiB7XG4gICAgICB4OiBtaW5YICsgaW5kZXggKiBncmlkWCxcbiAgICAgIHk6IGhvcml6b25ZIC0gaGVpZ2h0ICtcbiAgICAgICAgKyh2YWx1ZSA8IDApICogaGVpZ2h0LFxuICAgICAgaGVpZ2h0LFxuICAgICAgdmFsdWUsXG4gICAgfVxuICB9KVxufVxuIl19