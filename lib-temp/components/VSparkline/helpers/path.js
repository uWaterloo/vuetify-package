import { checkCollinear, getDistance, moveTo } from './math';
/**
 * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18
 */
export function genPath(points, radius, fill = false, height = 75) {
    const start = points.shift();
    const end = points[points.length - 1];
    return ((fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +
        points
            .map((point, index) => {
            const next = points[index + 1];
            const prev = points[index - 1] || start;
            const isCollinear = next && checkCollinear(next, point, prev);
            if (!next || isCollinear) {
                return `L${point.x} ${point.y}`;
            }
            const threshold = Math.min(getDistance(prev, point), getDistance(next, point));
            const isTooCloseForRadius = threshold / 2 < radius;
            const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;
            const before = moveTo(prev, point, radiusForPoint);
            const after = moveTo(next, point, radiusForPoint);
            return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`;
        })
            .join('') +
        (fill ? `L${end.x} ${height - start.x + 2} Z` : ''));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUU1RDs7R0FFRztBQUNILE1BQU0sVUFBVSxPQUFPLENBQUUsTUFBZSxFQUFFLE1BQWMsRUFBRSxJQUFJLEdBQUcsS0FBSyxFQUFFLE1BQU0sR0FBRyxFQUFFO0lBQ2pGLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUcsQ0FBQTtJQUM3QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUVyQyxPQUFPLENBQ0wsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDaEcsTUFBTTthQUNILEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNwQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQzlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO1lBQ3ZDLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUU3RCxJQUFJLENBQUMsSUFBSSxJQUFJLFdBQVcsRUFBRTtnQkFDeEIsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFBO2FBQ2hDO1lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDeEIsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDeEIsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FDekIsQ0FBQTtZQUNELE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUE7WUFDbEQsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtZQUVuRSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQTtZQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQTtZQUVqRCxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUMvRSxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ1gsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ3BELENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9WU3BhcmtsaW5lJ1xuaW1wb3J0IHsgY2hlY2tDb2xsaW5lYXIsIGdldERpc3RhbmNlLCBtb3ZlVG8gfSBmcm9tICcuL21hdGgnXG5cbi8qKlxuICogRnJvbSBodHRwczovL2dpdGh1Yi5jb20vdW5zcGxhc2gvcmVhY3QtdHJlbmQvYmxvYi9tYXN0ZXIvc3JjL2hlbHBlcnMvRE9NLmhlbHBlcnMuanMjTDE4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5QYXRoIChwb2ludHM6IFBvaW50W10sIHJhZGl1czogbnVtYmVyLCBmaWxsID0gZmFsc2UsIGhlaWdodCA9IDc1KSB7XG4gIGNvbnN0IHN0YXJ0ID0gcG9pbnRzLnNoaWZ0KCkhXG4gIGNvbnN0IGVuZCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cblxuICByZXR1cm4gKFxuICAgIChmaWxsID8gYE0ke3N0YXJ0Lnh9ICR7aGVpZ2h0IC0gc3RhcnQueCArIDJ9IEwke3N0YXJ0Lnh9ICR7c3RhcnQueX1gIDogYE0ke3N0YXJ0Lnh9ICR7c3RhcnQueX1gKSArXG4gICAgcG9pbnRzXG4gICAgICAubWFwKChwb2ludCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHBvaW50c1tpbmRleCArIDFdXG4gICAgICAgIGNvbnN0IHByZXYgPSBwb2ludHNbaW5kZXggLSAxXSB8fCBzdGFydFxuICAgICAgICBjb25zdCBpc0NvbGxpbmVhciA9IG5leHQgJiYgY2hlY2tDb2xsaW5lYXIobmV4dCwgcG9pbnQsIHByZXYpXG5cbiAgICAgICAgaWYgKCFuZXh0IHx8IGlzQ29sbGluZWFyKSB7XG4gICAgICAgICAgcmV0dXJuIGBMJHtwb2ludC54fSAke3BvaW50Lnl9YFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGhyZXNob2xkID0gTWF0aC5taW4oXG4gICAgICAgICAgZ2V0RGlzdGFuY2UocHJldiwgcG9pbnQpLFxuICAgICAgICAgIGdldERpc3RhbmNlKG5leHQsIHBvaW50KVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGlzVG9vQ2xvc2VGb3JSYWRpdXMgPSB0aHJlc2hvbGQgLyAyIDwgcmFkaXVzXG4gICAgICAgIGNvbnN0IHJhZGl1c0ZvclBvaW50ID0gaXNUb29DbG9zZUZvclJhZGl1cyA/IHRocmVzaG9sZCAvIDIgOiByYWRpdXNcblxuICAgICAgICBjb25zdCBiZWZvcmUgPSBtb3ZlVG8ocHJldiwgcG9pbnQsIHJhZGl1c0ZvclBvaW50KVxuICAgICAgICBjb25zdCBhZnRlciA9IG1vdmVUbyhuZXh0LCBwb2ludCwgcmFkaXVzRm9yUG9pbnQpXG5cbiAgICAgICAgcmV0dXJuIGBMJHtiZWZvcmUueH0gJHtiZWZvcmUueX1TJHtwb2ludC54fSAke3BvaW50Lnl9ICR7YWZ0ZXIueH0gJHthZnRlci55fWBcbiAgICAgIH0pXG4gICAgICAuam9pbignJykgK1xuICAgIChmaWxsID8gYEwke2VuZC54fSAke2hlaWdodCAtIHN0YXJ0LnggKyAyfSBaYCA6ICcnKVxuICApXG59XG4iXX0=