import { upperFirst } from '../../util/helpers';
export default function (expandedParentClass = '', x = false) {
    const sizeProperty = x ? 'width' : 'height';
    const offsetProperty = `offset${upperFirst(sizeProperty)}`;
    return {
        beforeEnter(el) {
            el._parent = el.parentNode;
            el._initialStyle = {
                transition: el.style.transition,
                overflow: el.style.overflow,
                [sizeProperty]: el.style[sizeProperty],
            };
        },
        enter(el) {
            const initialStyle = el._initialStyle;
            el.style.setProperty('transition', 'none', 'important');
            // Hide overflow to account for collapsed margins in the calculated height
            el.style.overflow = 'hidden';
            const offset = `${el[offsetProperty]}px`;
            el.style[sizeProperty] = '0';
            void el.offsetHeight; // force reflow
            el.style.transition = initialStyle.transition;
            if (expandedParentClass && el._parent) {
                el._parent.classList.add(expandedParentClass);
            }
            requestAnimationFrame(() => {
                el.style[sizeProperty] = offset;
            });
        },
        afterEnter: resetStyles,
        enterCancelled: resetStyles,
        leave(el) {
            el._initialStyle = {
                transition: '',
                overflow: el.style.overflow,
                [sizeProperty]: el.style[sizeProperty],
            };
            el.style.overflow = 'hidden';
            el.style[sizeProperty] = `${el[offsetProperty]}px`;
            void el.offsetHeight; // force reflow
            requestAnimationFrame(() => (el.style[sizeProperty] = '0'));
        },
        afterLeave,
        leaveCancelled: afterLeave,
    };
    function afterLeave(el) {
        if (expandedParentClass && el._parent) {
            el._parent.classList.remove(expandedParentClass);
        }
        resetStyles(el);
    }
    function resetStyles(el) {
        const size = el._initialStyle[sizeProperty];
        el.style.overflow = el._initialStyle.overflow;
        if (size != null)
            el.style[sizeProperty] = size;
        delete el._initialStyle;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kLXRyYW5zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy90cmFuc2l0aW9ucy9leHBhbmQtdHJhbnNpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFZL0MsTUFBTSxDQUFDLE9BQU8sV0FBVyxtQkFBbUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUs7SUFDMUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQThCLENBQUE7SUFDakUsTUFBTSxjQUFjLEdBQUcsU0FBUyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQW9DLENBQUE7SUFFNUYsT0FBTztRQUNMLFdBQVcsQ0FBRSxFQUFxQjtZQUNoQyxFQUFFLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxVQUFzRCxDQUFBO1lBQ3RFLEVBQUUsQ0FBQyxhQUFhLEdBQUc7Z0JBQ2pCLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVU7Z0JBQy9CLFFBQVEsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVE7Z0JBQzNCLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7YUFDdkMsQ0FBQTtRQUNILENBQUM7UUFFRCxLQUFLLENBQUUsRUFBcUI7WUFDMUIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGFBQWMsQ0FBQTtZQUV0QyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFBO1lBQ3ZELDBFQUEwRTtZQUMxRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7WUFDNUIsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQTtZQUV4QyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsQ0FBQTtZQUU1QixLQUFLLEVBQUUsQ0FBQyxZQUFZLENBQUEsQ0FBQyxlQUFlO1lBRXBDLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUE7WUFFN0MsSUFBSSxtQkFBbUIsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFO2dCQUNyQyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQTthQUM5QztZQUVELHFCQUFxQixDQUFDLEdBQUcsRUFBRTtnQkFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxNQUFNLENBQUE7WUFDakMsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO1FBRUQsVUFBVSxFQUFFLFdBQVc7UUFDdkIsY0FBYyxFQUFFLFdBQVc7UUFFM0IsS0FBSyxDQUFFLEVBQXFCO1lBQzFCLEVBQUUsQ0FBQyxhQUFhLEdBQUc7Z0JBQ2pCLFVBQVUsRUFBRSxFQUFFO2dCQUNkLFFBQVEsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVE7Z0JBQzNCLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7YUFDdkMsQ0FBQTtZQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtZQUM1QixFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUE7WUFDbEQsS0FBSyxFQUFFLENBQUMsWUFBWSxDQUFBLENBQUMsZUFBZTtZQUVwQyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUM3RCxDQUFDO1FBRUQsVUFBVTtRQUNWLGNBQWMsRUFBRSxVQUFVO0tBQzNCLENBQUE7SUFFRCxTQUFTLFVBQVUsQ0FBRSxFQUFxQjtRQUN4QyxJQUFJLG1CQUFtQixJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFDckMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDakQ7UUFDRCxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDakIsQ0FBQztJQUVELFNBQVMsV0FBVyxDQUFFLEVBQXFCO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxhQUFjLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDNUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLGFBQWMsQ0FBQyxRQUFRLENBQUE7UUFDOUMsSUFBSSxJQUFJLElBQUksSUFBSTtZQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFBO1FBQy9DLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQTtJQUN6QixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVwcGVyRmlyc3QgfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5cbmludGVyZmFjZSBIVE1MRXhwYW5kRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgX3BhcmVudD86IChOb2RlICYgUGFyZW50Tm9kZSAmIEhUTUxFbGVtZW50KSB8IG51bGxcbiAgX2luaXRpYWxTdHlsZT86IHtcbiAgICB0cmFuc2l0aW9uOiBzdHJpbmdcbiAgICBvdmVyZmxvdzogc3RyaW5nXG4gICAgaGVpZ2h0Pzogc3RyaW5nIHwgbnVsbFxuICAgIHdpZHRoPzogc3RyaW5nIHwgbnVsbFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChleHBhbmRlZFBhcmVudENsYXNzID0gJycsIHggPSBmYWxzZSkge1xuICBjb25zdCBzaXplUHJvcGVydHkgPSB4ID8gJ3dpZHRoJyA6ICdoZWlnaHQnIGFzICd3aWR0aCcgfCAnaGVpZ2h0J1xuICBjb25zdCBvZmZzZXRQcm9wZXJ0eSA9IGBvZmZzZXQke3VwcGVyRmlyc3Qoc2l6ZVByb3BlcnR5KX1gIGFzICdvZmZzZXRIZWlnaHQnIHwgJ29mZnNldFdpZHRoJ1xuXG4gIHJldHVybiB7XG4gICAgYmVmb3JlRW50ZXIgKGVsOiBIVE1MRXhwYW5kRWxlbWVudCkge1xuICAgICAgZWwuX3BhcmVudCA9IGVsLnBhcmVudE5vZGUgYXMgKE5vZGUgJiBQYXJlbnROb2RlICYgSFRNTEVsZW1lbnQpIHwgbnVsbFxuICAgICAgZWwuX2luaXRpYWxTdHlsZSA9IHtcbiAgICAgICAgdHJhbnNpdGlvbjogZWwuc3R5bGUudHJhbnNpdGlvbixcbiAgICAgICAgb3ZlcmZsb3c6IGVsLnN0eWxlLm92ZXJmbG93LFxuICAgICAgICBbc2l6ZVByb3BlcnR5XTogZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW50ZXIgKGVsOiBIVE1MRXhwYW5kRWxlbWVudCkge1xuICAgICAgY29uc3QgaW5pdGlhbFN0eWxlID0gZWwuX2luaXRpYWxTdHlsZSFcblxuICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zaXRpb24nLCAnbm9uZScsICdpbXBvcnRhbnQnKVxuICAgICAgLy8gSGlkZSBvdmVyZmxvdyB0byBhY2NvdW50IGZvciBjb2xsYXBzZWQgbWFyZ2lucyBpbiB0aGUgY2FsY3VsYXRlZCBoZWlnaHRcbiAgICAgIGVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgICAgIGNvbnN0IG9mZnNldCA9IGAke2VsW29mZnNldFByb3BlcnR5XX1weGBcblxuICAgICAgZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9ICcwJ1xuXG4gICAgICB2b2lkIGVsLm9mZnNldEhlaWdodCAvLyBmb3JjZSByZWZsb3dcblxuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IGluaXRpYWxTdHlsZS50cmFuc2l0aW9uXG5cbiAgICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzICYmIGVsLl9wYXJlbnQpIHtcbiAgICAgICAgZWwuX3BhcmVudC5jbGFzc0xpc3QuYWRkKGV4cGFuZGVkUGFyZW50Q2xhc3MpXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlW3NpemVQcm9wZXJ0eV0gPSBvZmZzZXRcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIGFmdGVyRW50ZXI6IHJlc2V0U3R5bGVzLFxuICAgIGVudGVyQ2FuY2VsbGVkOiByZXNldFN0eWxlcyxcblxuICAgIGxlYXZlIChlbDogSFRNTEV4cGFuZEVsZW1lbnQpIHtcbiAgICAgIGVsLl9pbml0aWFsU3R5bGUgPSB7XG4gICAgICAgIHRyYW5zaXRpb246ICcnLFxuICAgICAgICBvdmVyZmxvdzogZWwuc3R5bGUub3ZlcmZsb3csXG4gICAgICAgIFtzaXplUHJvcGVydHldOiBlbC5zdHlsZVtzaXplUHJvcGVydHldLFxuICAgICAgfVxuXG4gICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nXG4gICAgICBlbC5zdHlsZVtzaXplUHJvcGVydHldID0gYCR7ZWxbb2Zmc2V0UHJvcGVydHldfXB4YFxuICAgICAgdm9pZCBlbC5vZmZzZXRIZWlnaHQgLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiAoZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9ICcwJykpXG4gICAgfSxcblxuICAgIGFmdGVyTGVhdmUsXG4gICAgbGVhdmVDYW5jZWxsZWQ6IGFmdGVyTGVhdmUsXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlckxlYXZlIChlbDogSFRNTEV4cGFuZEVsZW1lbnQpIHtcbiAgICBpZiAoZXhwYW5kZWRQYXJlbnRDbGFzcyAmJiBlbC5fcGFyZW50KSB7XG4gICAgICBlbC5fcGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoZXhwYW5kZWRQYXJlbnRDbGFzcylcbiAgICB9XG4gICAgcmVzZXRTdHlsZXMoZWwpXG4gIH1cblxuICBmdW5jdGlvbiByZXNldFN0eWxlcyAoZWw6IEhUTUxFeHBhbmRFbGVtZW50KSB7XG4gICAgY29uc3Qgc2l6ZSA9IGVsLl9pbml0aWFsU3R5bGUhW3NpemVQcm9wZXJ0eV1cbiAgICBlbC5zdHlsZS5vdmVyZmxvdyA9IGVsLl9pbml0aWFsU3R5bGUhLm92ZXJmbG93XG4gICAgaWYgKHNpemUgIT0gbnVsbCkgZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9IHNpemVcbiAgICBkZWxldGUgZWwuX2luaXRpYWxTdHlsZVxuICB9XG59XG4iXX0=