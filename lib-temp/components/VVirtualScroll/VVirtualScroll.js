// Styles
import './VVirtualScroll.sass';
// Mixins
import Measurable from '../../mixins/measurable';
// Directives
import Scroll from '../../directives/scroll';
// Utilities
import { convertToUnit, getSlot, } from '../../util/helpers';
export default Measurable.extend({
    name: 'v-virtual-scroll',
    directives: { Scroll },
    props: {
        bench: {
            type: [Number, String],
            default: 0,
        },
        itemHeight: {
            type: [Number, String],
            required: true,
        },
        items: {
            type: Array,
            default: () => [],
        },
    },
    data: () => ({
        first: 0,
        last: 0,
        scrollTop: 0,
    }),
    computed: {
        __bench() {
            return parseInt(this.bench, 10);
        },
        __itemHeight() {
            return parseInt(this.itemHeight, 10);
        },
        firstToRender() {
            return Math.max(0, this.first - this.__bench);
        },
        lastToRender() {
            return Math.min(this.items.length, this.last + this.__bench);
        },
    },
    watch: {
        height: 'onScroll',
        itemHeight: 'onScroll',
    },
    mounted() {
        this.last = this.getLast(0);
    },
    methods: {
        getChildren() {
            return this.items.slice(this.firstToRender, this.lastToRender).map(this.genChild);
        },
        genChild(item, index) {
            index += this.firstToRender;
            const top = convertToUnit(index * this.__itemHeight);
            return this.$createElement('div', {
                staticClass: 'v-virtual-scroll__item',
                style: { top },
                key: index,
            }, getSlot(this, 'default', { index, item }));
        },
        getFirst() {
            return Math.floor(this.scrollTop / this.__itemHeight);
        },
        getLast(first) {
            const height = parseInt(this.height || 0, 10) || this.$el.clientHeight;
            return first + Math.ceil(height / this.__itemHeight);
        },
        onScroll() {
            this.scrollTop = this.$el.scrollTop;
            this.first = this.getFirst();
            this.last = this.getLast(this.first);
        },
    },
    render(h) {
        const content = h('div', {
            staticClass: 'v-virtual-scroll__container',
            style: {
                height: convertToUnit((this.items.length * this.__itemHeight)),
            },
        }, this.getChildren());
        return h('div', {
            staticClass: 'v-virtual-scroll',
            style: this.measurableStyles,
            directives: [{
                    name: 'scroll',
                    modifiers: { self: true },
                    value: this.onScroll,
                }],
            on: this.$listeners,
        }, [content]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlZpcnR1YWxTY3JvbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WVmlydHVhbFNjcm9sbC9WVmlydHVhbFNjcm9sbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTyx1QkFBdUIsQ0FBQTtBQUU5QixTQUFTO0FBQ1QsT0FBTyxVQUFVLE1BQU0seUJBQXlCLENBQUE7QUFFaEQsYUFBYTtBQUNiLE9BQU8sTUFBTSxNQUFNLHlCQUF5QixDQUFBO0FBRTVDLFlBQVk7QUFDWixPQUFPLEVBQ0wsYUFBYSxFQUNiLE9BQU8sR0FDUixNQUFNLG9CQUFvQixDQUFBO0FBTTNCLGVBQWUsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUMvQixJQUFJLEVBQUUsa0JBQWtCO0lBRXhCLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRTtJQUV0QixLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLFFBQVEsRUFBRSxJQUFJO1NBQ2Y7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1NBQ007S0FDMUI7SUFFRCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNYLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxFQUFFLENBQUM7UUFDUCxTQUFTLEVBQUUsQ0FBQztLQUNiLENBQUM7SUFFRixRQUFRLEVBQUU7UUFDUixPQUFPO1lBQ0wsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNqQyxDQUFDO1FBQ0QsWUFBWTtZQUNWLE9BQU8sUUFBUSxDQUFD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QUNkLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7b0JBQ3pCLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTtpQkFDckIsQ0FBQztZQUNGLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVTtTQUNwQixFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUNmLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdHlsZXNcbmltcG9ydCAnLi9WVmlydHVhbFNjcm9sbC5zYXNzJ1xuXG4vLyBNaXhpbnNcbmltcG9ydCBNZWFzdXJhYmxlIGZyb20gJy4uLy4uL21peGlucy9tZWFzdXJhYmxlJ1xuXG4vLyBEaXJlY3RpdmVzXG5pbXBvcnQgU2Nyb2xsIGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvc2Nyb2xsJ1xuXG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7XG4gIGNvbnZlcnRUb1VuaXQsXG4gIGdldFNsb3QsXG59IGZyb20gJy4uLy4uL3V0aWwvaGVscGVycydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgUHJvcFZhbGlkYXRvciB9IGZyb20gJ3Z1ZS90eXBlcy9vcHRpb25zJ1xuXG5leHBvcnQgZGVmYXVsdCBNZWFzdXJhYmxlLmV4dGVuZCh7XG4gIG5hbWU6ICd2LXZpcnR1YWwtc2Nyb2xsJyxcblxuICBkaXJlY3RpdmVzOiB7IFNjcm9sbCB9LFxuXG4gIHByb3BzOiB7XG4gICAgYmVuY2g6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAwLFxuICAgIH0sXG4gICAgaXRlbUhlaWdodDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgaXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW10sXG4gICAgfSBhcyBQcm9wVmFsaWRhdG9yPGFueVtdPixcbiAgfSxcblxuICBkYXRhOiAoKSA9PiAoe1xuICAgIGZpcnN0OiAwLFxuICAgIGxhc3Q6IDAsXG4gICAgc2Nyb2xsVG9wOiAwLFxuICB9KSxcblxuICBjb21wdXRlZDoge1xuICAgIF9fYmVuY2ggKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5iZW5jaCwgMTApXG4gICAgfSxcbiAgICBfX2l0ZW1IZWlnaHQgKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5pdGVtSGVpZ2h0LCAxMClcbiAgICB9LFxuICAgIGZpcnN0VG9SZW5kZXIgKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgdGhpcy5maXJzdCAtIHRoaXMuX19iZW5jaClcbiAgICB9LFxuICAgIGxhc3RUb1JlbmRlciAoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBNYXRoLm1pbih0aGlzLml0ZW1zLmxlbmd0aCwgdGhpcy5sYXN0ICsgdGhpcy5fX2JlbmNoKVxuICAgIH0sXG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBoZWlnaHQ6ICdvblNjcm9sbCcsXG4gICAgaXRlbUhlaWdodDogJ29uU2Nyb2xsJyxcbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmxhc3QgPSB0aGlzLmdldExhc3QoMClcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgZ2V0Q2hpbGRyZW4gKCk6IFZOb2RlW10ge1xuICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuc2xpY2UoXG4gICAgICAgIHRoaXMuZmlyc3RUb1JlbmRlcixcbiAgICAgICAgdGhpcy5sYXN0VG9SZW5kZXIsXG4gICAgICApLm1hcCh0aGlzLmdlbkNoaWxkKVxuICAgIH0sXG4gICAgZ2VuQ2hpbGQgKGl0ZW06IGFueSwgaW5kZXg6IG51bWJlcikge1xuICAgICAgaW5kZXggKz0gdGhpcy5maXJzdFRvUmVuZGVyXG5cbiAgICAgIGNvbnN0IHRvcCA9IGNvbnZlcnRUb1VuaXQoaW5kZXggKiB0aGlzLl9faXRlbUhlaWdodClcblxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LXZpcnR1YWwtc2Nyb2xsX19pdGVtJyxcbiAgICAgICAgc3R5bGU6IHsgdG9wIH0sXG4gICAgICAgIGtleTogaW5kZXgsXG4gICAgICB9LCBnZXRTbG90KHRoaXMsICdkZWZhdWx0JywgeyBpbmRleCwgaXRlbSB9KSlcbiAgICB9LFxuICAgIGdldEZpcnN0ICgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5zY3JvbGxUb3AgLyB0aGlzLl9faXRlbUhlaWdodClcbiAgICB9LFxuICAgIGdldExhc3QgKGZpcnN0OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VJbnQodGhpcy5oZWlnaHQgfHwgMCwgMTApIHx8IHRoaXMuJGVsLmNsaWVudEhlaWdodFxuXG4gICAgICByZXR1cm4gZmlyc3QgKyBNYXRoLmNlaWwoaGVpZ2h0IC8gdGhpcy5fX2l0ZW1IZWlnaHQpXG4gICAgfSxcbiAgICBvblNjcm9sbCAoKSB7XG4gICAgICB0aGlzLnNjcm9sbFRvcCA9IHRoaXMuJGVsLnNjcm9sbFRvcFxuICAgICAgdGhpcy5maXJzdCA9IHRoaXMuZ2V0Rmlyc3QoKVxuICAgICAgdGhpcy5sYXN0ID0gdGhpcy5nZXRMYXN0KHRoaXMuZmlyc3QpXG4gICAgfSxcbiAgfSxcblxuICByZW5kZXIgKGgpOiBWTm9kZSB7XG4gICAgY29uc3QgY29udGVudCA9IGgoJ2RpdicsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiAndi12aXJ0dWFsLXNjcm9sbF9fY29udGFpbmVyJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdCgodGhpcy5pdGVtcy5sZW5ndGggKiB0aGlzLl9faXRlbUhlaWdodCkpLFxuICAgICAgfSxcbiAgICB9LCB0aGlzLmdldENoaWxkcmVuKCkpXG5cbiAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6ICd2LXZpcnR1YWwtc2Nyb2xsJyxcbiAgICAgIHN0eWxlOiB0aGlzLm1lYXN1cmFibGVTdHlsZXMsXG4gICAgICBkaXJlY3RpdmVzOiBbe1xuICAgICAgICBuYW1lOiAnc2Nyb2xsJyxcbiAgICAgICAgbW9kaWZpZXJzOiB7IHNlbGY6IHRydWUgfSxcbiAgICAgICAgdmFsdWU6IHRoaXMub25TY3JvbGwsXG4gICAgICB9XSxcbiAgICAgIG9uOiB0aGlzLiRsaXN0ZW5lcnMsXG4gICAgfSwgW2NvbnRlbnRdKVxuICB9LFxufSlcbiJdfQ==