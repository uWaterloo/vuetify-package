import './VTimePickerTitle.sass';
// Mixins
import PickerButton from '../../mixins/picker-button';
// Utils
import { pad } from '../VDatePicker/util';
import mixins from '../../util/mixins';
import { SelectingTimes } from './SelectingTimes';
export default mixins(PickerButton
/* @vue/component */
).extend({
    name: 'v-time-picker-title',
    props: {
        ampm: Boolean,
        ampmReadonly: Boolean,
        disabled: Boolean,
        hour: Number,
        minute: Number,
        second: Number,
        period: {
            type: String,
            validator: period => period === 'am' || period === 'pm',
        },
        readonly: Boolean,
        useSeconds: Boolean,
        selecting: Number,
    },
    methods: {
        genTime() {
            let hour = this.hour;
            if (this.ampm) {
                hour = hour ? ((hour - 1) % 12 + 1) : 12;
            }
            const displayedHour = this.hour == null ? '--' : this.ampm ? String(hour) : pad(hour);
            const displayedMinute = this.minute == null ? '--' : pad(this.minute);
            const titleContent = [
                this.genPickerButton('selecting', SelectingTimes.Hour, displayedHour, this.disabled),
                this.$createElement('span', ':'),
                this.genPickerButton('selecting', SelectingTimes.Minute, displayedMinute, this.disabled),
            ];
            if (this.useSeconds) {
                const displayedSecond = this.second == null ? '--' : pad(this.second);
                titleContent.push(this.$createElement('span', ':'));
                titleContent.push(this.genPickerButton('selecting', SelectingTimes.Second, displayedSecond, this.disabled));
            }
            return this.$createElement('div', {
                class: 'v-time-picker-title__time',
            }, titleContent);
        },
        genAmPm() {
            return this.$createElement('div', {
                staticClass: 'v-time-picker-title__ampm',
                class: {
                    'v-time-picker-title__ampm--readonly': this.ampmReadonly,
                },
            }, [
                (!this.ampmReadonly || this.period === 'am') ? this.genPickerButton('period', 'am', this.$vuetify.lang.t('$vuetify.timePicker.am'), this.disabled || this.readonly) : null,
                (!this.ampmReadonly || this.period === 'pm') ? this.genPickerButton('period', 'pm', this.$vuetify.lang.t('$vuetify.timePicker.pm'), this.disabled || this.readonly) : null,
            ]);
        },
    },
    render(h) {
        const children = [this.genTime()];
        this.ampm && children.push(this.genAmPm());
        return h('div', {
            staticClass: 'v-time-picker-title',
        }, children);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRpbWVQaWNrZXJUaXRsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUaW1lUGlja2VyL1ZUaW1lUGlja2VyVGl0bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyx5QkFBeUIsQ0FBQTtBQUVoQyxTQUFTO0FBQ1QsT0FBTyxZQUFZLE1BQU0sNEJBQTRCLENBQUE7QUFFckQsUUFBUTtBQUNSLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUN6QyxPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQTtBQUV0QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHakQsZUFBZSxNQUFNLENBQ25CLFlBQVk7QUFDZCxvQkFBb0I7Q0FDbkIsQ0FBQyxNQUFNLENBQUM7SUFDUCxJQUFJLEVBQUUscUJBQXFCO0lBRTNCLEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxPQUFPO1FBQ2IsWUFBWSxFQUFFLE9BQU87UUFDckIsUUFBUSxFQUFFLE9BQU87UUFDakIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsTUFBTTtRQUNkLE1BQU0sRUFBRSxNQUFNO1FBQ2QsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLE1BQStCO1lBQ3JDLFNBQVMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLElBQUk7U0FDeEQ7UUFDRCxRQUFRLEVBQUUsT0FBTztRQUNqQixVQUFVLEVBQUUsT0FBTztRQUNuQixTQUFTLEVBQUUsTUFBTTtLQUNsQjtJQUVELE9BQU8sRUFBRTtRQUNQLE9BQU87WUFDTCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO1lBQ3BCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENB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LFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFFMUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ2QsV0FBVyxFQUFFLHFCQUFxQjtTQUNuQyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2QsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9WVGltZVBpY2tlclRpdGxlLnNhc3MnXG5cbi8vIE1peGluc1xuaW1wb3J0IFBpY2tlckJ1dHRvbiBmcm9tICcuLi8uLi9taXhpbnMvcGlja2VyLWJ1dHRvbidcblxuLy8gVXRpbHNcbmltcG9ydCB7IHBhZCB9IGZyb20gJy4uL1ZEYXRlUGlja2VyL3V0aWwnXG5pbXBvcnQgbWl4aW5zIGZyb20gJy4uLy4uL3V0aWwvbWl4aW5zJ1xuXG5pbXBvcnQgeyBTZWxlY3RpbmdUaW1lcyB9IGZyb20gJy4vU2VsZWN0aW5nVGltZXMnXG5pbXBvcnQgeyBWTm9kZSwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBkZWZhdWx0IG1peGlucyhcbiAgUGlja2VyQnV0dG9uXG4vKiBAdnVlL2NvbXBvbmVudCAqL1xuKS5leHRlbmQoe1xuICBuYW1lOiAndi10aW1lLXBpY2tlci10aXRsZScsXG5cbiAgcHJvcHM6IHtcbiAgICBhbXBtOiBCb29sZWFuLFxuICAgIGFtcG1SZWFkb25seTogQm9vbGVhbixcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBob3VyOiBOdW1iZXIsXG4gICAgbWludXRlOiBOdW1iZXIsXG4gICAgc2Vjb25kOiBOdW1iZXIsXG4gICAgcGVyaW9kOiB7XG4gICAgICB0eXBlOiBTdHJpbmcgYXMgUHJvcFR5cGU8J2FtJyB8ICdwbSc+LFxuICAgICAgdmFsaWRhdG9yOiBwZXJpb2QgPT4gcGVyaW9kID09PSAnYW0nIHx8IHBlcmlvZCA9PT0gJ3BtJyxcbiAgICB9LFxuICAgIHJlYWRvbmx5OiBCb29sZWFuLFxuICAgIHVzZVNlY29uZHM6IEJvb2xlYW4sXG4gICAgc2VsZWN0aW5nOiBOdW1iZXIsXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGdlblRpbWUgKCkge1xuICAgICAgbGV0IGhvdXIgPSB0aGlzLmhvdXJcbiAgICAgIGlmICh0aGlzLmFtcG0pIHtcbiAgICAgICAgaG91ciA9IGhvdXIgPyAoKGhvdXIgLSAxKSAlIDEyICsgMSkgOiAxMlxuICAgICAgfVxuXG4gICAgICBjb25zdCBkaXNwbGF5ZWRIb3VyID0gdGhpcy5ob3VyID09IG51bGwgPyAnLS0nIDogdGhpcy5hbXBtID8gU3RyaW5nKGhvdXIpIDogcGFkKGhvdXIpXG4gICAgICBjb25zdCBkaXNwbGF5ZWRNaW51dGUgPSB0aGlzLm1pbnV0ZSA9PSBudWxsID8gJy0tJyA6IHBhZCh0aGlzLm1pbnV0ZSlcbiAgICAgIGNvbnN0IHRpdGxlQ29udGVudCA9IFtcbiAgICAgICAgdGhpcy5nZW5QaWNrZXJCdXR0b24oJ3NlbGVjdGluZycsIFNlbGVjdGluZ1RpbWVzLkhvdXIsIGRpc3BsYXllZEhvdXIsIHRoaXMuZGlzYWJsZWQpLFxuICAgICAgICB0aGlzLiRjcmVhdGVFbGVtZW50KCdzcGFuJywgJzonKSxcbiAgICAgICAgdGhpcy5nZW5QaWNrZXJCdXR0b24oJ3NlbGVjdGluZycsIFNlbGVjdGluZ1RpbWVzLk1pbnV0ZSwgZGlzcGxheWVkTWludXRlLCB0aGlzLmRpc2FibGVkKSxcbiAgICAgIF1cblxuICAgICAgaWYgKHRoaXMudXNlU2Vjb25kcykge1xuICAgICAgICBjb25zdCBkaXNwbGF5ZWRTZWNvbmQgPSB0aGlzLnNlY29uZCA9PSBudWxsID8gJy0tJyA6IHBhZCh0aGlzLnNlY29uZClcbiAgICAgICAgdGl0bGVDb250ZW50LnB1c2godGhpcy4kY3JlYXRlRWxlbWVudCgnc3BhbicsICc6JykpXG4gICAgICAgIHRpdGxlQ29udGVudC5wdXNoKHRoaXMuZ2VuUGlja2VyQnV0dG9uKCdzZWxlY3RpbmcnLCBTZWxlY3RpbmdUaW1lcy5TZWNvbmQsIGRpc3BsYXllZFNlY29uZCwgdGhpcy5kaXNhYmxlZCkpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3YtdGltZS1waWNrZXItdGl0bGVfX3RpbWUnLFxuICAgICAgfSwgdGl0bGVDb250ZW50KVxuICAgIH0sXG4gICAgZ2VuQW1QbSAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBzdGF0aWNDbGFzczogJ3YtdGltZS1waWNrZXItdGl0bGVfX2FtcG0nLFxuICAgICAgICBjbGFzczoge1xuICAgICAgICAgICd2LXRpbWUtcGlja2VyLXRpdGxlX19hbXBtLS1yZWFkb25seSc6IHRoaXMuYW1wbVJlYWRvbmx5LFxuICAgICAgICB9LFxuICAgICAgfSwgW1xuICAgICAgICAoIXRoaXMuYW1wbVJlYWRvbmx5IHx8IHRoaXMucGVyaW9kID09PSAnYW0nKSA/IHRoaXMuZ2VuUGlja2VyQnV0dG9uKCdwZXJpb2QnLCAnYW0nLCB0aGlzLiR2dWV0aWZ5LmxhbmcudCgnJHZ1ZXRpZnkudGltZVBpY2tlci5hbScpLCB0aGlzLmRpc2FibGVkIHx8IHRoaXMucmVhZG9ubHkpIDogbnVsbCxcbiAgICAgICAgKCF0aGlzLmFtcG1SZWFkb25seSB8fCB0aGlzLnBlcmlvZCA9PT0gJ3BtJykgPyB0aGlzLmdlblBpY2tlckJ1dHRvbigncGVyaW9kJywgJ3BtJywgdGhpcy4kdnVldGlmeS5sYW5nLnQoJyR2dWV0aWZ5LnRpbWVQaWNrZXIucG0nKSwgdGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlYWRvbmx5KSA6IG51bGwsXG4gICAgICBdKVxuICAgIH0sXG4gIH0sXG5cbiAgcmVuZGVyIChoKTogVk5vZGUge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gW3RoaXMuZ2VuVGltZSgpXVxuXG4gICAgdGhpcy5hbXBtICYmIGNoaWxkcmVuLnB1c2godGhpcy5nZW5BbVBtKCkpXG5cbiAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6ICd2LXRpbWUtcGlja2VyLXRpdGxlJyxcbiAgICB9LCBjaGlsZHJlbilcbiAgfSxcbn0pXG4iXX0=