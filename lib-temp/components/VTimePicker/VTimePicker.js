// Components
import VTimePickerTitle from './VTimePickerTitle';
import VTimePickerClock from './VTimePickerClock';
// Mixins
import Picker from '../../mixins/picker';
import PickerButton from '../../mixins/picker-button';
// Utils
import { createRange } from '../../util/helpers';
import pad from '../VDatePicker/util/pad';
import mixins from '../../util/mixins';
import { SelectingTimes } from './SelectingTimes';
const rangeHours24 = createRange(24);
const rangeHours12am = createRange(12);
const rangeHours12pm = rangeHours12am.map(v => v + 12);
const range60 = createRange(60);
const selectingNames = { 1: 'hour', 2: 'minute', 3: 'second' };
export { SelectingTimes };
export default mixins(Picker, PickerButton
/* @vue/component */
).extend({
    name: 'v-time-picker',
    props: {
        allowedHours: [Function, Array],
        allowedMinutes: [Function, Array],
        allowedSeconds: [Function, Array],
        disabled: Boolean,
        format: {
            type: String,
            default: 'ampm',
            validator(val) {
                return ['ampm', '24hr'].includes(val);
            },
        },
        min: String,
        max: String,
        readonly: Boolean,
        scrollable: Boolean,
        useSeconds: Boolean,
        value: null,
        ampmInTitle: Boolean,
    },
    data() {
        return {
            inputHour: null,
            inputMinute: null,
            inputSecond: null,
            lazyInputHour: null,
            lazyInputMinute: null,
            lazyInputSecond: null,
            period: 'am',
            selecting: SelectingTimes.Hour,
        };
    },
    computed: {
        selectingHour: {
            get() {
                return this.selecting === SelectingTimes.Hour;
            },
            set(v) {
                this.selecting = SelectingTimes.Hour;
            },
        },
        selectingMinute: {
            get() {
                return this.selecting === SelectingTimes.Minute;
            },
            set(v) {
                this.selecting = SelectingTimes.Minute;
            },
        },
        selectingSecond: {
            get() {
                return this.selecting === SelectingTimes.Second;
            },
            set(v) {
                this.selecting = SelectingTimes.Second;
            },
        },
        isAllowedHourCb() {
            let cb;
            if (this.allowedHours instanceof Array) {
                cb = (val) => this.allowedHours.includes(val);
            }
            else {
                cb = this.allowedHours;
            }
            if (!this.min && !this.max)
                return cb;
            const minHour = this.min ? Number(this.min.split(':')[0]) : 0;
            const maxHour = this.max ? Number(this.max.split(':')[0]) : 23;
            return (val) => {
                return val >= minHour * 1 &&
                    val <= maxHour * 1 &&
                    (!cb || cb(val));
            };
        },
        isAllowedMinuteCb() {
            let cb;
            const isHourAllowed = !this.isAllowedHourCb || this.inputHour === null || this.isAllowedHourCb(this.inputHour);
            if (this.allowedMinutes instanceof Array) {
                cb = (val) => this.allowedMinutes.includes(val);
            }
            else {
                cb = this.allowedMinutes;
            }
            if (!this.min && !this.max) {
                return isHourAllowed ? cb : () => false;
            }
            const [minHour, minMinute] = this.min ? this.min.split(':').map(Number) : [0, 0];
            const [maxHour, maxMinute] = this.max ? this.max.split(':').map(Number) : [23, 59];
            const minTime = minHour * 60 + minMinute * 1;
            const maxTime = maxHour * 60 + maxMinute * 1;
            return (val) => {
                const time = 60 * this.inputHour + val;
                return time >= minTime &&
                    time <= maxTime &&
                    isHourAllowed &&
                    (!cb || cb(val));
            };
        },
        isAllowedSecondCb() {
            let cb;
            const isHourAllowed = !this.isAllowedHourCb || this.inputHour === null || this.isAllowedHourCb(this.inputHour);
            const isMinuteAllowed = isHourAllowed &&
                (!this.isAllowedMinuteCb ||
                    this.inputMinute === null ||
                    this.isAllowedMinuteCb(this.inputMinute));
            if (this.allowedSeconds instanceof Array) {
                cb = (val) => this.allowedSeconds.includes(val);
            }
            else {
                cb = this.allowedSeconds;
            }
            if (!this.min && !this.max) {
                return isMinuteAllowed ? cb : () => false;
            }
            const [minHour, minMinute, minSecond] = this.min ? this.min.split(':').map(Number) : [0, 0, 0];
            const [maxHour, maxMinute, maxSecond] = this.max ? this.max.split(':').map(Number) : [23, 59, 59];
            const minTime = minHour * 3600 + minMinute * 60 + (minSecond || 0) * 1;
            const maxTime = maxHour * 3600 + maxMinute * 60 + (maxSecond || 0) * 1;
            return (val) => {
                const time = 3600 * this.inputHour + 60 * this.inputMinute + val;
                return time >= minTime &&
                    time <= maxTime &&
                    isMinuteAllowed &&
                    (!cb || cb(val));
            };
        },
        isAmPm() {
            return this.format === 'ampm';
        },
    },
    watch: {
        value: 'setInputData',
    },
    mounted() {
        this.setInputData(this.value);
        this.$on('update:period', this.setPeriod);
    },
    methods: {
        genValue() {
            if (this.inputHour != null && this.inputMinute != null && (!this.useSeconds || this.inputSecond != null)) {
                return `${pad(this.inputHour)}:${pad(this.inputMinute)}` + (this.useSeconds ? `:${pad(this.inputSecond)}` : '');
            }
            return null;
        },
        emitValue() {
            const value = this.genValue();
            if (value !== null)
                this.$emit('input', value);
        },
        setPeriod(period) {
            this.period = period;
            if (this.inputHour != null) {
                const newHour = this.inputHour + (period === 'am' ? -12 : 12);
                this.inputHour = this.firstAllowed('hour', newHour);
                this.emitValue();
            }
        },
        setInputData(value) {
            if (value == null || value === '') {
                this.inputHour = null;
                this.inputMinute = null;
                this.inputSecond = null;
            }
            else if (value instanceof Date) {
                this.inputHour = value.getHours();
                this.inputMinute = value.getMinutes();
                this.inputSecond = value.getSeconds();
            }
            else {
                const [, hour, minute, , second, period] = value.trim().toLowerCase().match(/^(\d+):(\d+)(:(\d+))?([ap]m)?$/) || new Array(6);
                this.inputHour = period ? this.convert12to24(parseInt(hour, 10), period) : parseInt(hour, 10);
                this.inputMinute = parseInt(minute, 10);
                this.inputSecond = parseInt(second || 0, 10);
            }
            this.period = (this.inputHour == null || this.inputHour < 12) ? 'am' : 'pm';
        },
        convert24to12(hour) {
            return hour ? ((hour - 1) % 12 + 1) : 12;
        },
        convert12to24(hour, period) {
            return hour % 12 + (period === 'pm' ? 12 : 0);
        },
        onInput(value) {
            if (this.selecting === SelectingTimes.Hour) {
                this.inputHour = this.isAmPm ? this.convert12to24(value, this.period) : value;
            }
            else if (this.selecting === SelectingTimes.Minute) {
                this.inputMinute = value;
            }
            else {
                this.inputSecond = value;
            }
            this.emitValue();
        },
        onChange(value) {
            this.$emit(`click:${selectingNames[this.selecting]}`, value);
            const emitChange = this.selecting === (this.useSeconds ? SelectingTimes.Second : SelectingTimes.Minute);
            if (this.selecting === SelectingTimes.Hour) {
                this.selecting = SelectingTimes.Minute;
            }
            else if (this.useSeconds && this.selecting === SelectingTimes.Minute) {
                this.selecting = SelectingTimes.Second;
            }
            if (this.inputHour === this.lazyInputHour &&
                this.inputMinute === this.lazyInputMinute &&
                (!this.useSeconds || this.inputSecond === this.lazyInputSecond))
                return;
            const time = this.genValue();
            if (time === null)
                return;
            this.lazyInputHour = this.inputHour;
            this.lazyInputMinute = this.inputMinute;
            this.useSeconds && (this.lazyInputSecond = this.inputSecond);
            emitChange && this.$emit('change', time);
        },
        firstAllowed(type, value) {
            const allowedFn = type === 'hour' ? this.isAllowedHourCb : (type === 'minute' ? this.isAllowedMinuteCb : this.isAllowedSecondCb);
            if (!allowedFn)
                return value;
            // TODO: clean up
            const range = type === 'minute'
                ? range60
                : (type === 'second'
                    ? range60
                    : (this.isAmPm
                        ? (value < 12
                            ? rangeHours12am
                            : rangeHours12pm)
                        : rangeHours24));
            const first = range.find(v => allowedFn((v + value) % range.length + range[0]));
            return ((first || 0) + value) % range.length + range[0];
        },
        genClock() {
            return this.$createElement(VTimePickerClock, {
                props: {
                    allowedValues: this.selecting === SelectingTimes.Hour
                        ? this.isAllowedHourCb
                        : (this.selecting === SelectingTimes.Minute
                            ? this.isAllowedMinuteCb
                            : this.isAllowedSecondCb),
                    color: this.color,
                    dark: this.dark,
                    disabled: this.disabled,
                    double: this.selecting === SelectingTimes.Hour && !this.isAmPm,
                    format: this.selecting === SelectingTimes.Hour
                        ? (this.isAmPm ? this.convert24to12 : (val) => val)
                        : (val) => pad(val, 2),
                    light: this.light,
                    max: this.selecting === SelectingTimes.Hour ? (this.isAmPm && this.period === 'am' ? 11 : 23) : 59,
                    min: this.selecting === SelectingTimes.Hour && this.isAmPm && this.period === 'pm' ? 12 : 0,
                    readonly: this.readonly,
                    scrollable: this.scrollable,
                    size: Number(this.width) - ((!this.fullWidth && this.landscape) ? 80 : 20),
                    step: this.selecting === SelectingTimes.Hour ? 1 : 5,
                    value: this.selecting === SelectingTimes.Hour
                        ? this.inputHour
                        : (this.selecting === SelectingTimes.Minute
                            ? this.inputMinute
                            : this.inputSecond),
                },
                on: {
                    input: this.onInput,
                    change: this.onChange,
                },
                ref: 'clock',
            });
        },
        genClockAmPm() {
            return this.$createElement('div', this.setTextColor(this.color || 'primary', {
                staticClass: 'v-time-picker-clock__ampm',
            }), [
                this.genPickerButton('period', 'am', this.$vuetify.lang.t('$vuetify.timePicker.am'), this.disabled || this.readonly),
                this.genPickerButton('period', 'pm', this.$vuetify.lang.t('$vuetify.timePicker.pm'), this.disabled || this.readonly),
            ]);
        },
        genPickerBody() {
            return this.$createElement('div', {
                staticClass: 'v-time-picker-clock__container',
                key: this.selecting,
            }, [
                !this.ampmInTitle && this.isAmPm && this.genClockAmPm(),
                this.genClock(),
            ]);
        },
        genPickerTitle() {
            return this.$createElement(VTimePickerTitle, {
                props: {
                    ampm: this.isAmPm,
                    ampmReadonly: this.isAmPm && !this.ampmInTitle,
                    disabled: this.disabled,
                    hour: this.inputHour,
                    minute: this.inputMinute,
                    second: this.inputSecond,
                    period: this.period,
                    readonly: this.readonly,
                    useSeconds: this.useSeconds,
                    selecting: this.selecting,
                },
                on: {
                    'update:selecting': (value) => (this.selecting = value),
                    'update:period': (period) => this.$emit('update:period', period),
                },
                ref: 'title',
                slot: 'title',
            });
        },
    },
    render() {
        return this.genPicker('v-picker--time');
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRpbWVQaWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WVGltZVBpY2tlci9WVGltZVBpY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhO0FBQ2IsT0FBTyxnQkFBZ0IsTUFBTSxvQkFBb0IsQ0FBQTtBQUNqRCxPQUFPLGdCQUFnQixNQUFNLG9CQUFvQixDQUFBO0FBRWpELFNBQVM7QUFDVCxPQUFPLE1BQU0sTUFBTSxxQkFBcUIsQ0FBQTtBQUN4QyxPQUFPLFlBQVksTUFBTSw0QkFBNEIsQ0FBQTtBQUVyRCxRQUFRO0FBQ1IsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQ2hELE9BQU8sR0FBRyxNQUFNLHlCQUF5QixDQUFBO0FBQ3pDLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFBO0FBSXRDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUVqRCxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDcEMsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3RDLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7QUFDdEQsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQy9CLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQTtBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUE7QUFLekIsZUFBZSxNQUFNLENBQ25CLE1BQU0sRUFDTixZQUFZO0FBQ2Qsb0JBQW9CO0NBQ25CLENBQUMsTUFBTSxDQUFDO0lBQ1AsSUFBSSxFQUFFLGVBQWU7SUFFckIs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LEtBQUssRUFBRTtvQkFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07b0JBQ2pCLFlBQVksRUFBRSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7b0JBQzlDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtvQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTO29CQUNwQixNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVc7b0JBQ3hCLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVztvQkFDeEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO29CQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3ZCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtvQkFDM0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO2lCQUMxQjtnQkFDRCxFQUFFLEVBQUU7b0JBQ0Ysa0JBQWtCLEVBQUUsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO29CQUNsRSxlQUFlLEVBQUUsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztpQkFDekU7Z0JBQ0QsR0FBRyxFQUFFLE9BQU87Z0JBQ1osSUFBSSxFQUFFLE9BQU87YUFDZCxDQUFDLENBQUE7UUFDSixDQUFDO0tBQ0Y7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDekMsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvbXBvbmVudHNcbmltcG9ydCBWVGltZVBpY2tlclRpdGxlIGZyb20gJy4vVlRpbWVQaWNrZXJUaXRsZSdcbmltcG9ydCBWVGltZVBpY2tlckNsb2NrIGZyb20gJy4vVlRpbWVQaWNrZXJDbG9jaydcblxuLy8gTWl4aW5zXG5pbXBvcnQgUGlja2VyIGZyb20gJy4uLy4uL21peGlucy9waWNrZXInXG5pbXBvcnQgUGlja2VyQnV0dG9uIGZyb20gJy4uLy4uL21peGlucy9waWNrZXItYnV0dG9uJ1xuXG4vLyBVdGlsc1xuaW1wb3J0IHsgY3JlYXRlUmFuZ2UgfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5pbXBvcnQgcGFkIGZyb20gJy4uL1ZEYXRlUGlja2VyL3V0aWwvcGFkJ1xuaW1wb3J0IG1peGlucyBmcm9tICcuLi8uLi91dGlsL21peGlucydcblxuLy8gVHlwZXNcbmltcG9ydCB7IFZOb2RlLCBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IFNlbGVjdGluZ1RpbWVzIH0gZnJvbSAnLi9TZWxlY3RpbmdUaW1lcydcblxuY29uc3QgcmFuZ2VIb3VyczI0ID0gY3JlYXRlUmFuZ2UoMjQpXG5jb25zdCByYW5nZUhvdXJzMTJhbSA9IGNyZWF0ZVJhbmdlKDEyKVxuY29uc3QgcmFuZ2VIb3VyczEycG0gPSByYW5nZUhvdXJzMTJhbS5tYXAodiA9PiB2ICsgMTIpXG5jb25zdCByYW5nZTYwID0gY3JlYXRlUmFuZ2UoNjApXG5jb25zdCBzZWxlY3RpbmdOYW1lcyA9IHsgMTogJ2hvdXInLCAyOiAnbWludXRlJywgMzogJ3NlY29uZCcgfVxuZXhwb3J0IHsgU2VsZWN0aW5nVGltZXMgfVxuXG50eXBlIFBlcmlvZCA9ICdhbScgfCAncG0nXG50eXBlIEFsbG93RnVuY3Rpb24gPSAodmFsOiBudW1iZXIpID0+IGJvb2xlYW5cblxuZXhwb3J0IGRlZmF1bHQgbWl4aW5zKFxuICBQaWNrZXIsXG4gIFBpY2tlckJ1dHRvblxuLyogQHZ1ZS9jb21wb25lbnQgKi9cbikuZXh0ZW5kKHtcbiAgbmFtZTogJ3YtdGltZS1waWNrZXInLFxuXG4gIHByb3BzOiB7XG4gICAgYWxsb3dlZEhvdXJzOiBbRnVuY3Rpb24sIEFycmF5XSBhcyBQcm9wVHlwZTxBbGxvd0Z1bmN0aW9uIHwgbnVtYmVyW10+LFxuICAgIGFsbG93ZWRNaW51dGVzOiBbRnVuY3Rpb24sIEFycmF5XSBhcyBQcm9wVHlwZTxBbGxvd0Z1bmN0aW9uIHwgbnVtYmVyW10+LFxuICAgIGFsbG93ZWRTZWNvbmRzOiBbRnVuY3Rpb24sIEFycmF5XSBhcyBQcm9wVHlwZTxBbGxvd0Z1bmN0aW9uIHwgbnVtYmVyW10+LFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGZvcm1hdDoge1xuICAgICAgdHlwZTogU3RyaW5nIGFzIFByb3BUeXBlPCdhbXBtJyB8ICcyNGhyJz4sXG4gICAgICBkZWZhdWx0OiAnYW1wbScsXG4gICAgICB2YWxpZGF0b3IgKHZhbCkge1xuICAgICAgICByZXR1cm4gWydhbXBtJywgJzI0aHInXS5pbmNsdWRlcyh2YWwpXG4gICAgICB9LFxuICAgIH0sXG4gICAgbWluOiBTdHJpbmcsXG4gICAgbWF4OiBTdHJpbmcsXG4gICAgcmVhZG9ubHk6IEJvb2xlYW4sXG4gICAgc2Nyb2xsYWJsZTogQm9vbGVhbixcbiAgICB1c2VTZWNvbmRzOiBCb29sZWFuLFxuICAgIHZhbHVlOiBudWxsIGFzIGFueSBhcyBQcm9wVHlwZTxhbnk+LFxuICAgIGFtcG1JblRpdGxlOiBCb29sZWFuLFxuICB9LFxuXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbnB1dEhvdXI6IG51bGwgYXMgbnVtYmVyIHwgbnVsbCxcbiAgICAgIGlucHV0TWludXRlOiBudWxsIGFzIG51bWJlciB8IG51bGwsXG4gICAgICBpbnB1dFNlY29uZDogbnVsbCBhcyBudW1iZXIgfCBudWxsLFxuICAgICAgbGF6eUlucHV0SG91cjogbnVsbCBhcyBudW1iZXIgfCBudWxsLFxuICAgICAgbGF6eUlucHV0TWludXRlOiBudWxsIGFzIG51bWJlciB8IG51bGwsXG4gICAgICBsYXp5SW5wdXRTZWNvbmQ6IG51bGwgYXMgbnVtYmVyIHwgbnVsbCxcbiAgICAgIHBlcmlvZDogJ2FtJyBhcyBQZXJpb2QsXG4gICAgICBzZWxlY3Rpbmc6IFNlbGVjdGluZ1RpbWVzLkhvdXIsXG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgc2VsZWN0aW5nSG91cjoge1xuICAgICAgZ2V0ICgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW5nID09PSBTZWxlY3RpbmdUaW1lcy5Ib3VyXG4gICAgICB9LFxuICAgICAgc2V0ICh2OiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW5nID0gU2VsZWN0aW5nVGltZXMuSG91clxuICAgICAgfSxcbiAgICB9LFxuICAgIHNlbGVjdGluZ01pbnV0ZToge1xuICAgICAgZ2V0ICgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW5nID09PSBTZWxlY3RpbmdUaW1lcy5NaW51dGVcbiAgICAgIH0sXG4gICAgICBzZXQgKHY6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RpbmcgPSBTZWxlY3RpbmdUaW1lcy5NaW51dGVcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzZWxlY3RpbmdTZWNvbmQ6IHtcbiAgICAgIGdldCAoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGluZyA9PT0gU2VsZWN0aW5nVGltZXMuU2Vjb25kXG4gICAgICB9LFxuICAgICAgc2V0ICh2OiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW5nID0gU2VsZWN0aW5nVGltZXMuU2Vjb25kXG4gICAgICB9LFxuICAgIH0sXG4gICAgaXNBbGxvd2VkSG91ckNiICgpOiBBbGxvd0Z1bmN0aW9uIHtcbiAgICAgIGxldCBjYjogQWxsb3dGdW5jdGlvblxuXG4gICAgICBpZiAodGhpcy5hbGxvd2VkSG91cnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBjYiA9ICh2YWw6IG51bWJlcikgPT4gKHRoaXMuYWxsb3dlZEhvdXJzIGFzIG51bWJlcltdKS5pbmNsdWRlcyh2YWwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYiA9IHRoaXMuYWxsb3dlZEhvdXJzXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5taW4gJiYgIXRoaXMubWF4KSByZXR1cm4gY2JcblxuICAgICAgY29uc3QgbWluSG91ciA9IHRoaXMubWluID8gTnVtYmVyKHRoaXMubWluLnNwbGl0KCc6JylbMF0pIDogMFxuICAgICAgY29uc3QgbWF4SG91ciA9IHRoaXMubWF4ID8gTnVtYmVyKHRoaXMubWF4LnNwbGl0KCc6JylbMF0pIDogMjNcblxuICAgICAgcmV0dXJuICh2YWw6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gdmFsID49IG1pbkhvdXIgKiAxICYmXG4gICAgICAgICAgdmFsIDw9IG1heEhvdXIgKiAxICYmXG4gICAgICAgICAgKCFjYiB8fCBjYih2YWwpKVxuICAgICAgfVxuICAgIH0sXG4gICAgaXNBbGxvd2VkTWludXRlQ2IgKCk6IEFsbG93RnVuY3Rpb24ge1xuICAgICAgbGV0IGNiOiBBbGxvd0Z1bmN0aW9uXG5cbiAgICAgIGNvbnN0IGlzSG91ckFsbG93ZWQgPSAhdGhpcy5pc0FsbG93ZWRIb3VyQ2IgfHwgdGhpcy5pbnB1dEhvdXIgPT09IG51bGwgfHwgdGhpcy5pc0FsbG93ZWRIb3VyQ2IodGhpcy5pbnB1dEhvdXIpXG4gICAgICBpZiAodGhpcy5hbGxvd2VkTWludXRlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGNiID0gKHZhbDogbnVtYmVyKSA9PiAodGhpcy5hbGxvd2VkTWludXRlcyBhcyBudW1iZXJbXSkuaW5jbHVkZXModmFsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IgPSB0aGlzLmFsbG93ZWRNaW51dGVzXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5taW4gJiYgIXRoaXMubWF4KSB7XG4gICAgICAgIHJldHVybiBpc0hvdXJBbGxvd2VkID8gY2IgOiAoKSA9PiBmYWxzZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBbbWluSG91ciwgbWluTWludXRlXSA9IHRoaXMubWluID8gdGhpcy5taW4uc3BsaXQoJzonKS5tYXAoTnVtYmVyKSA6IFswLCAwXVxuICAgICAgY29uc3QgW21heEhvdXIsIG1heE1pbnV0ZV0gPSB0aGlzLm1heCA/IHRoaXMubWF4LnNwbGl0KCc6JykubWFwKE51bWJlcikgOiBbMjMsIDU5XVxuICAgICAgY29uc3QgbWluVGltZSA9IG1pbkhvdXIgKiA2MCArIG1pbk1pbnV0ZSAqIDFcbiAgICAgIGNvbnN0IG1heFRpbWUgPSBtYXhIb3VyICogNjAgKyBtYXhNaW51dGUgKiAxXG5cbiAgICAgIHJldHVybiAodmFsOiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgdGltZSA9IDYwICogdGhpcy5pbnB1dEhvdXIhICsgdmFsXG4gICAgICAgIHJldHVybiB0aW1lID49IG1pblRpbWUgJiZcbiAgICAgICAgICB0aW1lIDw9IG1heFRpbWUgJiZcbiAgICAgICAgICBpc0hvdXJBbGxvd2VkICYmXG4gICAgICAgICAgKCFjYiB8fCBjYih2YWwpKVxuICAgICAgfVxuICAgIH0sXG4gICAgaXNBbGxvd2VkU2Vjb25kQ2IgKCk6IEFsbG93RnVuY3Rpb24ge1xuICAgICAgbGV0IGNiOiBBbGxvd0Z1bmN0aW9uXG5cbiAgICAgIGNvbnN0IGlzSG91ckFsbG93ZWQgPSAhdGhpcy5pc0FsbG93ZWRIb3VyQ2IgfHwgdGhpcy5pbnB1dEhvdXIgPT09IG51bGwgfHwgdGhpcy5pc0FsbG93ZWRIb3VyQ2IodGhpcy5pbnB1dEhvdXIpXG4gICAgICBjb25zdCBpc01pbnV0ZUFsbG93ZWQgPSBpc0hvdXJBbGxvd2VkICYmXG4gICAgICAgICghdGhpcy5pc0FsbG93ZWRNaW51dGVDYiB8fFxuICAgICAgICAgIHRoaXMuaW5wdXRNaW51dGUgPT09IG51bGwgfHxcbiAgICAgICAgICB0aGlzLmlzQWxsb3dlZE1pbnV0ZUNiKHRoaXMuaW5wdXRNaW51dGUpXG4gICAgICAgIClcblxuICAgICAgaWYgKHRoaXMuYWxsb3dlZFNlY29uZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBjYiA9ICh2YWw6IG51bWJlcikgPT4gKHRoaXMuYWxsb3dlZFNlY29uZHMgYXMgbnVtYmVyW10pLmluY2x1ZGVzKHZhbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiID0gdGhpcy5hbGxvd2VkU2Vjb25kc1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMubWluICYmICF0aGlzLm1heCkge1xuICAgICAgICByZXR1cm4gaXNNaW51dGVBbGxvd2VkID8gY2IgOiAoKSA9PiBmYWxzZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBbbWluSG91ciwgbWluTWludXRlLCBtaW5TZWNvbmRdID0gdGhpcy5taW4gPyB0aGlzLm1pbi5zcGxpdCgnOicpLm1hcChOdW1iZXIpIDogWzAsIDAsIDBdXG4gICAgICBjb25zdCBbbWF4SG91ciwgbWF4TWludXRlLCBtYXhTZWNvbmRdID0gdGhpcy5tYXggPyB0aGlzLm1heC5zcGxpdCgnOicpLm1hcChOdW1iZXIpIDogWzIzLCA1OSwgNTldXG4gICAgICBjb25zdCBtaW5UaW1lID0gbWluSG91ciAqIDM2MDAgKyBtaW5NaW51dGUgKiA2MCArIChtaW5TZWNvbmQgfHwgMCkgKiAxXG4gICAgICBjb25zdCBtYXhUaW1lID0gbWF4SG91ciAqIDM2MDAgKyBtYXhNaW51dGUgKiA2MCArIChtYXhTZWNvbmQgfHwgMCkgKiAxXG5cbiAgICAgIHJldHVybiAodmFsOiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgdGltZSA9IDM2MDAgKiB0aGlzLmlucHV0SG91ciEgKyA2MCAqIHRoaXMuaW5wdXRNaW51dGUhICsgdmFsXG4gICAgICAgIHJldHVybiB0aW1lID49IG1pblRpbWUgJiZcbiAgICAgICAgICB0aW1lIDw9IG1heFRpbWUgJiZcbiAgICAgICAgICBpc01pbnV0ZUFsbG93ZWQgJiZcbiAgICAgICAgICAoIWNiIHx8IGNiKHZhbCkpXG4gICAgICB9XG4gICAgfSxcbiAgICBpc0FtUG0gKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0ID09PSAnYW1wbSdcbiAgICB9LFxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgdmFsdWU6ICdzZXRJbnB1dERhdGEnLFxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuc2V0SW5wdXREYXRhKHRoaXMudmFsdWUpXG4gICAgdGhpcy4kb24oJ3VwZGF0ZTpwZXJpb2QnLCB0aGlzLnNldFBlcmlvZClcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgZ2VuVmFsdWUgKCkge1xuICAgICAgaWYgKHRoaXMuaW5wdXRIb3VyICE9IG51bGwgJiYgdGhpcy5pbnB1dE1pbnV0ZSAhPSBudWxsICYmICghdGhpcy51c2VTZWNvbmRzIHx8IHRoaXMuaW5wdXRTZWNvbmQgIT0gbnVsbCkpIHtcbiAgICAgICAgcmV0dXJuIGAke3BhZCh0aGlzLmlucHV0SG91cil9OiR7cGFkKHRoaXMuaW5wdXRNaW51dGUpfWAgKyAodGhpcy51c2VTZWNvbmRzID8gYDoke3BhZCh0aGlzLmlucHV0U2Vjb25kISl9YCA6ICcnKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgZW1pdFZhbHVlICgpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZW5WYWx1ZSgpXG4gICAgICBpZiAodmFsdWUgIT09IG51bGwpIHRoaXMuJGVtaXQoJ2lucHV0JywgdmFsdWUpXG4gICAgfSxcbiAgICBzZXRQZXJpb2QgKHBlcmlvZDogUGVyaW9kKSB7XG4gICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZFxuICAgICAgaWYgKHRoaXMuaW5wdXRIb3VyICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbmV3SG91ciA9IHRoaXMuaW5wdXRIb3VyISArIChwZXJpb2QgPT09ICdhbScgPyAtMTIgOiAxMilcbiAgICAgICAgdGhpcy5pbnB1dEhvdXIgPSB0aGlzLmZpcnN0QWxsb3dlZCgnaG91cicsIG5ld0hvdXIpXG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKClcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldElucHV0RGF0YSAodmFsdWU6IHN0cmluZyB8IG51bGwgfCBEYXRlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgdGhpcy5pbnB1dEhvdXIgPSBudWxsXG4gICAgICAgIHRoaXMuaW5wdXRNaW51dGUgPSBudWxsXG4gICAgICAgIHRoaXMuaW5wdXRTZWNvbmQgPSBudWxsXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICB0aGlzLmlucHV0SG91ciA9IHZhbHVlLmdldEhvdXJzKClcbiAgICAgICAgdGhpcy5pbnB1dE1pbnV0ZSA9IHZhbHVlLmdldE1pbnV0ZXMoKVxuICAgICAgICB0aGlzLmlucHV0U2Vjb25kID0gdmFsdWUuZ2V0U2Vjb25kcygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBbLCBob3VyLCBtaW51dGUsICwgc2Vjb25kLCBwZXJpb2RdID0gdmFsdWUudHJpbSgpLnRvTG93ZXJDYXNlKCkubWF0Y2goL14oXFxkKyk6KFxcZCspKDooXFxkKykpPyhbYXBdbSk/JC8pIHx8IG5ldyBBcnJheSg2KVxuXG4gICAgICAgIHRoaXMuaW5wdXRIb3VyID0gcGVyaW9kID8gdGhpcy5jb252ZXJ0MTJ0bzI0KHBhcnNlSW50KGhvdXIsIDEwKSwgcGVyaW9kIGFzIFBlcmlvZCkgOiBwYXJzZUludChob3VyLCAxMClcbiAgICAgICAgdGhpcy5pbnB1dE1pbnV0ZSA9IHBhcnNlSW50KG1pbnV0ZSwgMTApXG4gICAgICAgIHRoaXMuaW5wdXRTZWNvbmQgPSBwYXJzZUludChzZWNvbmQgfHwgMCwgMTApXG4gICAgICB9XG5cbiAgICAgIHRoaXMucGVyaW9kID0gKHRoaXMuaW5wdXRIb3VyID09IG51bGwgfHwgdGhpcy5pbnB1dEhvdXIgPCAxMikgPyAnYW0nIDogJ3BtJ1xuICAgIH0sXG4gICAgY29udmVydDI0dG8xMiAoaG91cjogbnVtYmVyKSB7XG4gICAgICByZXR1cm4gaG91ciA/ICgoaG91ciAtIDEpICUgMTIgKyAxKSA6IDEyXG4gICAgfSxcbiAgICBjb252ZXJ0MTJ0bzI0IChob3VyOiBudW1iZXIsIHBlcmlvZDogUGVyaW9kKSB7XG4gICAgICByZXR1cm4gaG91ciAlIDEyICsgKHBlcmlvZCA9PT0gJ3BtJyA/IDEyIDogMClcbiAgICB9LFxuICAgIG9uSW5wdXQgKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGluZyA9PT0gU2VsZWN0aW5nVGltZXMuSG91cikge1xuICAgICAgICB0aGlzLmlucHV0SG91ciA9IHRoaXMuaXNBbVBtID8gdGhpcy5jb252ZXJ0MTJ0bzI0KHZhbHVlLCB0aGlzLnBlcmlvZCkgOiB2YWx1ZVxuICAgICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGluZyA9PT0gU2VsZWN0aW5nVGltZXMuTWludXRlKSB7XG4gICAgICAgIHRoaXMuaW5wdXRNaW51dGUgPSB2YWx1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnB1dFNlY29uZCA9IHZhbHVlXG4gICAgICB9XG4gICAgICB0aGlzLmVtaXRWYWx1ZSgpXG4gICAgfSxcbiAgICBvbkNoYW5nZSAodmFsdWU6IG51bWJlcikge1xuICAgICAgdGhpcy4kZW1pdChgY2xpY2s6JHtzZWxlY3RpbmdOYW1lc1t0aGlzLnNlbGVjdGluZ119YCwgdmFsdWUpXG5cbiAgICAgIGNvbnN0IGVtaXRDaGFuZ2UgPSB0aGlzLnNlbGVjdGluZyA9PT0gKHRoaXMudXNlU2Vjb25kcyA/IFNlbGVjdGluZ1RpbWVzLlNlY29uZCA6IFNlbGVjdGluZ1RpbWVzLk1pbnV0ZSlcblxuICAgICAgaWYgKHRoaXMuc2VsZWN0aW5nID09PSBTZWxlY3RpbmdUaW1lcy5Ib3VyKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW5nID0gU2VsZWN0aW5nVGltZXMuTWludXRlXG4gICAgICB9IGVsc2UgaWYgKHRoaXMudXNlU2Vjb25kcyAmJiB0aGlzLnNlbGVjdGluZyA9PT0gU2VsZWN0aW5nVGltZXMuTWludXRlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW5nID0gU2VsZWN0aW5nVGltZXMuU2Vjb25kXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlucHV0SG91ciA9PT0gdGhpcy5sYXp5SW5wdXRIb3VyICYmXG4gICAgICAgIHRoaXMuaW5wdXRNaW51dGUgPT09IHRoaXMubGF6eUlucHV0TWludXRlICYmXG4gICAgICAgICghdGhpcy51c2VTZWNvbmRzIHx8IHRoaXMuaW5wdXRTZWNvbmQgPT09IHRoaXMubGF6eUlucHV0U2Vjb25kKVxuICAgICAgKSByZXR1cm5cblxuICAgICAgY29uc3QgdGltZSA9IHRoaXMuZ2VuVmFsdWUoKVxuICAgICAgaWYgKHRpbWUgPT09IG51bGwpIHJldHVyblxuXG4gICAgICB0aGlzLmxhenlJbnB1dEhvdXIgPSB0aGlzLmlucHV0SG91clxuICAgICAgdGhpcy5sYXp5SW5wdXRNaW51dGUgPSB0aGlzLmlucHV0TWludXRlXG4gICAgICB0aGlzLnVzZVNlY29uZHMgJiYgKHRoaXMubGF6eUlucHV0U2Vjb25kID0gdGhpcy5pbnB1dFNlY29uZClcblxuICAgICAgZW1pdENoYW5nZSAmJiB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aW1lKVxuICAgIH0sXG4gICAgZmlyc3RBbGxvd2VkICh0eXBlOiAnaG91cicgfCAnbWludXRlJyB8ICdzZWNvbmQnLCB2YWx1ZTogbnVtYmVyKSB7XG4gICAgICBjb25zdCBhbGxvd2VkRm4gPSB0eXBlID09PSAnaG91cicgPyB0aGlzLmlzQWxsb3dlZEhvdXJDYiA6ICh0eXBlID09PSAnbWludXRlJyA/IHRoaXMuaXNBbGxvd2VkTWludXRlQ2IgOiB0aGlzLmlzQWxsb3dlZFNlY29uZENiKVxuICAgICAgaWYgKCFhbGxvd2VkRm4pIHJldHVybiB2YWx1ZVxuXG4gICAgICAvLyBUT0RPOiBjbGVhbiB1cFxuICAgICAgY29uc3QgcmFuZ2UgPSB0eXBlID09PSAnbWludXRlJ1xuICAgICAgICA/IHJhbmdlNjBcbiAgICAgICAgOiAodHlwZSA9PT0gJ3NlY29uZCdcbiAgICAgICAgICA/IHJhbmdlNjBcbiAgICAgICAgICA6ICh0aGlzLmlzQW1QbVxuICAgICAgICAgICAgPyAodmFsdWUgPCAxMlxuICAgICAgICAgICAgICA/IHJhbmdlSG91cnMxMmFtXG4gICAgICAgICAgICAgIDogcmFuZ2VIb3VyczEycG0pXG4gICAgICAgICAgICA6IHJhbmdlSG91cnMyNCkpXG4gICAgICBjb25zdCBmaXJzdCA9IHJhbmdlLmZpbmQodiA9PiBhbGxvd2VkRm4oKHYgKyB2YWx1ZSkgJSByYW5nZS5sZW5ndGggKyByYW5nZVswXSkpXG4gICAgICByZXR1cm4gKChmaXJzdCB8fCAwKSArIHZhbHVlKSAlIHJhbmdlLmxlbmd0aCArIHJhbmdlWzBdXG4gICAgfSxcbiAgICBnZW5DbG9jayAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudChWVGltZVBpY2tlckNsb2NrLCB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgYWxsb3dlZFZhbHVlczpcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW5nID09PSBTZWxlY3RpbmdUaW1lcy5Ib3VyXG4gICAgICAgICAgICAgID8gdGhpcy5pc0FsbG93ZWRIb3VyQ2JcbiAgICAgICAgICAgICAgOiAodGhpcy5zZWxlY3RpbmcgPT09IFNlbGVjdGluZ1RpbWVzLk1pbnV0ZVxuICAgICAgICAgICAgICAgID8gdGhpcy5pc0FsbG93ZWRNaW51dGVDYlxuICAgICAgICAgICAgICAgIDogdGhpcy5pc0FsbG93ZWRTZWNvbmRDYiksXG4gICAgICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgICAgICAgZGFyazogdGhpcy5kYXJrLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkLFxuICAgICAgICAgIGRvdWJsZTogdGhpcy5zZWxlY3RpbmcgPT09IFNlbGVjdGluZ1RpbWVzLkhvdXIgJiYgIXRoaXMuaXNBbVBtLFxuICAgICAgICAgIGZvcm1hdDogdGhpcy5zZWxlY3RpbmcgPT09IFNlbGVjdGluZ1RpbWVzLkhvdXJcbiAgICAgICAgICAgID8gKHRoaXMuaXNBbVBtID8gdGhpcy5jb252ZXJ0MjR0bzEyIDogKHZhbDogbnVtYmVyKSA9PiB2YWwpXG4gICAgICAgICAgICA6ICh2YWw6IG51bWJlcikgPT4gcGFkKHZhbCwgMiksXG4gICAgICAgICAgbGlnaHQ6IHRoaXMubGlnaHQsXG4gICAgICAgICAgbWF4OiB0aGlzLnNlbGVjdGluZyA9PT0gU2VsZWN0aW5nVGltZXMuSG91ciA/ICh0aGlzLmlzQW1QbSAmJiB0aGlzLnBlcmlvZCA9PT0gJ2FtJyA/IDExIDogMjMpIDogNTksXG4gICAgICAgICAgbWluOiB0aGlzLnNlbGVjdGluZyA9PT0gU2VsZWN0aW5nVGltZXMuSG91ciAmJiB0aGlzLmlzQW1QbSAmJiB0aGlzLnBlcmlvZCA9PT0gJ3BtJyA/IDEyIDogMCxcbiAgICAgICAgICByZWFkb25seTogdGhpcy5yZWFkb25seSxcbiAgICAgICAgICBzY3JvbGxhYmxlOiB0aGlzLnNjcm9sbGFibGUsXG4gICAgICAgICAgc2l6ZTogTnVtYmVyKHRoaXMud2lkdGgpIC0gKCghdGhpcy5mdWxsV2lkdGggJiYgdGhpcy5sYW5kc2NhcGUpID8gODAgOiAyMCksXG4gICAgICAgICAgc3RlcDogdGhpcy5zZWxlY3RpbmcgPT09IFNlbGVjdGluZ1RpbWVzLkhvdXIgPyAxIDogNSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5zZWxlY3RpbmcgPT09IFNlbGVjdGluZ1RpbWVzLkhvdXJcbiAgICAgICAgICAgID8gdGhpcy5pbnB1dEhvdXJcbiAgICAgICAgICAgIDogKHRoaXMuc2VsZWN0aW5nID09PSBTZWxlY3RpbmdUaW1lcy5NaW51dGVcbiAgICAgICAgICAgICAgPyB0aGlzLmlucHV0TWludXRlXG4gICAgICAgICAgICAgIDogdGhpcy5pbnB1dFNlY29uZCksXG4gICAgICAgIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgaW5wdXQ6IHRoaXMub25JbnB1dCxcbiAgICAgICAgICBjaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICAgIH0sXG4gICAgICAgIHJlZjogJ2Nsb2NrJyxcbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZW5DbG9ja0FtUG0gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0VGV4dENvbG9yKHRoaXMuY29sb3IgfHwgJ3ByaW1hcnknLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiAndi10aW1lLXBpY2tlci1jbG9ja19fYW1wbScsXG4gICAgICB9KSwgW1xuICAgICAgICB0aGlzLmdlblBpY2tlckJ1dHRvbigncGVyaW9kJywgJ2FtJywgdGhpcy4kdnVldGlmeS5sYW5nLnQoJyR2dWV0aWZ5LnRpbWVQaWNrZXIuYW0nKSwgdGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlYWRvbmx5KSxcbiAgICAgICAgdGhpcy5nZW5QaWNrZXJCdXR0b24oJ3BlcmlvZCcsICdwbScsIHRoaXMuJHZ1ZXRpZnkubGFuZy50KCckdnVldGlmeS50aW1lUGlja2VyLnBtJyksIHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkb25seSksXG4gICAgICBdKVxuICAgIH0sXG4gICAgZ2VuUGlja2VyQm9keSAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBzdGF0aWNDbGFzczogJ3YtdGltZS1waWNrZXItY2xvY2tfX2NvbnRhaW5lcicsXG4gICAgICAgIGtleTogdGhpcy5zZWxlY3RpbmcsXG4gICAgICB9LCBbXG4gICAgICAgICF0aGlzLmFtcG1JblRpdGxlICYmIHRoaXMuaXNBbVBtICYmIHRoaXMuZ2VuQ2xvY2tBbVBtKCksXG4gICAgICAgIHRoaXMuZ2VuQ2xvY2soKSxcbiAgICAgIF0pXG4gICAgfSxcbiAgICBnZW5QaWNrZXJUaXRsZSAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudChWVGltZVBpY2tlclRpdGxlLCB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgYW1wbTogdGhpcy5pc0FtUG0sXG4gICAgICAgICAgYW1wbVJlYWRvbmx5OiB0aGlzLmlzQW1QbSAmJiAhdGhpcy5hbXBtSW5UaXRsZSxcbiAgICAgICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgICBob3VyOiB0aGlzLmlucHV0SG91cixcbiAgICAgICAgICBtaW51dGU6IHRoaXMuaW5wdXRNaW51dGUsXG4gICAgICAgICAgc2Vjb25kOiB0aGlzLmlucHV0U2Vjb25kLFxuICAgICAgICAgIHBlcmlvZDogdGhpcy5wZXJpb2QsXG4gICAgICAgICAgcmVhZG9ubHk6IHRoaXMucmVhZG9ubHksXG4gICAgICAgICAgdXNlU2Vjb25kczogdGhpcy51c2VTZWNvbmRzLFxuICAgICAgICAgIHNlbGVjdGluZzogdGhpcy5zZWxlY3RpbmcsXG4gICAgICAgIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgJ3VwZGF0ZTpzZWxlY3RpbmcnOiAodmFsdWU6IDEgfCAyIHwgMykgPT4gKHRoaXMuc2VsZWN0aW5nID0gdmFsdWUpLFxuICAgICAgICAgICd1cGRhdGU6cGVyaW9kJzogKHBlcmlvZDogc3RyaW5nKSA9PiB0aGlzLiRlbWl0KCd1cGRhdGU6cGVyaW9kJywgcGVyaW9kKSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVmOiAndGl0bGUnLFxuICAgICAgICBzbG90OiAndGl0bGUnLFxuICAgICAgfSlcbiAgICB9LFxuICB9LFxuXG4gIHJlbmRlciAoKTogVk5vZGUge1xuICAgIHJldHVybiB0aGlzLmdlblBpY2tlcigndi1waWNrZXItLXRpbWUnKVxuICB9LFxufSlcbiJdfQ==