import './VDatePickerYears.sass';
// Mixins
import Colorable from '../../mixins/colorable';
import Localable from '../../mixins/localable';
// Utils
import { createItemTypeNativeListeners, createNativeLocaleFormatter, } from './util';
import { mergeListeners } from '../../util/mergeData';
import mixins from '../../util/mixins';
export default mixins(Colorable, Localable
/* @vue/component */
).extend({
    name: 'v-date-picker-years',
    props: {
        format: Function,
        min: [Number, String],
        max: [Number, String],
        readonly: Boolean,
        value: [Number, String],
    },
    data() {
        return {
            defaultColor: 'primary',
        };
    },
    computed: {
        formatter() {
            return this.format || createNativeLocaleFormatter(this.currentLocale, { year: 'numeric', timeZone: 'UTC' }, { length: 4 });
        },
    },
    mounted() {
        setTimeout(() => {
            const activeItem = this.$el.getElementsByClassName('active')[0];
            if (activeItem) {
                this.$el.scrollTop = activeItem.offsetTop - this.$el.offsetHeight / 2 + activeItem.offsetHeight / 2;
            }
            else if (this.min && !this.max) {
                this.$el.scrollTop = this.$el.scrollHeight;
            }
            else if (!this.min && this.max) {
                this.$el.scrollTop = 0;
            }
            else {
                this.$el.scrollTop = this.$el.scrollHeight / 2 - this.$el.offsetHeight / 2;
            }
        });
    },
    methods: {
        genYearItem(year) {
            const formatted = this.formatter(`${year}`);
            const active = parseInt(this.value, 10) === year;
            const color = active && (this.color || 'primary');
            return this.$createElement('li', this.setTextColor(color, {
                key: year,
                class: { active },
                on: mergeListeners({
                    click: () => this.$emit('input', year),
                }, createItemTypeNativeListeners(this, ':year', year)),
            }), formatted);
        },
        genYearItems() {
            const children = [];
            const selectedYear = this.value ? parseInt(this.value, 10) : new Date().getFullYear();
            const maxYear = this.max ? parseInt(this.max, 10) : (selectedYear + 100);
            const minYear = Math.min(maxYear, this.min ? parseInt(this.min, 10) : (selectedYear - 100));
            for (let year = maxYear; year >= minYear; year--) {
                children.push(this.genYearItem(year));
            }
            return children;
        },
    },
    render() {
        return this.$createElement('ul', {
            staticClass: 'v-date-picker-years',
            ref: 'years',
        }, this.genYearItems());
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVQaWNrZXJZZWFycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyWWVhcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyx5QkFBeUIsQ0FBQTtBQUVoQyxTQUFTO0FBQ1QsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFDOUMsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFFOUMsUUFBUTtBQUNSLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsMkJBQTJCLEdBQzVCLE1BQU0sUUFBUSxDQUFBO0FBQ2YsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ3JELE9BQU8sTUFBc0IsTUFBTSxtQkFBbUIsQ0FBQTtBQVV0RCxlQUFlLE1BQU0sQ0FRbkIsU0FBUyxFQUNULFNBQVM7QUFDWCxvQkFBb0I7Q0FDbkIsQ0FBQyxNQUFNLENBQUM7SUFDUCxJQUFJLEVBQUUscUJBQXFCO0lBRTNCLEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRSxRQUFxRDtRQUM3RCxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3JCLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDckIsUUFBUSxFQUFFLE9BQU87UUFDakIsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztLQUN4QjtJQUVELElBQUk7UUFDRixPQUFPO1lBQ0wsWUFBWSxFQUFFLFNBQVM7U0FDeEIsQ0FBQTtJQUNILENBQUM7SUFFRCxRQUFRLEVBQUU7UUFDUixTQUFTO1lBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLDJCQUEyQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxD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RSxJQUFJLEVBQUUsRUFBRTtnQkFDaEQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7YUFDdEM7WUFFRCxPQUFPLFFBQVEsQ0FBQTtRQUNqQixDQUFDO0tBQ0Y7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRTtZQUMvQixXQUFXLEVBQUUscUJBQXFCO1lBQ2xDLEdBQUcsRUFBRSxPQUFPO1NBQ2IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQTtJQUN6QixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL1ZEYXRlUGlja2VyWWVhcnMuc2FzcydcblxuLy8gTWl4aW5zXG5pbXBvcnQgQ29sb3JhYmxlIGZyb20gJy4uLy4uL21peGlucy9jb2xvcmFibGUnXG5pbXBvcnQgTG9jYWxhYmxlIGZyb20gJy4uLy4uL21peGlucy9sb2NhbGFibGUnXG5cbi8vIFV0aWxzXG5pbXBvcnQge1xuICBjcmVhdGVJdGVtVHlwZU5hdGl2ZUxpc3RlbmVycyxcbiAgY3JlYXRlTmF0aXZlTG9jYWxlRm9ybWF0dGVyLFxufSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyBtZXJnZUxpc3RlbmVycyB9IGZyb20gJy4uLy4uL3V0aWwvbWVyZ2VEYXRhJ1xuaW1wb3J0IG1peGlucywgeyBFeHRyYWN0VnVlIH0gZnJvbSAnLi4vLi4vdXRpbC9taXhpbnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgVnVlLCB7IFZOb2RlLCBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IERhdGVQaWNrZXJGb3JtYXR0ZXIgfSBmcm9tICd2dWV0aWZ5L3R5cGVzJ1xuXG5pbnRlcmZhY2Ugb3B0aW9ucyBleHRlbmRzIFZ1ZSB7XG4gICRlbDogSFRNTEVsZW1lbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWl4aW5zPG9wdGlvbnMgJlxuLyogZXNsaW50LWRpc2FibGUgaW5kZW50ICovXG4gIEV4dHJhY3RWdWU8W1xuICAgIHR5cGVvZiBDb2xvcmFibGUsXG4gICAgdHlwZW9mIExvY2FsYWJsZVxuICBdPlxuLyogZXNsaW50LWVuYWJsZSBpbmRlbnQgKi9cbj4oXG4gIENvbG9yYWJsZSxcbiAgTG9jYWxhYmxlXG4vKiBAdnVlL2NvbXBvbmVudCAqL1xuKS5leHRlbmQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci15ZWFycycsXG5cbiAgcHJvcHM6IHtcbiAgICBmb3JtYXQ6IEZ1bmN0aW9uIGFzIFByb3BUeXBlPERhdGVQaWNrZXJGb3JtYXR0ZXIgfCB1bmRlZmluZWQ+LFxuICAgIG1pbjogW051bWJlciwgU3RyaW5nXSxcbiAgICBtYXg6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgcmVhZG9ubHk6IEJvb2xlYW4sXG4gICAgdmFsdWU6IFtOdW1iZXIsIFN0cmluZ10sXG4gIH0sXG5cbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmF1bHRDb2xvcjogJ3ByaW1hcnknLFxuICAgIH1cbiAgfSxcblxuICBjb21wdXRlZDoge1xuICAgIGZvcm1hdHRlciAoKTogRGF0ZVBpY2tlckZvcm1hdHRlciB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQgfHwgY3JlYXRlTmF0aXZlTG9jYWxlRm9ybWF0dGVyKHRoaXMuY3VycmVudExvY2FsZSwgeyB5ZWFyOiAnbnVtZXJpYycsIHRpbWVab25lOiAnVVRDJyB9LCB7IGxlbmd0aDogNCB9KVxuICAgIH0sXG4gIH0sXG5cbiAgbW91bnRlZCAoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVJdGVtID0gdGhpcy4kZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWN0aXZlJylbMF1cbiAgICAgIGlmIChhY3RpdmVJdGVtKSB7XG4gICAgICAgIHRoaXMuJGVsLnNjcm9sbFRvcCA9IGFjdGl2ZUl0ZW0ub2Zmc2V0VG9wIC0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0IC8gMiArIGFjdGl2ZUl0ZW0ub2Zmc2V0SGVpZ2h0IC8gMlxuICAgICAgfSBlbHNlIGlmICh0aGlzLm1pbiAmJiAhdGhpcy5tYXgpIHtcbiAgICAgICAgdGhpcy4kZWwuc2Nyb2xsVG9wID0gdGhpcy4kZWwuc2Nyb2xsSGVpZ2h0XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLm1pbiAmJiB0aGlzLm1heCkge1xuICAgICAgICB0aGlzLiRlbC5zY3JvbGxUb3AgPSAwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbC5zY3JvbGxUb3AgPSB0aGlzLiRlbC5zY3JvbGxIZWlnaHQgLyAyIC0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0IC8gMlxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGdlblllYXJJdGVtICh5ZWFyOiBudW1iZXIpOiBWTm9kZSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWQgPSB0aGlzLmZvcm1hdHRlcihgJHt5ZWFyfWApXG4gICAgICBjb25zdCBhY3RpdmUgPSBwYXJzZUludCh0aGlzLnZhbHVlLCAxMCkgPT09IHllYXJcbiAgICAgIGNvbnN0IGNvbG9yID0gYWN0aXZlICYmICh0aGlzLmNvbG9yIHx8ICdwcmltYXJ5JylcblxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2xpJywgdGhpcy5zZXRUZXh0Q29sb3IoY29sb3IsIHtcbiAgICAgICAga2V5OiB5ZWFyLFxuICAgICAgICBjbGFzczogeyBhY3RpdmUgfSxcbiAgICAgICAgb246IG1lcmdlTGlzdGVuZXJzKHtcbiAgICAgICAgICBjbGljazogKCkgPT4gdGhpcy4kZW1pdCgnaW5wdXQnLCB5ZWFyKSxcbiAgICAgICAgfSwgY3JlYXRlSXRlbVR5cGVOYXRpdmVMaXN0ZW5lcnModGhpcywgJzp5ZWFyJywgeWVhcikpLFxuICAgICAgfSksIGZvcm1hdHRlZClcbiAgICB9LFxuXG4gICAgZ2VuWWVhckl0ZW1zICgpOiBWTm9kZVtdIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW11cbiAgICAgIGNvbnN0IHNlbGVjdGVkWWVhciA9IHRoaXMudmFsdWUgPyBwYXJzZUludCh0aGlzLnZhbHVlLCAxMCkgOiBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKClcbiAgICAgIGNvbnN0IG1heFllYXIgPSB0aGlzLm1heCA/IHBhcnNlSW50KHRoaXMubWF4LCAxMCkgOiAoc2VsZWN0ZWRZZWFyICsgMTAwKVxuICAgICAgY29uc3QgbWluWWVhciA9IE1hdGgubWluKG1heFllYXIsIHRoaXMubWluID8gcGFyc2VJbnQodGhpcy5taW4sIDEwKSA6IChzZWxlY3RlZFllYXIgLSAxMDApKVxuXG4gICAgICBmb3IgKGxldCB5ZWFyID0gbWF4WWVhcjsgeWVhciA+PSBtaW5ZZWFyOyB5ZWFyLS0pIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLmdlblllYXJJdGVtKHllYXIpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hpbGRyZW5cbiAgICB9LFxuICB9LFxuXG4gIHJlbmRlciAoKTogVk5vZGUge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd1bCcsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiAndi1kYXRlLXBpY2tlci15ZWFycycsXG4gICAgICByZWY6ICd5ZWFycycsXG4gICAgfSwgdGhpcy5nZW5ZZWFySXRlbXMoKSlcbiAgfSxcbn0pXG4iXX0=