import Vue from 'vue';
import { getObjectValueByPath } from '../../util/helpers';
export default Vue.extend({
    name: 'row',
    functional: true,
    props: {
        headers: Array,
        hideDefaultHeader: Boolean,
        index: Number,
        item: Object,
        rtl: Boolean,
    },
    render(h, { props, slots, data }) {
        const computedSlots = slots();
        const columns = props.headers.map((header) => {
            const classes = {
                'v-data-table__mobile-row': true,
            };
            const children = [];
            const value = getObjectValueByPath(props.item, header.value);
            const slotName = header.value;
            const scopedSlot = data.scopedSlots && data.scopedSlots.hasOwnProperty(slotName) && data.scopedSlots[slotName];
            const regularSlot = computedSlots.hasOwnProperty(slotName) && computedSlots[slotName];
            if (scopedSlot) {
                children.push(scopedSlot({
                    item: props.item,
                    isMobile: true,
                    header,
                    index: props.index,
                    value,
                }));
            }
            else if (regularSlot) {
                children.push(regularSlot);
            }
            else {
                children.push(value == null ? value : String(value));
            }
            const mobileRowChildren = [
                h('div', {
                    staticClass: 'v-data-table__mobile-row__cell',
                }, children),
            ];
            if (header.value !== 'dataTableSelect' && !props.hideDefaultHeader) {
                mobileRowChildren.unshift(h('div', {
                    staticClass: 'v-data-table__mobile-row__header',
                }, [header.text]));
            }
            return h('td', { class: classes }, mobileRowChildren);
        });
        return h('tr', { ...data, staticClass: 'v-data-table__mobile-table-row' }, columns);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9iaWxlUm93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkRhdGFUYWJsZS9Nb2JpbGVSb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxHQUF3QixNQUFNLEtBQUssQ0FBQTtBQUMxQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUd6RCxlQUFlLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDeEIsSUFBSSxFQUFFLEtBQUs7SUFFWCxVQUFVLEVBQUUsSUFBSTtJQUVoQixLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsS0FBb0M7UUFDN0MsaUJBQWlCLEVBQUUsT0FBTztRQUMxQixLQUFLLEVBQUUsTUFBTTtRQUNiLElBQUksRUFBRSxNQUFNO1FBQ1osR0FBRyxFQUFFLE9BQU87S0FDYjtJQUVELE1BQU0sQ0FBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtRQUMvQixNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQUUsQ0FBQTtRQUU3QixNQUFNLE9BQU8sR0FBWSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQXVCLEVBQUUsRUFBRTtZQUNyRSxNQUFNLE9BQU8sR0FBRztnQkFDZCwwQkFBMEIsRUFBRSxJQUFJO2FBQ2pDLENBQUE7WUFFRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUE7WUFDbkIsTUFBTSxLQUFLLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7WUFFNUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQTtZQUM3QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDOUcsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7WUFFckYsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7b0JBQ3ZCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLElBQUk7b0JBQ2QsTUFBTTtvQkFDTixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7b0JBQ2xCLEtBQUs7aUJBQ04sQ0FBQyxDQUFDLENBQUE7YUFDSjtpQkFBTSxJQUFJLFdBQVcsRUFBRTtnQkFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTthQUMzQjtpQkFBTTtnQkFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7YUFDckQ7WUFFRCxNQUFNLGlCQUFpQixHQUFHO2dCQUN4QixDQUFDLENBQUMsS0FBSyxFQUFFO29CQUNQLFdBQVcsRUFBRSxnQ0FBZ0M7aUJBQzlDLEVBQUUsUUFBUSxDQUFDO2FBQ2IsQ0FBQTtZQUVELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxpQkFBaUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtnQkFDbEUsaUJBQWlCLENBQUMsT0FBTyxDQUN2QixDQUFDLENBQUMsS0FBSyxFQUFFO29CQUNQLFdBQVcsRUFBRSxrQ0FBa0M7aUJBQ2hELEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDbEIsQ0FBQTthQUNGO1lBRUQsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUE7UUFDdkQsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxXQUFXLEVBQUUsZ0NBQWdDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyRixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSwgeyBWTm9kZSwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBnZXRPYmplY3RWYWx1ZUJ5UGF0aCB9IGZyb20gJy4uLy4uL3V0aWwvaGVscGVycydcbmltcG9ydCB7IERhdGFUYWJsZUhlYWRlciB9IGZyb20gJ3Z1ZXRpZnkvdHlwZXMnXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZS5leHRlbmQoe1xuICBuYW1lOiAncm93JyxcblxuICBmdW5jdGlvbmFsOiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaGVhZGVyczogQXJyYXkgYXMgUHJvcFR5cGU8RGF0YVRhYmxlSGVhZGVyW10+LFxuICAgIGhpZGVEZWZhdWx0SGVhZGVyOiBCb29sZWFuLFxuICAgIGluZGV4OiBOdW1iZXIsXG4gICAgaXRlbTogT2JqZWN0LFxuICAgIHJ0bDogQm9vbGVhbixcbiAgfSxcblxuICByZW5kZXIgKGgsIHsgcHJvcHMsIHNsb3RzLCBkYXRhIH0pOiBWTm9kZSB7XG4gICAgY29uc3QgY29tcHV0ZWRTbG90cyA9IHNsb3RzKClcblxuICAgIGNvbnN0IGNvbHVtbnM6IFZOb2RlW10gPSBwcm9wcy5oZWFkZXJzLm1hcCgoaGVhZGVyOiBEYXRhVGFibGVIZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICAgICd2LWRhdGEtdGFibGVfX21vYmlsZS1yb3cnOiB0cnVlLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtdXG4gICAgICBjb25zdCB2YWx1ZSA9IGdldE9iamVjdFZhbHVlQnlQYXRoKHByb3BzLml0ZW0sIGhlYWRlci52YWx1ZSlcblxuICAgICAgY29uc3Qgc2xvdE5hbWUgPSBoZWFkZXIudmFsdWVcbiAgICAgIGNvbnN0IHNjb3BlZFNsb3QgPSBkYXRhLnNjb3BlZFNsb3RzICYmIGRhdGEuc2NvcGVkU2xvdHMuaGFzT3duUHJvcGVydHkoc2xvdE5hbWUpICYmIGRhdGEuc2NvcGVkU2xvdHNbc2xvdE5hbWVdXG4gICAgICBjb25zdCByZWd1bGFyU2xvdCA9IGNvbXB1dGVkU2xvdHMuaGFzT3duUHJvcGVydHkoc2xvdE5hbWUpICYmIGNvbXB1dGVkU2xvdHNbc2xvdE5hbWVdXG5cbiAgICAgIGlmIChzY29wZWRTbG90KSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goc2NvcGVkU2xvdCh7XG4gICAgICAgICAgaXRlbTogcHJvcHMuaXRlbSxcbiAgICAgICAgICBpc01vYmlsZTogdHJ1ZSxcbiAgICAgICAgICBoZWFkZXIsXG4gICAgICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9KSlcbiAgICAgIH0gZWxzZSBpZiAocmVndWxhclNsb3QpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChyZWd1bGFyU2xvdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2godmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9iaWxlUm93Q2hpbGRyZW4gPSBbXG4gICAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogJ3YtZGF0YS10YWJsZV9fbW9iaWxlLXJvd19fY2VsbCcsXG4gICAgICAgIH0sIGNoaWxkcmVuKSxcbiAgICAgIF1cblxuICAgICAgaWYgKGhlYWRlci52YWx1ZSAhPT0gJ2RhdGFUYWJsZVNlbGVjdCcgJiYgIXByb3BzLmhpZGVEZWZhdWx0SGVhZGVyKSB7XG4gICAgICAgIG1vYmlsZVJvd0NoaWxkcmVuLnVuc2hpZnQoXG4gICAgICAgICAgaCgnZGl2Jywge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWRhdGEtdGFibGVfX21vYmlsZS1yb3dfX2hlYWRlcicsXG4gICAgICAgICAgfSwgW2hlYWRlci50ZXh0XSlcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgndGQnLCB7IGNsYXNzOiBjbGFzc2VzIH0sIG1vYmlsZVJvd0NoaWxkcmVuKVxuICAgIH0pXG5cbiAgICByZXR1cm4gaCgndHInLCB7IC4uLmRhdGEsIHN0YXRpY0NsYXNzOiAndi1kYXRhLXRhYmxlX19tb2JpbGUtdGFibGUtcm93JyB9LCBjb2x1bW5zKVxuICB9LFxufSlcbiJdfQ==