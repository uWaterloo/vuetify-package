import { isLeapYear } from '../../../util/dateTimeUtils';
export const PARSE_REGEX = /^(\d{4})-(\d{1,2})(-(\d{1,2}))?([^\d]+(\d{1,2}))?(:(\d{1,2}))?(:(\d{1,2}))?$/;
export const PARSE_TIME = /(\d\d?)(:(\d\d?)|)(:(\d\d?)|)/;
export const DAYS_IN_MONTH = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
export const DAYS_IN_MONTH_LEAP = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
export const DAYS_IN_MONTH_MIN = 28;
export const DAYS_IN_MONTH_MAX = 31;
export const MONTH_MAX = 12;
export const MONTH_MIN = 1;
export const DAY_MIN = 1;
export const DAYS_IN_WEEK = 7;
export const MINUTES_IN_HOUR = 60;
export const MINUTE_MAX = 59;
export const MINUTES_IN_DAY = 24 * 60;
export const HOURS_IN_DAY = 24;
export const HOUR_MAX = 23;
export const FIRST_HOUR = 0;
export const OFFSET_YEAR = 10000;
export const OFFSET_MONTH = 100;
export const OFFSET_HOUR = 100;
export const OFFSET_TIME = 10000;
export function getStartOfWeek(timestamp, weekdays, today) {
    const start = copyTimestamp(timestamp);
    findWeekday(start, weekdays[0], prevDay);
    updateFormatted(start);
    if (today) {
        updateRelative(start, today, start.hasTime);
    }
    return start;
}
export function getEndOfWeek(timestamp, weekdays, today) {
    const end = copyTimestamp(timestamp);
    findWeekday(end, weekdays[weekdays.length - 1]);
    updateFormatted(end);
    if (today) {
        updateRelative(end, today, end.hasTime);
    }
    return end;
}
export function getStartOfMonth(timestamp) {
    const start = copyTimestamp(timestamp);
    start.day = DAY_MIN;
    updateWeekday(start);
    updateFormatted(start);
    return start;
}
export function getEndOfMonth(timestamp) {
    const end = copyTimestamp(timestamp);
    end.day = daysInMonth(end.year, end.month);
    updateWeekday(end);
    updateFormatted(end);
    return end;
}
export function validateTime(input) {
    return (typeof input === 'number' && isFinite(input)) ||
        (!!PARSE_TIME.exec(input)) ||
        (typeof input === 'object' && isFinite(input.hour) && isFinite(input.minute));
}
export function parseTime(input) {
    if (typeof input === 'number') {
        // when a number is given, it's minutes since 12:00am
        return input;
    }
    else if (typeof input === 'string') {
        // when a string is given, it's a hh:mm:ss format where seconds are optional
        const parts = PARSE_TIME.exec(input);
        if (!parts) {
            return false;
        }
        return parseInt(parts[1]) * 60 + parseInt(parts[3] || 0);
    }
    else if (typeof input === 'object') {
        // when an object is given, it must have hour and minute
        if (typeof input.hour !== 'number' || typeof input.minute !== 'number') {
            return false;
        }
        return input.hour * 60 + input.minute;
    }
    else {
        // unsupported type
        return false;
    }
}
export function validateTimestamp(input) {
    return (typeof input === 'number' && isFinite(input)) ||
        (typeof input === 'string' && !!PARSE_REGEX.exec(input)) ||
        (input instanceof Date);
}
export function parseTimestamp(input, required = false, now) {
    if (typeof input === 'number' && isFinite(input)) {
        input = new Date(input);
    }
    if (input instanceof Date) {
        const date = parseDate(input);
        if (now) {
            updateRelative(date, now, date.hasTime);
        }
        return date;
    }
    if (typeof input !== 'string') {
        if (required) {
            throw new Error(`${input} is not a valid timestamp. It must be a Date, number of milliseconds since Epoch, or a string in the format of YYYY-MM-DD or YYYY-MM-DD hh:mm. Zero-padding is optional and seconds are ignored.`);
        }
        return null;
    }
    // YYYY-MM-DD hh:mm:ss
    const parts = PARSE_REGEX.exec(input);
    if (!parts) {
        if (required) {
            throw new Error(`${input} is not a valid timestamp. It must be a Date, number of milliseconds since Epoch, or a string in the format of YYYY-MM-DD or YYYY-MM-DD hh:mm. Zero-padding is optional and seconds are ignored.`);
        }
        return null;
    }
    const timestamp = {
        date: input,
        time: '',
        year: parseInt(parts[1]),
        month: parseInt(parts[2]),
        day: parseInt(parts[4]) || 1,
        hour: parseInt(parts[6]) || 0,
        minute: parseInt(parts[8]) || 0,
        weekday: 0,
        hasDay: !!parts[4],
        hasTime: !!(parts[6] && parts[8]),
        past: false,
        present: false,
        future: false,
    };
    updateWeekday(timestamp);
    updateFormatted(timestamp);
    if (now) {
        updateRelative(timestamp, now, timestamp.hasTime);
    }
    return timestamp;
}
export function parseDate(date) {
    return updateFormatted({
        date: '',
        time: '',
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        day: date.getDate(),
        weekday: date.getDay(),
        hour: date.getHours(),
        minute: date.getMinutes(),
        hasDay: true,
        hasTime: true,
        past: false,
        present: true,
        future: false,
    });
}
export function getDayIdentifier(timestamp) {
    return timestamp.year * OFFSET_YEAR + timestamp.month * OFFSET_MONTH + timestamp.day;
}
export function getTimeIdentifier(timestamp) {
    return timestamp.hour * OFFSET_HOUR + timestamp.minute;
}
export function getTimestampIdentifier(timestamp) {
    return getDayIdentifier(timestamp) * OFFSET_TIME + getTimeIdentifier(timestamp);
}
export function updateRelative(timestamp, now, time = false) {
    let a = getDayIdentifier(now);
    let b = getDayIdentifier(timestamp);
    let present = a === b;
    if (timestamp.hasTime && time && present) {
        a = getTimeIdentifier(now);
        b = getTimeIdentifier(timestamp);
        present = a === b;
    }
    timestamp.past = b < a;
    timestamp.present = present;
    timestamp.future = b > a;
    return timestamp;
}
export function isTimedless(input) {
    return (input instanceof Date) || (typeof input === 'number' && isFinite(input));
}
export function updateHasTime(timestamp, hasTime, now) {
    if (timestamp.hasTime !== hasTime) {
        timestamp.hasTime = hasTime;
        if (!hasTime) {
            timestamp.hour = HOUR_MAX;
            timestamp.minute = MINUTE_MAX;
            timestamp.time = getTime(timestamp);
        }
        if (now) {
            updateRelative(timestamp, now, timestamp.hasTime);
        }
    }
    return timestamp;
}
export function updateMinutes(timestamp, minutes, now) {
    timestamp.hasTime = true;
    timestamp.hour = Math.floor(minutes / MINUTES_IN_HOUR);
    timestamp.minute = minutes % MINUTES_IN_HOUR;
    timestamp.time = getTime(timestamp);
    if (now) {
        updateRelative(timestamp, now, true);
    }
    return timestamp;
}
export function updateWeekday(timestamp) {
    timestamp.weekday = getWeekday(timestamp);
    return timestamp;
}
export function updateFormatted(timestamp) {
    timestamp.time = getTime(timestamp);
    timestamp.date = getDate(timestamp);
    return timestamp;
}
export function getWeekday(timestamp) {
    if (timestamp.hasDay) {
        const _ = Math.floor;
        const k = timestamp.day;
        const m = ((timestamp.month + 9) % MONTH_MAX) + 1;
        const C = _(timestamp.year / 100);
        const Y = (timestamp.year % 100) - (timestamp.month <= 2 ? 1 : 0);
        return (((k + _(2.6 * m - 0.2) - 2 * C + Y + _(Y / 4) + _(C / 4)) % 7) + 7) % 7;
    }
    return timestamp.weekday;
}
export function daysInMonth(year, month) {
    return isLeapYear(year) ? DAYS_IN_MONTH_LEAP[month] : DAYS_IN_MONTH[month];
}
export function copyTimestamp(timestamp) {
    const { date, time, year, month, day, weekday, hour, minute, hasDay, hasTime, past, present, future } = timestamp;
    return { date, time, year, month, day, weekday, hour, minute, hasDay, hasTime, past, present, future };
}
export function padNumber(x, length) {
    let padded = String(x);
    while (padded.length < length) {
        padded = '0' + padded;
    }
    return padded;
}
export function getDate(timestamp) {
    let str = `${padNumber(timestamp.year, 4)}-${padNumber(timestamp.month, 2)}`;
    if (timestamp.hasDay)
        str += `-${padNumber(timestamp.day, 2)}`;
    return str;
}
export function getTime(timestamp) {
    if (!timestamp.hasTime) {
        return '';
    }
    return `${padNumber(timestamp.hour, 2)}:${padNumber(timestamp.minute, 2)}`;
}
export function nextMinutes(timestamp, minutes) {
    timestamp.minute += minutes;
    while (timestamp.minute > MINUTES_IN_HOUR) {
        timestamp.minute -= MINUTES_IN_HOUR;
        timestamp.hour++;
        if (timestamp.hour >= HOURS_IN_DAY) {
            nextDay(timestamp);
            timestamp.hour = FIRST_HOUR;
        }
    }
    return timestamp;
}
export function nextDay(timestamp) {
    timestamp.day++;
    timestamp.weekday = (timestamp.weekday + 1) % DAYS_IN_WEEK;
    if (timestamp.day > DAYS_IN_MONTH_MIN && timestamp.day > daysInMonth(timestamp.year, timestamp.month)) {
        timestamp.day = DAY_MIN;
        timestamp.month++;
        if (timestamp.month > MONTH_MAX) {
            timestamp.month = MONTH_MIN;
            timestamp.year++;
        }
    }
    return timestamp;
}
export function prevDay(timestamp) {
    timestamp.day--;
    timestamp.weekday = (timestamp.weekday + 6) % DAYS_IN_WEEK;
    if (timestamp.day < DAY_MIN) {
        timestamp.month--;
        if (timestamp.month < MONTH_MIN) {
            timestamp.year--;
            timestamp.month = MONTH_MAX;
        }
        timestamp.day = daysInMonth(timestamp.year, timestamp.month);
    }
    return timestamp;
}
export function relativeDays(timestamp, mover = nextDay, days = 1) {
    while (--days >= 0)
        mover(timestamp);
    return timestamp;
}
export function diffMinutes(min, max) {
    const Y = (max.year - min.year) * 525600;
    const M = (max.month - min.month) * 43800;
    const D = (max.day - min.day) * 1440;
    const h = (max.hour - min.hour) * 60;
    const m = (max.minute - min.minute);
    return Y + M + D + h + m;
}
export function findWeekday(timestamp, weekday, mover = nextDay, maxDays = 6) {
    while (timestamp.weekday !== weekday && --maxDays >= 0)
        mover(timestamp);
    return timestamp;
}
export function getWeekdaySkips(weekdays) {
    const skips = [1, 1, 1, 1, 1, 1, 1];
    const filled = [0, 0, 0, 0, 0, 0, 0];
    for (let i = 0; i < weekdays.length; i++) {
        filled[weekdays[i]] = 1;
    }
    for (let k = 0; k < DAYS_IN_WEEK; k++) {
        let skip = 1;
        for (let j = 1; j < DAYS_IN_WEEK; j++) {
            const next = (k + j) % DAYS_IN_WEEK;
            if (filled[next]) {
                break;
            }
            skip++;
        }
        skips[k] = filled[k] * skip;
    }
    return skips;
}
export function timestampToDate(timestamp) {
    const time = `${padNumber(timestamp.hour, 2)}:${padNumber(timestamp.minute, 2)}`;
    const date = timestamp.date;
    return new Date(`${date}T${time}:00+00:00`);
}
export function createDayList(start, end, now, weekdaySkips, max = 42, min = 0) {
    const stop = getDayIdentifier(end);
    const days = [];
    let current = copyTimestamp(start);
    let currentIdentifier = 0;
    let stopped = currentIdentifier === stop;
    if (stop < getDayIdentifier(start)) {
        throw new Error('End date is earlier than start date.');
    }
    while ((!stopped || days.length < min) && days.length < max) {
        currentIdentifier = getDayIdentifier(current);
        stopped = stopped || currentIdentifier === stop;
        if (weekdaySkips[current.weekday] === 0) {
            current = nextDay(current);
            continue;
        }
        const day = copyTimestamp(current);
        updateFormatted(day);
        updateRelative(day, now);
        days.push(day);
        current = relativeDays(current, nextDay, weekdaySkips[current.weekday]);
    }
    if (!days.length)
        throw new Error('No dates found using specified start date, end date, and weekdays.');
    return days;
}
export function createIntervalList(timestamp, first, minutes, count, now) {
    const intervals = [];
    for (let i = 0; i < count; i++) {
        const mins = first + (i * minutes);
        const int = copyTimestamp(timestamp);
        intervals.push(updateMinutes(int, mins, now));
    }
    return intervals;
}
export function createNativeLocaleFormatter(locale, getOptions) {
    const emptyFormatter = (_t, _s) => '';
    if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat === 'undefined') {
        return emptyFormatter;
    }
    return (timestamp, short) => {
        try {
            const intlFormatter = new Intl.DateTimeFormat(locale || undefined, getOptions(timestamp, short));
            return intlFormatter.format(timestampToDate(timestamp));
        }
        catch (e) {
            return '';
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXN0YW1wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkNhbGVuZGFyL3V0aWwvdGltZXN0YW1wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUV4RCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsOEVBQThFLENBQUE7QUFDekcsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLCtCQUErQixDQUFBO0FBRXpELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBYSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzFGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFhLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDL0YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFBO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQTtBQUNuQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFBO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUE7QUFDMUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQTtBQUN4QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFBO0FBQzdCLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxFQUFF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LENBQUMsQ0FBQyxDQUFBO1lBRWhHLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtTQUN4RDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxFQUFFLENBQUE7U0FDVjtJQUNILENBQUMsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWxlbmRhclRpbWVzdGFtcCwgQ2FsZW5kYXJGb3JtYXR0ZXIgfSBmcm9tICd2dWV0aWZ5L3R5cGVzJ1xuaW1wb3J0IHsgaXNMZWFwWWVhciB9IGZyb20gJy4uLy4uLy4uL3V0aWwvZGF0ZVRpbWVVdGlscydcblxuZXhwb3J0IGNvbnN0IFBBUlNFX1JFR0VYID0gL14oXFxkezR9KS0oXFxkezEsMn0pKC0oXFxkezEsMn0pKT8oW15cXGRdKyhcXGR7MSwyfSkpPyg6KFxcZHsxLDJ9KSk/KDooXFxkezEsMn0pKT8kL1xuZXhwb3J0IGNvbnN0IFBBUlNFX1RJTUUgPSAvKFxcZFxcZD8pKDooXFxkXFxkPyl8KSg6KFxcZFxcZD8pfCkvXG5cbmV4cG9ydCBjb25zdCBEQVlTX0lOX01PTlRIOiBudW1iZXJbXSA9IFswLCAzMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXVxuZXhwb3J0IGNvbnN0IERBWVNfSU5fTU9OVEhfTEVBUDogbnVtYmVyW10gPSBbMCwgMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1cbmV4cG9ydCBjb25zdCBEQVlTX0lOX01PTlRIX01JTiA9IDI4XG5leHBvcnQgY29uc3QgREFZU19JTl9NT05USF9NQVggPSAzMVxuZXhwb3J0IGNvbnN0IE1PTlRIX01BWCA9IDEyXG5leHBvcnQgY29uc3QgTU9OVEhfTUlOID0gMVxuZXhwb3J0IGNvbnN0IERBWV9NSU4gPSAxXG5leHBvcnQgY29uc3QgREFZU19JTl9XRUVLID0gN1xuZXhwb3J0IGNvbnN0IE1JTlVURVNfSU5fSE9VUiA9IDYwXG5leHBvcnQgY29uc3QgTUlOVVRFX01BWCA9IDU5XG5leHBvcnQgY29uc3QgTUlOVVRFU19JTl9EQVkgPSAyNCAqIDYwXG5leHBvcnQgY29uc3QgSE9VUlNfSU5fREFZID0gMjRcbmV4cG9ydCBjb25zdCBIT1VSX01BWCA9IDIzXG5leHBvcnQgY29uc3QgRklSU1RfSE9VUiA9IDBcbmV4cG9ydCBjb25zdCBPRkZTRVRfWUVBUiA9IDEwMDAwXG5leHBvcnQgY29uc3QgT0ZGU0VUX01PTlRIID0gMTAwXG5leHBvcnQgY29uc3QgT0ZGU0VUX0hPVVIgPSAxMDBcbmV4cG9ydCBjb25zdCBPRkZTRVRfVElNRSA9IDEwMDAwXG5cbnR5cGUgQ2FsZW5kYXJUaW1lc3RhbXBGb3JtYXRPcHRpb25zID0gKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXAsIHNob3J0OiBib29sZWFuKSA9PiBvYmplY3RcbnR5cGUgQ2FsZW5kYXJUaW1lc3RhbXBPcGVyYXRpb24gPSAodGltZXN0YW1wOiBDYWxlbmRhclRpbWVzdGFtcCkgPT4gQ2FsZW5kYXJUaW1lc3RhbXBcbmV4cG9ydCB0eXBlIFZUaW1lID0gbnVtYmVyIHwgc3RyaW5nIHwge1xuICBob3VyOiBudW1iZXJcbiAgbWludXRlOiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgVlRpbWVzdGFtcElucHV0ID0gbnVtYmVyIHwgc3RyaW5nIHwgRGF0ZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXJ0T2ZXZWVrICh0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wLCB3ZWVrZGF5czogbnVtYmVyW10sIHRvZGF5PzogQ2FsZW5kYXJUaW1lc3RhbXApOiBDYWxlbmRhclRpbWVzdGFtcCB7XG4gIGNvbnN0IHN0YXJ0ID0gY29weVRpbWVzdGFtcCh0aW1lc3RhbXApXG4gIGZpbmRXZWVrZGF5KHN0YXJ0LCB3ZWVrZGF5c1swXSwgcHJldkRheSlcbiAgdXBkYXRlRm9ybWF0dGVkKHN0YXJ0KVxuICBpZiAodG9kYXkpIHtcbiAgICB1cGRhdGVSZWxhdGl2ZShzdGFydCwgdG9kYXksIHN0YXJ0Lmhhc1RpbWUpXG4gIH1cblxuICByZXR1cm4gc3RhcnRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuZE9mV2VlayAodGltZXN0YW1wOiBDYWxlbmRhclRpbWVzdGFtcCwgd2Vla2RheXM6IG51bWJlcltdLCB0b2RheT86IENhbGVuZGFyVGltZXN0YW1wKTogQ2FsZW5kYXJUaW1lc3RhbXAge1xuICBjb25zdCBlbmQgPSBjb3B5VGltZXN0YW1wKHRpbWVzdGFtcClcbiAgZmluZFdlZWtkYXkoZW5kLCB3ZWVrZGF5c1t3ZWVrZGF5cy5sZW5ndGggLSAxXSlcbiAgdXBkYXRlRm9ybWF0dGVkKGVuZClcbiAgaWYgKHRvZGF5KSB7XG4gICAgdXBkYXRlUmVsYXRpdmUoZW5kLCB0b2RheSwgZW5kLmhhc1RpbWUpXG4gIH1cblxuICByZXR1cm4gZW5kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydE9mTW9udGggKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXApOiBDYWxlbmRhclRpbWVzdGFtcCB7XG4gIGNvbnN0IHN0YXJ0ID0gY29weVRpbWVzdGFtcCh0aW1lc3RhbXApXG4gIHN0YXJ0LmRheSA9IERBWV9NSU5cbiAgdXBkYXRlV2Vla2RheShzdGFydClcbiAgdXBkYXRlRm9ybWF0dGVkKHN0YXJ0KVxuXG4gIHJldHVybiBzdGFydFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5kT2ZNb250aCAodGltZXN0YW1wOiBDYWxlbmRhclRpbWVzdGFtcCk6IENhbGVuZGFyVGltZXN0YW1wIHtcbiAgY29uc3QgZW5kID0gY29weVRpbWVzdGFtcCh0aW1lc3RhbXApXG4gIGVuZC5kYXkgPSBkYXlzSW5Nb250aChlbmQueWVhciwgZW5kLm1vbnRoKVxuICB1cGRhdGVXZWVrZGF5KGVuZClcbiAgdXBkYXRlRm9ybWF0dGVkKGVuZClcblxuICByZXR1cm4gZW5kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRpbWUgKGlucHV0OiBhbnkpOiBpbnB1dCBpcyBWVGltZSB7XG4gIHJldHVybiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShpbnB1dCkpIHx8XG4gICAgKCEhUEFSU0VfVElNRS5leGVjKGlucHV0KSkgfHxcbiAgICAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpc0Zpbml0ZShpbnB1dC5ob3VyKSAmJiBpc0Zpbml0ZShpbnB1dC5taW51dGUpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaW1lIChpbnB1dDogYW55KTogbnVtYmVyIHwgZmFsc2Uge1xuICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgIC8vIHdoZW4gYSBudW1iZXIgaXMgZ2l2ZW4sIGl0J3MgbWludXRlcyBzaW5jZSAxMjowMGFtXG4gICAgcmV0dXJuIGlucHV0XG4gIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIC8vIHdoZW4gYSBzdHJpbmcgaXMgZ2l2ZW4sIGl0J3MgYSBoaDptbTpzcyBmb3JtYXQgd2hlcmUgc2Vjb25kcyBhcmUgb3B0aW9uYWxcbiAgICBjb25zdCBwYXJ0cyA9IFBBUlNFX1RJTUUuZXhlYyhpbnB1dClcbiAgICBpZiAoIXBhcnRzKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VJbnQocGFydHNbMV0pICogNjAgKyBwYXJzZUludChwYXJ0c1szXSB8fCAwKVxuICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyB3aGVuIGFuIG9iamVjdCBpcyBnaXZlbiwgaXQgbXVzdCBoYXZlIGhvdXIgYW5kIG1pbnV0ZVxuICAgIGlmICh0eXBlb2YgaW5wdXQuaG91ciAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0Lm1pbnV0ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiBpbnB1dC5ob3VyICogNjAgKyBpbnB1dC5taW51dGVcbiAgfSBlbHNlIHtcbiAgICAvLyB1bnN1cHBvcnRlZCB0eXBlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVGltZXN0YW1wIChpbnB1dDogYW55KTogaW5wdXQgaXMgVlRpbWVzdGFtcElucHV0IHtcbiAgcmV0dXJuICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInICYmIGlzRmluaXRlKGlucHV0KSkgfHxcbiAgICAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyAmJiAhIVBBUlNFX1JFR0VYLmV4ZWMoaW5wdXQpKSB8fFxuICAgIChpbnB1dCBpbnN0YW5jZW9mIERhdGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpbWVzdGFtcCAoaW5wdXQ6IFZUaW1lc3RhbXBJbnB1dCwgcmVxdWlyZWQ/OiBmYWxzZSwgbm93PzogQ2FsZW5kYXJUaW1lc3RhbXApOiBDYWxlbmRhclRpbWVzdGFtcCB8IG51bGxcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpbWVzdGFtcCAoaW5wdXQ6IFZUaW1lc3RhbXBJbnB1dCwgcmVxdWlyZWQ6IHRydWUsIG5vdz86IENhbGVuZGFyVGltZXN0YW1wKTogQ2FsZW5kYXJUaW1lc3RhbXBcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpbWVzdGFtcCAoaW5wdXQ6IFZUaW1lc3RhbXBJbnB1dCwgcmVxdWlyZWQgPSBmYWxzZSwgbm93PzogQ2FsZW5kYXJUaW1lc3RhbXApOiBDYWxlbmRhclRpbWVzdGFtcCB8IG51bGwge1xuICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShpbnB1dCkpIHtcbiAgICBpbnB1dCA9IG5ldyBEYXRlKGlucHV0KVxuICB9XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIGNvbnN0IGRhdGU6IENhbGVuZGFyVGltZXN0YW1wID0gcGFyc2VEYXRlKGlucHV0KVxuXG4gICAgaWYgKG5vdykge1xuICAgICAgdXBkYXRlUmVsYXRpdmUoZGF0ZSwgbm93LCBkYXRlLmhhc1RpbWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGVcbiAgfVxuXG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHJlcXVpcmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7aW5wdXR9IGlzIG5vdCBhIHZhbGlkIHRpbWVzdGFtcC4gSXQgbXVzdCBiZSBhIERhdGUsIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gsIG9yIGEgc3RyaW5nIGluIHRoZSBmb3JtYXQgb2YgWVlZWS1NTS1ERCBvciBZWVlZLU1NLUREIGhoOm1tLiBaZXJvLXBhZGRpbmcgaXMgb3B0aW9uYWwgYW5kIHNlY29uZHMgYXJlIGlnbm9yZWQuYClcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIFlZWVktTU0tREQgaGg6bW06c3NcbiAgY29uc3QgcGFydHMgPSBQQVJTRV9SRUdFWC5leGVjKGlucHV0KVxuXG4gIGlmICghcGFydHMpIHtcbiAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtpbnB1dH0gaXMgbm90IGEgdmFsaWQgdGltZXN0YW1wLiBJdCBtdXN0IGJlIGEgRGF0ZSwgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaCwgb3IgYSBzdHJpbmcgaW4gdGhlIGZvcm1hdCBvZiBZWVlZLU1NLUREIG9yIFlZWVktTU0tREQgaGg6bW0uIFplcm8tcGFkZGluZyBpcyBvcHRpb25hbCBhbmQgc2Vjb25kcyBhcmUgaWdub3JlZC5gKVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCB0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wID0ge1xuICAgIGRhdGU6IGlucHV0LFxuICAgIHRpbWU6ICcnLFxuICAgIHllYXI6IHBhcnNlSW50KHBhcnRzWzFdKSxcbiAgICBtb250aDogcGFyc2VJbnQocGFydHNbMl0pLFxuICAgIGRheTogcGFyc2VJbnQocGFydHNbNF0pIHx8IDEsXG4gICAgaG91cjogcGFyc2VJbnQocGFydHNbNl0pIHx8IDAsXG4gICAgbWludXRlOiBwYXJzZUludChwYXJ0c1s4XSkgfHwgMCxcbiAgICB3ZWVrZGF5OiAwLFxuICAgIGhhc0RheTogISFwYXJ0c1s0XSxcbiAgICBoYXNUaW1lOiAhIShwYXJ0c1s2XSAmJiBwYXJ0c1s4XSksXG4gICAgcGFzdDogZmFsc2UsXG4gICAgcHJlc2VudDogZmFsc2UsXG4gICAgZnV0dXJlOiBmYWxzZSxcbiAgfVxuXG4gIHVwZGF0ZVdlZWtkYXkodGltZXN0YW1wKVxuICB1cGRhdGVGb3JtYXR0ZWQodGltZXN0YW1wKVxuXG4gIGlmIChub3cpIHtcbiAgICB1cGRhdGVSZWxhdGl2ZSh0aW1lc3RhbXAsIG5vdywgdGltZXN0YW1wLmhhc1RpbWUpXG4gIH1cblxuICByZXR1cm4gdGltZXN0YW1wXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGUgKGRhdGU6IERhdGUpOiBDYWxlbmRhclRpbWVzdGFtcCB7XG4gIHJldHVybiB1cGRhdGVGb3JtYXR0ZWQoe1xuICAgIGRhdGU6ICcnLFxuICAgIHRpbWU6ICcnLFxuICAgIHllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICBtb250aDogZGF0ZS5nZXRNb250aCgpICsgMSxcbiAgICBkYXk6IGRhdGUuZ2V0RGF0ZSgpLFxuICAgIHdlZWtkYXk6IGRhdGUuZ2V0RGF5KCksXG4gICAgaG91cjogZGF0ZS5nZXRIb3VycygpLFxuICAgIG1pbnV0ZTogZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgaGFzRGF5OiB0cnVlLFxuICAgIGhhc1RpbWU6IHRydWUsXG4gICAgcGFzdDogZmFsc2UsXG4gICAgcHJlc2VudDogdHJ1ZSxcbiAgICBmdXR1cmU6IGZhbHNlLFxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF5SWRlbnRpZmllciAodGltZXN0YW1wOiB7IHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlciwgZGF5OiBudW1iZXIgfSk6IG51bWJlciB7XG4gIHJldHVybiB0aW1lc3RhbXAueWVhciAqIE9GRlNFVF9ZRUFSICsgdGltZXN0YW1wLm1vbnRoICogT0ZGU0VUX01PTlRIICsgdGltZXN0YW1wLmRheVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZUlkZW50aWZpZXIgKHRpbWVzdGFtcDogeyBob3VyOiBudW1iZXIsIG1pbnV0ZTogbnVtYmVyIH0pOiBudW1iZXIge1xuICByZXR1cm4gdGltZXN0YW1wLmhvdXIgKiBPRkZTRVRfSE9VUiArIHRpbWVzdGFtcC5taW51dGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVzdGFtcElkZW50aWZpZXIgKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXApOiBudW1iZXIge1xuICByZXR1cm4gZ2V0RGF5SWRlbnRpZmllcih0aW1lc3RhbXApICogT0ZGU0VUX1RJTUUgKyBnZXRUaW1lSWRlbnRpZmllcih0aW1lc3RhbXApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVSZWxhdGl2ZSAodGltZXN0YW1wOiBDYWxlbmRhclRpbWVzdGFtcCwgbm93OiBDYWxlbmRhclRpbWVzdGFtcCwgdGltZSA9IGZhbHNlKTogQ2FsZW5kYXJUaW1lc3RhbXAge1xuICBsZXQgYSA9IGdldERheUlkZW50aWZpZXIobm93KVxuICBsZXQgYiA9IGdldERheUlkZW50aWZpZXIodGltZXN0YW1wKVxuICBsZXQgcHJlc2VudCA9IGEgPT09IGJcblxuICBpZiAodGltZXN0YW1wLmhhc1RpbWUgJiYgdGltZSAmJiBwcmVzZW50KSB7XG4gICAgYSA9IGdldFRpbWVJZGVudGlmaWVyKG5vdylcbiAgICBiID0gZ2V0VGltZUlkZW50aWZpZXIodGltZXN0YW1wKVxuICAgIHByZXNlbnQgPSBhID09PSBiXG4gIH1cblxuICB0aW1lc3RhbXAucGFzdCA9IGIgPCBhXG4gIHRpbWVzdGFtcC5wcmVzZW50ID0gcHJlc2VudFxuICB0aW1lc3RhbXAuZnV0dXJlID0gYiA+IGFcblxuICByZXR1cm4gdGltZXN0YW1wXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVkbGVzcyAoaW5wdXQ6IFZUaW1lc3RhbXBJbnB1dCk6IGlucHV0IGlzIChEYXRlIHwgbnVtYmVyKSB7XG4gIHJldHVybiAoaW5wdXQgaW5zdGFuY2VvZiBEYXRlKSB8fCAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShpbnB1dCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVIYXNUaW1lICh0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wLCBoYXNUaW1lOiBib29sZWFuLCBub3c/OiBDYWxlbmRhclRpbWVzdGFtcCk6IENhbGVuZGFyVGltZXN0YW1wIHtcbiAgaWYgKHRpbWVzdGFtcC5oYXNUaW1lICE9PSBoYXNUaW1lKSB7XG4gICAgdGltZXN0YW1wLmhhc1RpbWUgPSBoYXNUaW1lXG4gICAgaWYgKCFoYXNUaW1lKSB7XG4gICAgICB0aW1lc3RhbXAuaG91ciA9IEhPVVJfTUFYXG4gICAgICB0aW1lc3RhbXAubWludXRlID0gTUlOVVRFX01BWFxuICAgICAgdGltZXN0YW1wLnRpbWUgPSBnZXRUaW1lKHRpbWVzdGFtcClcbiAgICB9XG4gICAgaWYgKG5vdykge1xuICAgICAgdXBkYXRlUmVsYXRpdmUodGltZXN0YW1wLCBub3csIHRpbWVzdGFtcC5oYXNUaW1lKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aW1lc3RhbXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU1pbnV0ZXMgKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXAsIG1pbnV0ZXM6IG51bWJlciwgbm93PzogQ2FsZW5kYXJUaW1lc3RhbXApOiBDYWxlbmRhclRpbWVzdGFtcCB7XG4gIHRpbWVzdGFtcC5oYXNUaW1lID0gdHJ1ZVxuICB0aW1lc3RhbXAuaG91ciA9IE1hdGguZmxvb3IobWludXRlcyAvIE1JTlVURVNfSU5fSE9VUilcbiAgdGltZXN0YW1wLm1pbnV0ZSA9IG1pbnV0ZXMgJSBNSU5VVEVTX0lOX0hPVVJcbiAgdGltZXN0YW1wLnRpbWUgPSBnZXRUaW1lKHRpbWVzdGFtcClcbiAgaWYgKG5vdykge1xuICAgIHVwZGF0ZVJlbGF0aXZlKHRpbWVzdGFtcCwgbm93LCB0cnVlKVxuICB9XG5cbiAgcmV0dXJuIHRpbWVzdGFtcFxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlV2Vla2RheSAodGltZXN0YW1wOiBDYWxlbmRhclRpbWVzdGFtcCk6IENhbGVuZGFyVGltZXN0YW1wIHtcbiAgdGltZXN0YW1wLndlZWtkYXkgPSBnZXRXZWVrZGF5KHRpbWVzdGFtcClcblxuICByZXR1cm4gdGltZXN0YW1wXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVGb3JtYXR0ZWQgKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXApOiBDYWxlbmRhclRpbWVzdGFtcCB7XG4gIHRpbWVzdGFtcC50aW1lID0gZ2V0VGltZSh0aW1lc3RhbXApXG4gIHRpbWVzdGFtcC5kYXRlID0gZ2V0RGF0ZSh0aW1lc3RhbXApXG5cbiAgcmV0dXJuIHRpbWVzdGFtcFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vla2RheSAodGltZXN0YW1wOiBDYWxlbmRhclRpbWVzdGFtcCk6IG51bWJlciB7XG4gIGlmICh0aW1lc3RhbXAuaGFzRGF5KSB7XG4gICAgY29uc3QgXyA9IE1hdGguZmxvb3JcbiAgICBjb25zdCBrID0gdGltZXN0YW1wLmRheVxuICAgIGNvbnN0IG0gPSAoKHRpbWVzdGFtcC5tb250aCArIDkpICUgTU9OVEhfTUFYKSArIDFcbiAgICBjb25zdCBDID0gXyh0aW1lc3RhbXAueWVhciAvIDEwMClcbiAgICBjb25zdCBZID0gKHRpbWVzdGFtcC55ZWFyICUgMTAwKSAtICh0aW1lc3RhbXAubW9udGggPD0gMiA/IDEgOiAwKVxuXG4gICAgcmV0dXJuICgoKGsgKyBfKDIuNiAqIG0gLSAwLjIpIC0gMiAqIEMgKyBZICsgXyhZIC8gNCkgKyBfKEMgLyA0KSkgJSA3KSArIDcpICUgN1xuICB9XG5cbiAgcmV0dXJuIHRpbWVzdGFtcC53ZWVrZGF5XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzSW5Nb250aCAoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gREFZU19JTl9NT05USF9MRUFQW21vbnRoXSA6IERBWVNfSU5fTU9OVEhbbW9udGhdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5VGltZXN0YW1wICh0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wKTogQ2FsZW5kYXJUaW1lc3RhbXAge1xuICBjb25zdCB7IGRhdGUsIHRpbWUsIHllYXIsIG1vbnRoLCBkYXksIHdlZWtkYXksIGhvdXIsIG1pbnV0ZSwgaGFzRGF5LCBoYXNUaW1lLCBwYXN0LCBwcmVzZW50LCBmdXR1cmUgfSA9IHRpbWVzdGFtcFxuXG4gIHJldHVybiB7IGRhdGUsIHRpbWUsIHllYXIsIG1vbnRoLCBkYXksIHdlZWtkYXksIGhvdXIsIG1pbnV0ZSwgaGFzRGF5LCBoYXNUaW1lLCBwYXN0LCBwcmVzZW50LCBmdXR1cmUgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFkTnVtYmVyICh4OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgbGV0IHBhZGRlZCA9IFN0cmluZyh4KVxuICB3aGlsZSAocGFkZGVkLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIHBhZGRlZCA9ICcwJyArIHBhZGRlZFxuICB9XG5cbiAgcmV0dXJuIHBhZGRlZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZSAodGltZXN0YW1wOiBDYWxlbmRhclRpbWVzdGFtcCk6IHN0cmluZyB7XG4gIGxldCBzdHIgPSBgJHtwYWROdW1iZXIodGltZXN0YW1wLnllYXIsIDQpfS0ke3BhZE51bWJlcih0aW1lc3RhbXAubW9udGgsIDIpfWBcblxuICBpZiAodGltZXN0YW1wLmhhc0RheSkgc3RyICs9IGAtJHtwYWROdW1iZXIodGltZXN0YW1wLmRheSwgMil9YFxuXG4gIHJldHVybiBzdHJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWUgKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXApOiBzdHJpbmcge1xuICBpZiAoIXRpbWVzdGFtcC5oYXNUaW1lKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICByZXR1cm4gYCR7cGFkTnVtYmVyKHRpbWVzdGFtcC5ob3VyLCAyKX06JHtwYWROdW1iZXIodGltZXN0YW1wLm1pbnV0ZSwgMil9YFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dE1pbnV0ZXMgKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXAsIG1pbnV0ZXM6IG51bWJlcik6IENhbGVuZGFyVGltZXN0YW1wIHtcbiAgdGltZXN0YW1wLm1pbnV0ZSArPSBtaW51dGVzXG4gIHdoaWxlICh0aW1lc3RhbXAubWludXRlID4gTUlOVVRFU19JTl9IT1VSKSB7XG4gICAgdGltZXN0YW1wLm1pbnV0ZSAtPSBNSU5VVEVTX0lOX0hPVVJcbiAgICB0aW1lc3RhbXAuaG91cisrXG4gICAgaWYgKHRpbWVzdGFtcC5ob3VyID49IEhPVVJTX0lOX0RBWSkge1xuICAgICAgbmV4dERheSh0aW1lc3RhbXApXG4gICAgICB0aW1lc3RhbXAuaG91ciA9IEZJUlNUX0hPVVJcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGltZXN0YW1wXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0RGF5ICh0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wKTogQ2FsZW5kYXJUaW1lc3RhbXAge1xuICB0aW1lc3RhbXAuZGF5KytcbiAgdGltZXN0YW1wLndlZWtkYXkgPSAodGltZXN0YW1wLndlZWtkYXkgKyAxKSAlIERBWVNfSU5fV0VFS1xuICBpZiAodGltZXN0YW1wLmRheSA+IERBWVNfSU5fTU9OVEhfTUlOICYmIHRpbWVzdGFtcC5kYXkgPiBkYXlzSW5Nb250aCh0aW1lc3RhbXAueWVhciwgdGltZXN0YW1wLm1vbnRoKSkge1xuICAgIHRpbWVzdGFtcC5kYXkgPSBEQVlfTUlOXG4gICAgdGltZXN0YW1wLm1vbnRoKytcbiAgICBpZiAodGltZXN0YW1wLm1vbnRoID4gTU9OVEhfTUFYKSB7XG4gICAgICB0aW1lc3RhbXAubW9udGggPSBNT05USF9NSU5cbiAgICAgIHRpbWVzdGFtcC55ZWFyKytcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGltZXN0YW1wXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmV2RGF5ICh0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wKTogQ2FsZW5kYXJUaW1lc3RhbXAge1xuICB0aW1lc3RhbXAuZGF5LS1cbiAgdGltZXN0YW1wLndlZWtkYXkgPSAodGltZXN0YW1wLndlZWtkYXkgKyA2KSAlIERBWVNfSU5fV0VFS1xuICBpZiAodGltZXN0YW1wLmRheSA8IERBWV9NSU4pIHtcbiAgICB0aW1lc3RhbXAubW9udGgtLVxuICAgIGlmICh0aW1lc3RhbXAubW9udGggPCBNT05USF9NSU4pIHtcbiAgICAgIHRpbWVzdGFtcC55ZWFyLS1cbiAgICAgIHRpbWVzdGFtcC5tb250aCA9IE1PTlRIX01BWFxuICAgIH1cbiAgICB0aW1lc3RhbXAuZGF5ID0gZGF5c0luTW9udGgodGltZXN0YW1wLnllYXIsIHRpbWVzdGFtcC5tb250aClcbiAgfVxuXG4gIHJldHVybiB0aW1lc3RhbXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbGF0aXZlRGF5cyAoXG4gIHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXAsXG4gIG1vdmVyOiBDYWxlbmRhclRpbWVzdGFtcE9wZXJhdGlvbiA9IG5leHREYXksXG4gIGRheXMgPSAxXG4pOiBDYWxlbmRhclRpbWVzdGFtcCB7XG4gIHdoaWxlICgtLWRheXMgPj0gMCkgbW92ZXIodGltZXN0YW1wKVxuXG4gIHJldHVybiB0aW1lc3RhbXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZNaW51dGVzIChtaW46IENhbGVuZGFyVGltZXN0YW1wLCBtYXg6IENhbGVuZGFyVGltZXN0YW1wKSB7XG4gIGNvbnN0IFkgPSAobWF4LnllYXIgLSBtaW4ueWVhcikgKiA1MjU2MDBcbiAgY29uc3QgTSA9IChtYXgubW9udGggLSBtaW4ubW9udGgpICogNDM4MDBcbiAgY29uc3QgRCA9IChtYXguZGF5IC0gbWluLmRheSkgKiAxNDQwXG4gIGNvbnN0IGggPSAobWF4LmhvdXIgLSBtaW4uaG91cikgKiA2MFxuICBjb25zdCBtID0gKG1heC5taW51dGUgLSBtaW4ubWludXRlKVxuXG4gIHJldHVybiBZICsgTSArIEQgKyBoICsgbVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFdlZWtkYXkgKHRpbWVzdGFtcDogQ2FsZW5kYXJUaW1lc3RhbXAsIHdlZWtkYXk6IG51bWJlcixcbiAgbW92ZXI6IENhbGVuZGFyVGltZXN0YW1wT3BlcmF0aW9uID0gbmV4dERheSwgbWF4RGF5cyA9IDYpOiBDYWxlbmRhclRpbWVzdGFtcCB7XG4gIHdoaWxlICh0aW1lc3RhbXAud2Vla2RheSAhPT0gd2Vla2RheSAmJiAtLW1heERheXMgPj0gMCkgbW92ZXIodGltZXN0YW1wKVxuXG4gIHJldHVybiB0aW1lc3RhbXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtkYXlTa2lwcyAod2Vla2RheXM6IG51bWJlcltdKTogbnVtYmVyW10ge1xuICBjb25zdCBza2lwczogbnVtYmVyW10gPSBbMSwgMSwgMSwgMSwgMSwgMSwgMV1cbiAgY29uc3QgZmlsbGVkOiBudW1iZXJbXSA9IFswLCAwLCAwLCAwLCAwLCAwLCAwXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHdlZWtkYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZmlsbGVkW3dlZWtkYXlzW2ldXSA9IDFcbiAgfVxuICBmb3IgKGxldCBrID0gMDsgayA8IERBWVNfSU5fV0VFSzsgaysrKSB7XG4gICAgbGV0IHNraXAgPSAxXG4gICAgZm9yIChsZXQgaiA9IDE7IGogPCBEQVlTX0lOX1dFRUs7IGorKykge1xuICAgICAgY29uc3QgbmV4dCA9IChrICsgaikgJSBEQVlTX0lOX1dFRUtcbiAgICAgIGlmIChmaWxsZWRbbmV4dF0pIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHNraXArK1xuICAgIH1cbiAgICBza2lwc1trXSA9IGZpbGxlZFtrXSAqIHNraXBcbiAgfVxuXG4gIHJldHVybiBza2lwc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXN0YW1wVG9EYXRlICh0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wKTogRGF0ZSB7XG4gIGNvbnN0IHRpbWUgPSBgJHtwYWROdW1iZXIodGltZXN0YW1wLmhvdXIsIDIpfToke3BhZE51bWJlcih0aW1lc3RhbXAubWludXRlLCAyKX1gXG4gIGNvbnN0IGRhdGUgPSB0aW1lc3RhbXAuZGF0ZVxuXG4gIHJldHVybiBuZXcgRGF0ZShgJHtkYXRlfVQke3RpbWV9OjAwKzAwOjAwYClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURheUxpc3QgKFxuICBzdGFydDogQ2FsZW5kYXJUaW1lc3RhbXAsXG4gIGVuZDogQ2FsZW5kYXJUaW1lc3RhbXAsXG4gIG5vdzogQ2FsZW5kYXJUaW1lc3RhbXAsXG4gIHdlZWtkYXlTa2lwczogbnVtYmVyW10sXG4gIG1heCA9IDQyLFxuICBtaW4gPSAwXG4pOiBDYWxlbmRhclRpbWVzdGFtcFtdIHtcbiAgY29uc3Qgc3RvcCA9IGdldERheUlkZW50aWZpZXIoZW5kKVxuICBjb25zdCBkYXlzOiBDYWxlbmRhclRpbWVzdGFtcFtdID0gW11cbiAgbGV0IGN1cnJlbnQgPSBjb3B5VGltZXN0YW1wKHN0YXJ0KVxuICBsZXQgY3VycmVudElkZW50aWZpZXIgPSAwXG4gIGxldCBzdG9wcGVkID0gY3VycmVudElkZW50aWZpZXIgPT09IHN0b3BcblxuICBpZiAoc3RvcCA8IGdldERheUlkZW50aWZpZXIoc3RhcnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbmQgZGF0ZSBpcyBlYXJsaWVyIHRoYW4gc3RhcnQgZGF0ZS4nKVxuICB9XG5cbiAgd2hpbGUgKCghc3RvcHBlZCB8fCBkYXlzLmxlbmd0aCA8IG1pbikgJiYgZGF5cy5sZW5ndGggPCBtYXgpIHtcbiAgICBjdXJyZW50SWRlbnRpZmllciA9IGdldERheUlkZW50aWZpZXIoY3VycmVudClcbiAgICBzdG9wcGVkID0gc3RvcHBlZCB8fCBjdXJyZW50SWRlbnRpZmllciA9PT0gc3RvcFxuICAgIGlmICh3ZWVrZGF5U2tpcHNbY3VycmVudC53ZWVrZGF5XSA9PT0gMCkge1xuICAgICAgY3VycmVudCA9IG5leHREYXkoY3VycmVudClcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGNvbnN0IGRheSA9IGNvcHlUaW1lc3RhbXAoY3VycmVudClcbiAgICB1cGRhdGVGb3JtYXR0ZWQoZGF5KVxuICAgIHVwZGF0ZVJlbGF0aXZlKGRheSwgbm93KVxuICAgIGRheXMucHVzaChkYXkpXG4gICAgY3VycmVudCA9IHJlbGF0aXZlRGF5cyhjdXJyZW50LCBuZXh0RGF5LCB3ZWVrZGF5U2tpcHNbY3VycmVudC53ZWVrZGF5XSlcbiAgfVxuXG4gIGlmICghZGF5cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignTm8gZGF0ZXMgZm91bmQgdXNpbmcgc3BlY2lmaWVkIHN0YXJ0IGRhdGUsIGVuZCBkYXRlLCBhbmQgd2Vla2RheXMuJylcblxuICByZXR1cm4gZGF5c1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW50ZXJ2YWxMaXN0ICh0aW1lc3RhbXA6IENhbGVuZGFyVGltZXN0YW1wLCBmaXJzdDogbnVtYmVyLFxuICBtaW51dGVzOiBudW1iZXIsIGNvdW50OiBudW1iZXIsIG5vdz86IENhbGVuZGFyVGltZXN0YW1wKTogQ2FsZW5kYXJUaW1lc3RhbXBbXSB7XG4gIGNvbnN0IGludGVydmFsczogQ2FsZW5kYXJUaW1lc3RhbXBbXSA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgY29uc3QgbWlucyA9IGZpcnN0ICsgKGkgKiBtaW51dGVzKVxuICAgIGNvbnN0IGludCA9IGNvcHlUaW1lc3RhbXAodGltZXN0YW1wKVxuICAgIGludGVydmFscy5wdXNoKHVwZGF0ZU1pbnV0ZXMoaW50LCBtaW5zLCBub3cpKVxuICB9XG5cbiAgcmV0dXJuIGludGVydmFsc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmF0aXZlTG9jYWxlRm9ybWF0dGVyIChsb2NhbGU6IHN0cmluZywgZ2V0T3B0aW9uczogQ2FsZW5kYXJUaW1lc3RhbXBGb3JtYXRPcHRpb25zKTogQ2FsZW5kYXJGb3JtYXR0ZXIge1xuICBjb25zdCBlbXB0eUZvcm1hdHRlcjogQ2FsZW5kYXJGb3JtYXR0ZXIgPSAoX3QsIF9zKSA9PiAnJ1xuXG4gIGlmICh0eXBlb2YgSW50bCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIEludGwuRGF0ZVRpbWVGb3JtYXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGVtcHR5Rm9ybWF0dGVyXG4gIH1cblxuICByZXR1cm4gKHRpbWVzdGFtcCwgc2hvcnQpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaW50bEZvcm1hdHRlciA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSB8fCB1bmRlZmluZWQsIGdldE9wdGlvbnModGltZXN0YW1wLCBzaG9ydCkpXG5cbiAgICAgIHJldHVybiBpbnRsRm9ybWF0dGVyLmZvcm1hdCh0aW1lc3RhbXBUb0RhdGUodGltZXN0YW1wKSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG4gIH1cbn1cbiJdfQ==