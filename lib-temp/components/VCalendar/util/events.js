import { parseTimestamp, getDayIdentifier, getTimestampIdentifier, isTimedless, updateHasTime, } from './timestamp';
export function parseEvent(input, index, startProperty, endProperty, timed = false, category = false) {
    const startInput = input[startProperty];
    const endInput = input[endProperty];
    const startParsed = parseTimestamp(startInput, true);
    const endParsed = (endInput ? parseTimestamp(endInput, true) : startParsed);
    const start = isTimedless(startInput)
        ? updateHasTime(startParsed, timed)
        : startParsed;
    const end = isTimedless(endInput)
        ? updateHasTime(endParsed, timed)
        : endParsed;
    const startIdentifier = getDayIdentifier(start);
    const startTimestampIdentifier = getTimestampIdentifier(start);
    const endIdentifier = getDayIdentifier(end);
    const endOffset = start.hasTime ? 0 : 2359;
    const endTimestampIdentifier = getTimestampIdentifier(end) + endOffset;
    const allDay = !start.hasTime;
    return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index, category };
}
export function isEventOn(event, dayIdentifier) {
    return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier;
}
export function isEventHiddenOn(event, day) {
    return event.end.time === '00:00' && event.end.date === day.date && event.start.date !== day.date;
}
export function isEventStart(event, day, dayIdentifier, firstWeekday) {
    return dayIdentifier === event.startIdentifier || (firstWeekday === day.weekday && isEventOn(event, dayIdentifier));
}
export function isEventOverlapping(event, startIdentifier, endIdentifier) {
    return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkNhbGVuZGFyL3V0aWwvZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLHNCQUFzQixFQUN0QixXQUFXLEVBQ1gsYUFBYSxHQUNkLE1BQU0sYUFBYSxDQUFBO0FBR3BCLE1BQU0sVUFBVSxVQUFVLENBQ3hCLEtBQW9CLEVBQ3BCLEtBQWEsRUFDYixhQUFxQixFQUNyQixXQUFtQixFQUNuQixLQUFLLEdBQUcsS0FBSyxFQUNiLFdBQTJCLEtBQUs7SUFFaEMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNuQyxNQUFNLFdBQVcsR0FBc0IsY0FBYyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUN2RSxNQUFNLFNBQVMsR0FBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzlGLE1BQU0sS0FBSyxHQUFzQixXQUFXLENBQUMsVUFBVSxDQUFDO1FBQ3RELENBQUMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQztRQUNuQyxDQUFDLENBQUMsV0FBVyxDQUFBO0lBQ2YsTUFBTSxHQUFHLEdBQXNCLFdBQVcsQ0FBQyxRQUFRLENBQUM7UUFDbEQsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxTQUFTLENBQUE7SUFDYixNQUFNLGVBQWUsR0FBVyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN2RCxNQUFNLHdCQUF3QixHQUFXLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3RFLE1BQU0sYUFBYSxHQUFXLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ25ELE1BQU0sU0FBUyxHQUFXLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0lBQ2xELE1BQU0sc0JBQXNCLEdBQVcsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFBO0lBQzlFLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQTtJQUU3QixPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsd0JBQXdCLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFBO0FBQ3pJLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFFLEtBQTBCLEVBQUUsYUFBcUI7SUFDMUUsT0FBTyxhQUFhLElBQUksS0FBSyxDQUFDLGVBQWUsSUFBSSxhQUFhLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQTtBQUN2RixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBRSxLQUEwQixFQUFFLEdBQXNCO0lBQ2pGLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQTtBQUNuRyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBRSxLQUEwQixFQUFFLEdBQXNCLEVBQUUsYUFBcUIsRUFBRSxZQUFvQjtJQUMzSCxPQUFPLGFBQWEsS0FBSyxLQUFLLENBQUMsZUFBZSxJQUFJLENBQUMsWUFBWSxLQUFLLEdBQUcsQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFBO0FBQ3JILENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUUsS0FBMEIsRUFBRSxlQUF1QixFQUFFLGFBQXFCO0lBQzVHLE9BQU8sZUFBZSxJQUFJLEtBQUssQ0FBQyxhQUFhLElBQUksYUFBYSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUE7QUFDekYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHBhcnNlVGltZXN0YW1wLFxuICBnZXREYXlJZGVudGlmaWVyLFxuICBnZXRUaW1lc3RhbXBJZGVudGlmaWVyLFxuICBpc1RpbWVkbGVzcyxcbiAgdXBkYXRlSGFzVGltZSxcbn0gZnJvbSAnLi90aW1lc3RhbXAnXG5pbXBvcnQgeyBDYWxlbmRhclRpbWVzdGFtcCwgQ2FsZW5kYXJFdmVudCwgQ2FsZW5kYXJFdmVudFBhcnNlZCB9IGZyb20gJ3Z1ZXRpZnkvdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV2ZW50IChcbiAgaW5wdXQ6IENhbGVuZGFyRXZlbnQsXG4gIGluZGV4OiBudW1iZXIsXG4gIHN0YXJ0UHJvcGVydHk6IHN0cmluZyxcbiAgZW5kUHJvcGVydHk6IHN0cmluZyxcbiAgdGltZWQgPSBmYWxzZSxcbiAgY2F0ZWdvcnk6IHN0cmluZyB8IGZhbHNlID0gZmFsc2UsXG4pOiBDYWxlbmRhckV2ZW50UGFyc2VkIHtcbiAgY29uc3Qgc3RhcnRJbnB1dCA9IGlucHV0W3N0YXJ0UHJvcGVydHldXG4gIGNvbnN0IGVuZElucHV0ID0gaW5wdXRbZW5kUHJvcGVydHldXG4gIGNvbnN0IHN0YXJ0UGFyc2VkOiBDYWxlbmRhclRpbWVzdGFtcCA9IHBhcnNlVGltZXN0YW1wKHN0YXJ0SW5wdXQsIHRydWUpXG4gIGNvbnN0IGVuZFBhcnNlZDogQ2FsZW5kYXJUaW1lc3RhbXAgPSAoZW5kSW5wdXQgPyBwYXJzZVRpbWVzdGFtcChlbmRJbnB1dCwgdHJ1ZSkgOiBzdGFydFBhcnNlZClcbiAgY29uc3Qgc3RhcnQ6IENhbGVuZGFyVGltZXN0YW1wID0gaXNUaW1lZGxlc3Moc3RhcnRJbnB1dClcbiAgICA/IHVwZGF0ZUhhc1RpbWUoc3RhcnRQYXJzZWQsIHRpbWVkKVxuICAgIDogc3RhcnRQYXJzZWRcbiAgY29uc3QgZW5kOiBDYWxlbmRhclRpbWVzdGFtcCA9IGlzVGltZWRsZXNzKGVuZElucHV0KVxuICAgID8gdXBkYXRlSGFzVGltZShlbmRQYXJzZWQsIHRpbWVkKVxuICAgIDogZW5kUGFyc2VkXG4gIGNvbnN0IHN0YXJ0SWRlbnRpZmllcjogbnVtYmVyID0gZ2V0RGF5SWRlbnRpZmllcihzdGFydClcbiAgY29uc3Qgc3RhcnRUaW1lc3RhbXBJZGVudGlmaWVyOiBudW1iZXIgPSBnZXRUaW1lc3RhbXBJZGVudGlmaWVyKHN0YXJ0KVxuICBjb25zdCBlbmRJZGVudGlmaWVyOiBudW1iZXIgPSBnZXREYXlJZGVudGlmaWVyKGVuZClcbiAgY29uc3QgZW5kT2Zmc2V0OiBudW1iZXIgPSBzdGFydC5oYXNUaW1lID8gMCA6IDIzNTlcbiAgY29uc3QgZW5kVGltZXN0YW1wSWRlbnRpZmllcjogbnVtYmVyID0gZ2V0VGltZXN0YW1wSWRlbnRpZmllcihlbmQpICsgZW5kT2Zmc2V0XG4gIGNvbnN0IGFsbERheSA9ICFzdGFydC5oYXNUaW1lXG5cbiAgcmV0dXJuIHsgaW5wdXQsIHN0YXJ0LCBzdGFydElkZW50aWZpZXIsIHN0YXJ0VGltZXN0YW1wSWRlbnRpZmllciwgZW5kLCBlbmRJZGVudGlmaWVyLCBlbmRUaW1lc3RhbXBJZGVudGlmaWVyLCBhbGxEYXksIGluZGV4LCBjYXRlZ29yeSB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V2ZW50T24gKGV2ZW50OiBDYWxlbmRhckV2ZW50UGFyc2VkLCBkYXlJZGVudGlmaWVyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIGRheUlkZW50aWZpZXIgPj0gZXZlbnQuc3RhcnRJZGVudGlmaWVyICYmIGRheUlkZW50aWZpZXIgPD0gZXZlbnQuZW5kSWRlbnRpZmllclxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudEhpZGRlbk9uIChldmVudDogQ2FsZW5kYXJFdmVudFBhcnNlZCwgZGF5OiBDYWxlbmRhclRpbWVzdGFtcCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZXZlbnQuZW5kLnRpbWUgPT09ICcwMDowMCcgJiYgZXZlbnQuZW5kLmRhdGUgPT09IGRheS5kYXRlICYmIGV2ZW50LnN0YXJ0LmRhdGUgIT09IGRheS5kYXRlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V2ZW50U3RhcnQgKGV2ZW50OiBDYWxlbmRhckV2ZW50UGFyc2VkLCBkYXk6IENhbGVuZGFyVGltZXN0YW1wLCBkYXlJZGVudGlmaWVyOiBudW1iZXIsIGZpcnN0V2Vla2RheTogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBkYXlJZGVudGlmaWVyID09PSBldmVudC5zdGFydElkZW50aWZpZXIgfHwgKGZpcnN0V2Vla2RheSA9PT0gZGF5LndlZWtkYXkgJiYgaXNFdmVudE9uKGV2ZW50LCBkYXlJZGVudGlmaWVyKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXZlbnRPdmVybGFwcGluZyAoZXZlbnQ6IENhbGVuZGFyRXZlbnRQYXJzZWQsIHN0YXJ0SWRlbnRpZmllcjogbnVtYmVyLCBlbmRJZGVudGlmaWVyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIHN0YXJ0SWRlbnRpZmllciA8PSBldmVudC5lbmRJZGVudGlmaWVyICYmIGVuZElkZW50aWZpZXIgPj0gZXZlbnQuc3RhcnRJZGVudGlmaWVyXG59XG4iXX0=