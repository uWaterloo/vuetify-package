// Mixins
import { factory as GroupableFactory } from '../../mixins/groupable';
import Routable from '../../mixins/routable';
import Themeable from '../../mixins/themeable';
// Utilities
import { keyCodes } from './../../util/helpers';
import mixins from '../../util/mixins';
const baseMixins = mixins(Routable, 
// Must be after routable
// to overwrite activeClass
GroupableFactory('tabsBar'), Themeable);
export default baseMixins.extend().extend(
/* @vue/component */
).extend({
    name: 'v-tab',
    props: {
        ripple: {
            type: [Boolean, Object],
            default: true,
        },
    },
    data: () => ({
        proxyClass: 'v-tab--active',
    }),
    computed: {
        classes() {
            return {
                'v-tab': true,
                ...Routable.options.computed.classes.call(this),
                'v-tab--disabled': this.disabled,
                ...this.groupClasses,
            };
        },
        value() {
            let to = this.to || this.href;
            if (to == null)
                return to;
            if (this.$router &&
                this.to === Object(this.to)) {
                const resolve = this.$router.resolve(this.to, this.$route, this.append);
                to = resolve.href;
            }
            return to.replace('#', '');
        },
    },
    methods: {
        click(e) {
            // Prevent keyboard actions
            // from children elements
            // within disabled tabs
            if (this.disabled) {
                e.preventDefault();
                return;
            }
            // If user provides an
            // actual link, do not
            // prevent default
            if (this.href &&
                this.href.indexOf('#') > -1)
                e.preventDefault();
            if (e.detail)
                this.$el.blur();
            this.$emit('click', e);
            this.to || this.toggle();
        },
        toggle() {
            // VItemGroup treats a change event as a click
            if (!this.isActive || (!this.tabsBar.mandatory && !this.to)) {
                this.$emit('change');
            }
        },
    },
    render(h) {
        const { tag, data } = this.generateRouteLink();
        data.attrs = {
            ...data.attrs,
            'aria-selected': String(this.isActive),
            role: 'tab',
            tabindex: this.disabled ? -1 : 0,
        };
        data.on = {
            ...data.on,
            keydown: (e) => {
                if (e.keyCode === keyCodes.enter)
                    this.click(e);
                this.$emit('keydown', e);
            },
        };
        return h(tag, data, this.$slots.default);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRhYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZUYWJzL1ZUYWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUztBQUNULE9BQU8sRUFBRSxPQUFPLElBQUksZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUNwRSxPQUFPLFFBQVEsTUFBTSx1QkFBdUIsQ0FBQTtBQUM1QyxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQUU5QyxZQUFZO0FBQ1osT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQy9DLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFBO0FBU3RDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FDdkIsUUFBUTtBQUNSLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0IsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQzNCLFNBQVMsQ0FDVixDQUFBO0FBU0QsZUFBZSxVQUFVLENBQUMsTUFBTSxFQUFXLENBQUMsTUFBTTtBQUNoRCxvQkFBb0I7Q0FDckIsQ0FBQyxNQUFNLENBQUM7SUFDUCxJQUFJLEVBQUUsT0FBTztJQUViLEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7WUFDdkIsT0FBTyxFQUFFLElBQUk7U0FDZDtLQUNGO0lBRUQsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDWCxVQUFVLEVBQUUsZUFBZTtLQUM1QixDQUFDO0lBRUYsUUFBUSxFQUFFO1FBQ1IsT0FBTztZQUNMLE9BQU87Z0JBQ0wsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDL0MsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ2hDLEdBQUcsSUFBSSxDQUFDLFlBQVk7YUFD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aW5zXG5pbXBvcnQgeyBmYWN0b3J5IGFzIEdyb3VwYWJsZUZhY3RvcnkgfSBmcm9tICcuLi8uLi9taXhpbnMvZ3JvdXBhYmxlJ1xuaW1wb3J0IFJvdXRhYmxlIGZyb20gJy4uLy4uL21peGlucy9yb3V0YWJsZSdcbmltcG9ydCBUaGVtZWFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL3RoZW1lYWJsZSdcblxuLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBrZXlDb2RlcyB9IGZyb20gJy4vLi4vLi4vdXRpbC9oZWxwZXJzJ1xuaW1wb3J0IG1peGlucyBmcm9tICcuLi8uLi91dGlsL21peGlucydcbmltcG9ydCB7IEV4dHJhY3RWdWUgfSBmcm9tICcuLy4uLy4uL3V0aWwvbWl4aW5zJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUvdHlwZXMnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCBWVGFic0JhciBmcm9tICcuLi9WVGFicy9WVGFic0JhcidcblxuY29uc3QgYmFzZU1peGlucyA9IG1peGlucyhcbiAgUm91dGFibGUsXG4gIC8vIE11c3QgYmUgYWZ0ZXIgcm91dGFibGVcbiAgLy8gdG8gb3ZlcndyaXRlIGFjdGl2ZUNsYXNzXG4gIEdyb3VwYWJsZUZhY3RvcnkoJ3RhYnNCYXInKSxcbiAgVGhlbWVhYmxlXG4pXG5cbnR5cGUgVlRhYkJhckluc3RhbmNlID0gSW5zdGFuY2VUeXBlPHR5cGVvZiBWVGFic0Jhcj5cblxuaW50ZXJmYWNlIG9wdGlvbnMgZXh0ZW5kcyBFeHRyYWN0VnVlPHR5cGVvZiBiYXNlTWl4aW5zPiB7XG4gICRlbDogSFRNTEVsZW1lbnRcbiAgdGFic0JhcjogVlRhYkJhckluc3RhbmNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNaXhpbnMuZXh0ZW5kPG9wdGlvbnM+KCkuZXh0ZW5kKFxuICAvKiBAdnVlL2NvbXBvbmVudCAqL1xuKS5leHRlbmQoe1xuICBuYW1lOiAndi10YWInLFxuXG4gIHByb3BzOiB7XG4gICAgcmlwcGxlOiB7XG4gICAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSxcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgfSxcbiAgfSxcblxuICBkYXRhOiAoKSA9PiAoe1xuICAgIHByb3h5Q2xhc3M6ICd2LXRhYi0tYWN0aXZlJyxcbiAgfSksXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBjbGFzc2VzICgpOiBvYmplY3Qge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ3YtdGFiJzogdHJ1ZSxcbiAgICAgICAgLi4uUm91dGFibGUub3B0aW9ucy5jb21wdXRlZC5jbGFzc2VzLmNhbGwodGhpcyksXG4gICAgICAgICd2LXRhYi0tZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkLFxuICAgICAgICAuLi50aGlzLmdyb3VwQ2xhc3NlcyxcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbHVlICgpOiBhbnkge1xuICAgICAgbGV0IHRvID0gdGhpcy50byB8fCB0aGlzLmhyZWZcblxuICAgICAgaWYgKHRvID09IG51bGwpIHJldHVybiB0b1xuXG4gICAgICBpZiAodGhpcy4kcm91dGVyICYmXG4gICAgICAgIHRoaXMudG8gPT09IE9iamVjdCh0aGlzLnRvKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmUgPSB0aGlzLiRyb3V0ZXIucmVzb2x2ZShcbiAgICAgICAgICB0aGlzLnRvLFxuICAgICAgICAgIHRoaXMuJHJvdXRlLFxuICAgICAgICAgIHRoaXMuYXBwZW5kXG4gICAgICAgIClcblxuICAgICAgICB0byA9IHJlc29sdmUuaHJlZlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG8ucmVwbGFjZSgnIycsICcnKVxuICAgIH0sXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGNsaWNrIChlOiBLZXlib2FyZEV2ZW50IHwgTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgLy8gUHJldmVudCBrZXlib2FyZCBhY3Rpb25zXG4gICAgICAvLyBmcm9tIGNoaWxkcmVuIGVsZW1lbnRzXG4gICAgICAvLyB3aXRoaW4gZGlzYWJsZWQgdGFic1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBJZiB1c2VyIHByb3ZpZGVzIGFuXG4gICAgICAvLyBhY3R1YWwgbGluaywgZG8gbm90XG4gICAgICAvLyBwcmV2ZW50IGRlZmF1bHRcbiAgICAgIGlmICh0aGlzLmhyZWYgJiZcbiAgICAgICAgdGhpcy5ocmVmLmluZGV4T2YoJyMnKSA+IC0xXG4gICAgICApIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICBpZiAoZS5kZXRhaWwpIHRoaXMuJGVsLmJsdXIoKVxuXG4gICAgICB0aGlzLiRlbWl0KCdjbGljaycsIGUpXG5cbiAgICAgIHRoaXMudG8gfHwgdGhpcy50b2dnbGUoKVxuICAgIH0sXG4gICAgdG9nZ2xlICgpIHtcbiAgICAgIC8vIFZJdGVtR3JvdXAgdHJlYXRzIGEgY2hhbmdlIGV2ZW50IGFzIGEgY2xpY2tcbiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAoIXRoaXMudGFic0Jhci5tYW5kYXRvcnkgJiYgIXRoaXMudG8pKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScpXG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICByZW5kZXIgKGgpOiBWTm9kZSB7XG4gICAgY29uc3QgeyB0YWcsIGRhdGEgfSA9IHRoaXMuZ2VuZXJhdGVSb3V0ZUxpbmsoKVxuXG4gICAgZGF0YS5hdHRycyA9IHtcbiAgICAgIC4uLmRhdGEuYXR0cnMsXG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IFN0cmluZyh0aGlzLmlzQWN0aXZlKSxcbiAgICAgIHJvbGU6ICd0YWInLFxuICAgICAgdGFiaW5kZXg6IHRoaXMuZGlzYWJsZWQgPyAtMSA6IDAsXG4gICAgfVxuICAgIGRhdGEub24gPSB7XG4gICAgICAuLi5kYXRhLm9uLFxuICAgICAga2V5ZG93bjogKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0ga2V5Q29kZXMuZW50ZXIpIHRoaXMuY2xpY2soZSlcblxuICAgICAgICB0aGlzLiRlbWl0KCdrZXlkb3duJywgZSlcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBkYXRhLCB0aGlzLiRzbG90cy5kZWZhdWx0KVxuICB9LFxufSlcbiJdfQ==