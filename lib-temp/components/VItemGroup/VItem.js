// Mixins
import { factory as GroupableFactory } from '../../mixins/groupable';
// Utilities
import mixins from '../../util/mixins';
import { consoleWarn } from '../../util/console';
// Types
import Vue from 'vue';
/* @vue/component */
export const BaseItem = Vue.extend({
    props: {
        activeClass: String,
        value: {
            required: false,
        },
    },
    data: () => ({
        isActive: false,
    }),
    methods: {
        toggle() {
            this.isActive = !this.isActive;
        },
    },
    render() {
        if (!this.$scopedSlots.default) {
            consoleWarn('v-item is missing a default scopedSlot', this);
            return null;
        }
        let element;
        /* istanbul ignore else */
        if (this.$scopedSlots.default) {
            element = this.$scopedSlots.default({
                active: this.isActive,
                toggle: this.toggle,
            });
        }
        if (Array.isArray(element) && element.length === 1) {
            element = element[0];
        }
        if (!element || Array.isArray(element) || !element.tag) {
            consoleWarn('v-item should only contain a single element', this);
            return element;
        }
        element.data = this._b(element.data || {}, element.tag, {
            class: { [this.activeClass]: this.isActive },
        });
        return element;
    },
});
export default mixins(BaseItem, GroupableFactory('itemGroup', 'v-item', 'v-item-group')).extend({
    name: 'v-item',
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WSXRlbUdyb3VwL1ZJdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVM7QUFDVCxPQUFPLEVBQUUsT0FBTyxJQUFJLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFFcEUsWUFBWTtBQUNaLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFBO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUVoRCxRQUFRO0FBQ1IsT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFBO0FBR3JCLG9CQUFvQjtBQUNwQixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUNqQyxLQUFLLEVBQUU7UUFDTCxXQUFXLEVBQUUsTUFBTTtRQUNuQixLQUFLLEVBQUU7WUFDTCxRQUFRLEVBQUUsS0FBSztTQUNoQjtLQUNGO0lBRUQsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDWCxRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDO0lBRUYsT0FBTyxFQUFFO1FBQ1AsTUFBTTtZQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBO1FBQ2hDLENBQUM7S0FDRjtJQUVELE1BQU07UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7WUFDOUIsV0FBVyxDQUFDLHdDQUF3QyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBRTNELE9BQU8sSUFBVyxDQUFBO1NBQ25CO1FBRUQsSUFBSSxPQUFtQyxDQUFBO1FBRXZDLDBCQUEwQjtRQUMxQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO1lBQzdCLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztnQkFDbEMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07YUFDcEIsQ0FBQyxDQUFBO1NBQ0g7UUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEQsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNyQjtRQUVELElBQUksQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDdEQsV0FBVyxDQUFDLDZDQUE2QyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBRWhFLE9BQU8sT0FBYyxDQUFBO1NBQ3RCO1FBRUQsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFJLEVBQUU7WUFDdkQsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRTtTQUM3QyxDQUFDLENBQUE7UUFFRixPQUFPLE9BQU8sQ0FBQTtJQUNoQixDQUFDO0NBQ0YsQ0FBQyxDQUFBO0FBRUYsZUFBZSxNQUFNLENBQ25CLFFBQVEsRUFDUixnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUN4RCxDQUFDLE1BQU0sQ0FBQztJQUNQLElBQUksRUFBRSxRQUFRO0NBQ2YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTWl4aW5zXG5pbXBvcnQgeyBmYWN0b3J5IGFzIEdyb3VwYWJsZUZhY3RvcnkgfSBmcm9tICcuLi8uLi9taXhpbnMvZ3JvdXBhYmxlJ1xuXG4vLyBVdGlsaXRpZXNcbmltcG9ydCBtaXhpbnMgZnJvbSAnLi4vLi4vdXRpbC9taXhpbnMnXG5pbXBvcnQgeyBjb25zb2xlV2FybiB9IGZyb20gJy4uLy4uL3V0aWwvY29uc29sZSdcblxuLy8gVHlwZXNcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IHsgVk5vZGUsIFNjb3BlZFNsb3RDaGlsZHJlbiB9IGZyb20gJ3Z1ZS90eXBlcy92bm9kZSdcblxuLyogQHZ1ZS9jb21wb25lbnQgKi9cbmV4cG9ydCBjb25zdCBCYXNlSXRlbSA9IFZ1ZS5leHRlbmQoe1xuICBwcm9wczoge1xuICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgdmFsdWU6IHtcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgaXNBY3RpdmU6IGZhbHNlLFxuICB9KSxcblxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlICgpIHtcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSAhdGhpcy5pc0FjdGl2ZVxuICAgIH0sXG4gIH0sXG5cbiAgcmVuZGVyICgpOiBWTm9kZSB7XG4gICAgaWYgKCF0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0KSB7XG4gICAgICBjb25zb2xlV2Fybigndi1pdGVtIGlzIG1pc3NpbmcgYSBkZWZhdWx0IHNjb3BlZFNsb3QnLCB0aGlzKVxuXG4gICAgICByZXR1cm4gbnVsbCBhcyBhbnlcbiAgICB9XG5cbiAgICBsZXQgZWxlbWVudDogVk5vZGUgfCBTY29wZWRTbG90Q2hpbGRyZW5cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHQpIHtcbiAgICAgIGVsZW1lbnQgPSB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0KHtcbiAgICAgICAgYWN0aXZlOiB0aGlzLmlzQWN0aXZlLFxuICAgICAgICB0b2dnbGU6IHRoaXMudG9nZ2xlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50KSAmJiBlbGVtZW50Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnRbMF1cbiAgICB9XG5cbiAgICBpZiAoIWVsZW1lbnQgfHwgQXJyYXkuaXNBcnJheShlbGVtZW50KSB8fCAhZWxlbWVudC50YWcpIHtcbiAgICAgIGNvbnNvbGVXYXJuKCd2LWl0ZW0gc2hvdWxkIG9ubHkgY29udGFpbiBhIHNpbmdsZSBlbGVtZW50JywgdGhpcylcblxuICAgICAgcmV0dXJuIGVsZW1lbnQgYXMgYW55XG4gICAgfVxuXG4gICAgZWxlbWVudC5kYXRhID0gdGhpcy5fYihlbGVtZW50LmRhdGEgfHwge30sIGVsZW1lbnQudGFnISwge1xuICAgICAgY2xhc3M6IHsgW3RoaXMuYWN0aXZlQ2xhc3NdOiB0aGlzLmlzQWN0aXZlIH0sXG4gICAgfSlcblxuICAgIHJldHVybiBlbGVtZW50XG4gIH0sXG59KVxuXG5leHBvcnQgZGVmYXVsdCBtaXhpbnMoXG4gIEJhc2VJdGVtLFxuICBHcm91cGFibGVGYWN0b3J5KCdpdGVtR3JvdXAnLCAndi1pdGVtJywgJ3YtaXRlbS1ncm91cCcpXG4pLmV4dGVuZCh7XG4gIG5hbWU6ICd2LWl0ZW0nLFxufSlcbiJdfQ==