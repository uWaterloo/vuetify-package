// Styles
import './VTextarea.sass';
// Extensions
import VTextField from '../VTextField/VTextField';
// Utilities
import mixins from '../../util/mixins';
const baseMixins = mixins(VTextField);
/* @vue/component */
export default baseMixins.extend({
    name: 'v-textarea',
    props: {
        autoGrow: Boolean,
        noResize: Boolean,
        rowHeight: {
            type: [Number, String],
            default: 24,
            validator: (v) => !isNaN(parseFloat(v)),
        },
        rows: {
            type: [Number, String],
            default: 5,
            validator: (v) => !isNaN(parseInt(v, 10)),
        },
    },
    computed: {
        classes() {
            return {
                'v-textarea': true,
                'v-textarea--auto-grow': this.autoGrow,
                'v-textarea--no-resize': this.noResizeHandle,
                ...VTextField.options.computed.classes.call(this),
            };
        },
        noResizeHandle() {
            return this.noResize || this.autoGrow;
        },
    },
    watch: {
        autoGrow(val) {
            this.$nextTick(() => {
                val
                    ? this.calculateInputHeight()
                    : this.$refs.input?.style.removeProperty('height');
            });
        },
        lazyValue() {
            this.autoGrow && this.$nextTick(this.calculateInputHeight);
        },
        rowHeight() {
            this.autoGrow && this.$nextTick(this.calculateInputHeight);
        },
    },
    mounted() {
        setTimeout(() => {
            this.autoGrow && this.calculateInputHeight();
        }, 0);
    },
    methods: {
        calculateInputHeight() {
            const input = this.$refs.input;
            if (!input)
                return;
            input.style.height = '0';
            const height = input.scrollHeight;
            const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight);
            // This has to be done ASAP, waiting for Vue
            // to update the DOM causes ugly layout jumping
            input.style.height = Math.max(minHeight, height) + 'px';
        },
        genInput() {
            const input = VTextField.options.methods.genInput.call(this);
            input.tag = 'textarea';
            delete input.data.attrs.type;
            input.data.attrs.rows = this.rows;
            return input;
        },
        onInput(e) {
            VTextField.options.methods.onInput.call(this, e);
            this.autoGrow && this.calculateInputHeight();
        },
        onKeyDown(e) {
            // Prevents closing of a
            // dialog when pressing
            // enter
            if (this.isFocused && e.keyCode === 13) {
                e.stopPropagation();
            }
            this.$emit('keydown', e);
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlRleHRhcmVhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVlRleHRhcmVhL1ZUZXh0YXJlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTyxrQkFBa0IsQ0FBQTtBQUV6QixhQUFhO0FBQ2IsT0FBTyxVQUFVLE1BQU0sMEJBQTBCLENBQUE7QUFFakQsWUFBWTtBQUNaLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFBO0FBV3RDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FHdkIsVUFBVSxDQUNYLENBQUE7QUFFRCxvQkFBb0I7QUFDcEIsZUFBZSxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQy9CLElBQUksRUFBRSxZQUFZO0lBRWxCLEtBQUssRUFBRTtRQUNMLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLFNBQVMsRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLEVBQUU7WUFDWCxTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QztRQUNELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0M7S0FDRjtJQUVELFFBQVEsRUFBRTtRQUNSLE9BQU87WUFDTCxPQUFPO2dCQUNMLFlBQVksRUFBRSxJQUFJO2dCQUNsQix1QkFBdUIsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdEMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLGNBQWM7Z0JBQzVDLEdBQUcsVUFB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Q0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU3R5bGVzXG5pbXBvcnQgJy4vVlRleHRhcmVhLnNhc3MnXG5cbi8vIEV4dGVuc2lvbnNcbmltcG9ydCBWVGV4dEZpZWxkIGZyb20gJy4uL1ZUZXh0RmllbGQvVlRleHRGaWVsZCdcblxuLy8gVXRpbGl0aWVzXG5pbXBvcnQgbWl4aW5zIGZyb20gJy4uLy4uL3V0aWwvbWl4aW5zJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5cbmludGVyZmFjZSBvcHRpb25zIGV4dGVuZHMgVnVlIHtcbiAgJHJlZnM6IHtcbiAgICBpbnB1dDogSFRNTFRleHRBcmVhRWxlbWVudFxuICB9XG59XG5cbmNvbnN0IGJhc2VNaXhpbnMgPSBtaXhpbnM8b3B0aW9ucyAmXG4gIEluc3RhbmNlVHlwZTx0eXBlb2YgVlRleHRGaWVsZD5cbj4oXG4gIFZUZXh0RmllbGRcbilcblxuLyogQHZ1ZS9jb21wb25lbnQgKi9cbmV4cG9ydCBkZWZhdWx0IGJhc2VNaXhpbnMuZXh0ZW5kKHtcbiAgbmFtZTogJ3YtdGV4dGFyZWEnLFxuXG4gIHByb3BzOiB7XG4gICAgYXV0b0dyb3c6IEJvb2xlYW4sXG4gICAgbm9SZXNpemU6IEJvb2xlYW4sXG4gICAgcm93SGVpZ2h0OiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMjQsXG4gICAgICB2YWxpZGF0b3I6ICh2OiBhbnkpID0+ICFpc05hTihwYXJzZUZsb2F0KHYpKSxcbiAgICB9LFxuICAgIHJvd3M6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiA1LFxuICAgICAgdmFsaWRhdG9yOiAodjogYW55KSA9PiAhaXNOYU4ocGFyc2VJbnQodiwgMTApKSxcbiAgICB9LFxuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgY2xhc3NlcyAoKTogb2JqZWN0IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICd2LXRleHRhcmVhJzogdHJ1ZSxcbiAgICAgICAgJ3YtdGV4dGFyZWEtLWF1dG8tZ3Jvdyc6IHRoaXMuYXV0b0dyb3csXG4gICAgICAgICd2LXRleHRhcmVhLS1uby1yZXNpemUnOiB0aGlzLm5vUmVzaXplSGFuZGxlLFxuICAgICAgICAuLi5WVGV4dEZpZWxkLm9wdGlvbnMuY29tcHV0ZWQuY2xhc3Nlcy5jYWxsKHRoaXMpLFxuICAgICAgfVxuICAgIH0sXG4gICAgbm9SZXNpemVIYW5kbGUgKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMubm9SZXNpemUgfHwgdGhpcy5hdXRvR3Jvd1xuICAgIH0sXG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBhdXRvR3JvdyAodmFsOiBib29sZWFuKSB7XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHZhbFxuICAgICAgICAgID8gdGhpcy5jYWxjdWxhdGVJbnB1dEhlaWdodCgpXG4gICAgICAgICAgOiB0aGlzLiRyZWZzLmlucHV0Py5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnaGVpZ2h0JylcbiAgICAgIH0pXG4gICAgfSxcbiAgICBsYXp5VmFsdWUgKCkge1xuICAgICAgdGhpcy5hdXRvR3JvdyAmJiB0aGlzLiRuZXh0VGljayh0aGlzLmNhbGN1bGF0ZUlucHV0SGVpZ2h0KVxuICAgIH0sXG4gICAgcm93SGVpZ2h0ICgpIHtcbiAgICAgIHRoaXMuYXV0b0dyb3cgJiYgdGhpcy4kbmV4dFRpY2sodGhpcy5jYWxjdWxhdGVJbnB1dEhlaWdodClcbiAgICB9LFxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5hdXRvR3JvdyAmJiB0aGlzLmNhbGN1bGF0ZUlucHV0SGVpZ2h0KClcbiAgICB9LCAwKVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBjYWxjdWxhdGVJbnB1dEhlaWdodCAoKSB7XG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXMuJHJlZnMuaW5wdXRcbiAgICAgIGlmICghaW5wdXQpIHJldHVyblxuXG4gICAgICBpbnB1dC5zdHlsZS5oZWlnaHQgPSAnMCdcbiAgICAgIGNvbnN0IGhlaWdodCA9IGlucHV0LnNjcm9sbEhlaWdodFxuICAgICAgY29uc3QgbWluSGVpZ2h0ID0gcGFyc2VJbnQodGhpcy5yb3dzLCAxMCkgKiBwYXJzZUZsb2F0KHRoaXMucm93SGVpZ2h0KVxuICAgICAgLy8gVGhpcyBoYXMgdG8gYmUgZG9uZSBBU0FQLCB3YWl0aW5nIGZvciBWdWVcbiAgICAgIC8vIHRvIHVwZGF0ZSB0aGUgRE9NIGNhdXNlcyB1Z2x5IGxheW91dCBqdW1waW5nXG4gICAgICBpbnB1dC5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHQsIGhlaWdodCkgKyAncHgnXG4gICAgfSxcbiAgICBnZW5JbnB1dCAoKSB7XG4gICAgICBjb25zdCBpbnB1dCA9IFZUZXh0RmllbGQub3B0aW9ucy5tZXRob2RzLmdlbklucHV0LmNhbGwodGhpcylcblxuICAgICAgaW5wdXQudGFnID0gJ3RleHRhcmVhJ1xuICAgICAgZGVsZXRlIGlucHV0LmRhdGEhLmF0dHJzIS50eXBlXG4gICAgICBpbnB1dC5kYXRhIS5hdHRycyEucm93cyA9IHRoaXMucm93c1xuXG4gICAgICByZXR1cm4gaW5wdXRcbiAgICB9LFxuICAgIG9uSW5wdXQgKGU6IEV2ZW50KSB7XG4gICAgICBWVGV4dEZpZWxkLm9wdGlvbnMubWV0aG9kcy5vbklucHV0LmNhbGwodGhpcywgZSlcbiAgICAgIHRoaXMuYXV0b0dyb3cgJiYgdGhpcy5jYWxjdWxhdGVJbnB1dEhlaWdodCgpXG4gICAgfSxcbiAgICBvbktleURvd24gKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgIC8vIFByZXZlbnRzIGNsb3Npbmcgb2YgYVxuICAgICAgLy8gZGlhbG9nIHdoZW4gcHJlc3NpbmdcbiAgICAgIC8vIGVudGVyXG4gICAgICBpZiAodGhpcy5pc0ZvY3VzZWQgJiYgZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVtaXQoJ2tleWRvd24nLCBlKVxuICAgIH0sXG4gIH0sXG59KVxuIl19